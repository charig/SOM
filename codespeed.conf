# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
standard_experiment: all
standard_run: all
standard_data_file: 'codespeed.data'

reporting:
    # results can also be reported to a codespeed instance
    # see: https://github.com/tobami/codespeed
    csv_file: latest-runs.csv
    csv_locale: de_DE.UTF-8
    codespeed:
        url: http://mate-speed.stefan-marr.de/result/add/json/

runs:
    number_of_data_points: 3

statistics:
    confidence_level: 0.95
 
# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-steady:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD ":Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 6000
        benchmarks:
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "Richards >]"
                warmup: 40
            - DeltaBlue:
                extra_args: "120 0 20000"
                codespeed_name: "DeltaBlue >]"
                warmup: 30
            - Mandelbrot:
                extra_args: "110 0 500"
                codespeed_name: "Mandelbrot >]"
                warmup: 20
            - NBody:
                extra_args: "120 0 500000"
                codespeed_name: "NBody >]"
                warmup: 30
            - Json:
                extra_args: "120 0 80"
                codespeed_name: "Json >]"
                warmup: 30
            - GraphSearch:
                extra_args: "250 0 30"
                codespeed_name: "GraphSearch >]"
                warmup: 150
            - PageRank:
                extra_args: "120 0 1400"
                codespeed_name: "PageRank >]"
                warmup: 50
            - CD:
                extra_args: "150 0 100"
                codespeed_name: "CD >]"
                warmup: 50
            - Havlak:
                extra_args: "150 0 150"
                codespeed_name: "Havlak >]"
                warmup: 50

    micro-steady:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "Fannkuch >]"
                warmup: 8
            - Fibonacci:
                extra_args: "60 0 1000"
                codespeed_name: "Fibonacci >]"
                warmup: 15
            - Dispatch:
                extra_args: "55 0 10000"
                codespeed_name: "Dispatch >]"
                warmup: 8
            - Bounce:
                extra_args: "60 0 4000"
                codespeed_name: "Bounce >]"
                warmup: 22
            - Loop:
                extra_args: "55 0 10000"
                codespeed_name: "Loop >]"
                warmup: 8
            - Permute:
                extra_args: "55 0 1500"
                codespeed_name: "Permute >]"
                warmup: 8
            - Queens:
                extra_args: "55 0 1000"
                codespeed_name: "Queens >]"
                warmup: 8
            - List:
                extra_args: "65 0 1000"
                codespeed_name: "List >]"
                warmup: 20
            - Recurse:
                extra_args: "65 0 2000"
                codespeed_name: "Recurse >]"
                warmup: 20
            - Storage:
                extra_args: "60 0 1000"
                codespeed_name: "Storage >]"
                warmup: 20
            - Sieve:
                extra_args: "60 0 2500"
                codespeed_name: "Sieve >]"
                warmup: 15
            - BubbleSort:
                extra_args: "60 0 3000"
                codespeed_name: "BubbleSort >]"
                warmup: 20
            - QuickSort:
                extra_args: "60 0 2000"
                codespeed_name: "QuickSort >]"
                warmup: 15
            - Sum:
                extra_args: "55 0 10000"
                codespeed_name: "Sum >]"
                warmup: 8
            - Towers:
                extra_args: "55 0 1000"
                codespeed_name: "Towers >]"
                warmup: 8
            - TreeSort:
                extra_args: "145 0 1000"
                codespeed_name: "TreeSort >]"
                warmup: 85
            - IntegerLoop:
                extra_args: "55 0 8000"
                codespeed_name: "IntegerLoop >]"
                warmup: 8
            - FieldLoop:
                extra_args: "55 0 900"
                codespeed_name: "FieldLoop >]"
                warmup: 8
            - WhileLoop:
                extra_args: "55 0 9000"
                codespeed_name: "WhileLoop >]"
                warmup: 8

    mate-steady:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/Mate Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        #input_sizes:
        #    - benchmarking.image ReBenchHarness
        max_runtime: 2000000
        benchmarks:
            - FieldWrite:
                extra_args: "200 0 150000"
                codespeed_name: "FieldWrite >]"
                warmup: 100
            - FieldRead:
                extra_args: "200 0 150000"
                codespeed_name: "FieldRead >]"
                warmup: 100
            - MessageSend:
                extra_args: "200 0 150000"
                codespeed_name: "MessageSend >]"
                warmup: 100
            - VMReflectiveFieldWrite:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveFieldWrite >]"
                warmup: 100
            - VMReflectiveFieldRead:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveFieldRead >]"
                warmup: 100
            - VMReflectiveLayoutFieldWrite:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveLayoutFieldWrite >]"
                warmup: 100
            - VMReflectiveLayoutFieldRead:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveLayoutFieldRead >]"
                warmup: 100
            - VMReflectiveMessageSend:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveMessageSend >]"
                warmup: 100    
            - VMReflectiveMethodActivation:
                extra_args: "200 0 150000"
                codespeed_name: "VMReflectiveMethodActivation >]"
                warmup: 100

    #Configuration of the Delegation Proxies for read only
    readonly:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/Mate:Examples/Benchmarks/Mate/DelegationProxies Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - SumKeys:
                 extra_args: "500 0 100"
                 codespeed_name: "SumKeys >]"
                 warmup: 100
            - DelegationProxiesSumKeys:
                 extra_args: "500 0 100"
                 codespeed_name: "ReadonlyDPSumKeys >]"
                 warmup: 100

    #Configuration of the Mate Handles for readonly
    mate-readonly-handles:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/Mate:Examples/Benchmarks/Mate/DelegationProxies Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - ReadonlySumKeys:
                 extra_args: "500 0 100"
                 codespeed_name: "ReadonlyHandlesSumKeys >]"
                 warmup: 100

    #Configuration of the Tracing Benchmarks
    standard-tracing:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/Mate:Examples/Benchmarks/Json:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/DeltaBlueInstrumented:Examples/Benchmarks/Mate/Tracing Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - DeltaBlueInstrumented:
                 extra_args: "120 0 20000"
                 codespeed_name: "DeltaBlueInsrumented >]"
                 warmup: 30
            - JsonBig:
                 extra_args: "10 0 1"
                 codespeed_name: "JsonBigFile >]"
                 warmup: 10

    mate-tracing:
        gauge_adapter: RebenchLog
        command: ":Examples/Benchmarks/Mate:Examples/Benchmarks/Json:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/DeltaBlueInstrumented:Examples/Benchmarks/Mate/Tracing Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - DeltaBlueMate:
                 extra_args: "120 0 20000"
                 codespeed_name: "DeltaBlueMate >]"
                 warmup: 30
            - JsonTrace:
                 extra_args: "10 0 1"
                 codespeed_name: "JsonTrace >]"
                 warmup: 10

    
# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    TruffleSOM-interpreter:
        path: .
        binary: som
        args: "-G -cp Smalltalk:"
    TruffleSOM-graal:
        path: . 
        binary: som
        args: "-cp Smalltalk"
    TruffleSOM-graal-enterprise:
        path: . 
        binary: oficial
        args: "-cp Smalltalk"
    TruffleSOM-graal-moreInlining:
        path: . 
        binary: som
        args: "-it -cp Smalltalk"        
    TruffleMate-interpreter:
        path: . 
        binary: som
        args: "--mate -G -cp Smalltalk:Smalltalk/Mate:Smalltalk/Mate/MOP"
    TruffleMate-graal:
        path: . 
        binary: som
        args: "--mate -activateMate -cp Smalltalk:Smalltalk/Mate:Smalltalk/Mate/MOP"
    TruffleMate-graal-moreInlining:
        path: . 
        binary: som
        args: "--mate -it -activateMate -cp Smalltalk:Smalltalk/Mate:Smalltalk/Mate/MOP"  
    TruffleMate-graal-enterprise:
        path: . 
        binary: oficial
        args: "--mate -activateMate -cp Smalltalk:Smalltalk/Mate:Smalltalk/Mate/MOP:Smalltalk/FileSystem/Core:Smalltalk/FileSystem/Disk:Smalltalk/FileSystem/Streams:Smalltalk/Collections/Streams"
    TruffleMate-graal-deactivated:
        path: . 
        binary: som
        args: "--mate -cp Smalltalk:Smalltalk/Mate:Smalltalk/Mate/MOP"

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    MateVsSOM:
        description: Comparing Mate to SOM and the different speedups with/without optimizations/compilation
        actions: benchmark
        benchmark:
            - micro-steady
            - macro-steady
        executions:
#            - TruffleSOM-interpreter
            - TruffleSOM-graal
            - TruffleSOM-graal-enterprise
#            - TruffleSOM-graal-moreInlining
#            - TruffleMate-interpreter
            - TruffleMate-graal
            - TruffleMate-graal-enterprise
#            - TruffleMate-graal-moreInlining
#            - TruffleMate-graal-deactivated


    MOPIndividual:
        description: Comparing Mate to SOM and the different speedups with/without optimizations/compilation
        actions: benchmark
        benchmark:
#            - mate-startup
             - mate-steady
        executions:
            - TruffleMate-graal
            - TruffleMate-graal-moreInlining

    #The results of this experiment are in Section X figures Y and Z
    ReflectiveVM-Readonly-Scenario:
        benchmark:
            - readonly
            - mate-readonly-handles
        executions:
            - TruffleMate-graal
            - TruffleMate-graal-moreInlining

    Readonly:
        data_file: readonly.data
        benchmark:
            - readonly-handles
            - readonly
        executions:
            - TruffleMate-graal:
            - TruffleMate-graal-enterprise
            
    Mate-Tracing:
        benchmark:
            - mate-tracing
        executions:
            - TruffleMate-graal
            - TruffleMate-graal-moreInlining
