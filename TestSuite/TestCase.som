TestCase = (
    | testSelector runner failed |
    
    selector       = ( ^ testSelector )
    selector: aSym = ( testSelector := aSym )
    
    "asserting"
    assert: aBoolean = (
        aBoolean ifFalse: [
            self signalFailure: 'Assertion failed' ] )

    assert: aBoolean description: aStringOrBlock = (
        aBoolean ifFalse: [
            self signalFailure: aStringOrBlock value ] )
    
    assert: expected equals: actual = (
        "test value equality"
        self assert: (expected = actual)
             description: [
             self comparingStringBetween: expected and: actual]
    )
    
    assert: expected is: actual = (
        "test reference equality"
        self assert: (expected == actual)
             description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: aBoolean = (
        aBoolean ifFalse: [
            self signalInefficacy: 'Expectation unsatisfied' ] )
    
    expect: expected equals: actual = (
        self expect: (expected = actual) 
             description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: expected is: actual = (
        self expect: (expected == actual) 
             description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: aBoolean description: aStringOrBlock = (
        aBoolean ifFalse: [
            self signalInefficacy: aStringOrBlock value ] )
    
    deny: aBoolean = (
        self assert: aBoolean not
    )
    
    deny: aBooleanOrBlock description: aString = (
        self assert: aBooleanOrBlock value not description: aString
    )
    
    signalFailure: aString = (
        failed := true.
        runner fail: self class name + '>>#' + testSelector
            because: aString.
    )
    
    signalInefficacy: aString = (
        runner unsatisfied: self class name + '>>#' + testSelector
                   because: aString.
    )
    
    comparingStringBetween: expected and: actual = (
        ^ 'Expected ' + expected asString +
          ' but was ' + actual asString + '.'
    )
    
    "running"
    run: aRunner = (
        runner := aRunner.
        failed := false.
        
        self setUp.
        self performTest.
        self tearDown.
        
        failed ifFalse: [
            runner passed: self class name + '>>#' + testSelector
        ].
    )
    
    setUp    = ()
    tearDown = ()
    
    performTest = ( self perform: testSelector )
    
    ----
    
    for: aSelector = (
        | case |
        case := self new.
        case selector: aSelector.
        ^ case
    )
    
    addTestFromClass: aClass to: aCollection = (
    	aClass methods do: [:m |
            (m signature beginsWith: #test) ifTrue: [
                aCollection append: (self for: m signature).
            ].
        ].
    )
    
    tests = (
        | tests |
        tests := Vector new: self methods length.
        self addTestFromClass: self to: tests.
        self shouldInheritSelectors ifTrue: [
        	| pivotClass |
        	pivotClass := self.
				[pivotClass == TestCase] whileFalse: [
					pivotClass := pivotClass superclass.
					self addTestFromClass: pivotClass to: tests.
				]
			].
        ^ tests
    )
    
    shouldInheritSelectors = (^false)
)