ImmutabilityTest = TestCase (
	initialize = (
		PropagationHandler initialize. 
		ReadOnlyPropagationHandler initialize
	)
	
	testObjectImmutability = (
        | object value environment |
		environment := EnvironmentMO 
							operationalSemantics: ImmutableSemanticsMO new 
							message: nil 
							layout: nil.
		object := Pair new.
		object key: 1.
		self assert: object key equals: 1.
		object installEnvironment: environment.
		object key: 2.
		self assert: object key equals: 1.
		object installEnvironment: nil.
		object key: 2.
		self assert: object key equals: 2.
    )
    
	testReferenceImmutabilty = (
        | object readOnlyReference |
		Handle initialize.
		object := Pair new.
		self readOnlyReferenceOf: object withReference: object readOnly
	)
	
	testReferenceReadOnlyProxies = (
		| object readOnlyReference |
		object := Pair new.
		readOnlyReference := PairProxy handler: ReadOnlyPropagationHandler new target: object.
		self readOnlyReferenceOf: object withReference: readOnlyReference
	)
	
	readOnlyReferenceOf: aPair withReference: aReference = (
		| paramToTest |
		aPair key: 1.
		self assert: aPair key equals: 1.
		aReference key: 2.
		self assert: aPair key equals: 1.
		aPair key: 2.
		self assert: aPair key equals: 2.
		self assert: aReference equals: aPair.
		self assert: aReference key equals: 2.
		paramToTest := Pair withKey: 5 andValue: 5.
		aReference changeKeyOf: paramToTest to: 1.
		self assert: paramToTest key equals: 1.
	)
	
	testReadonlyPropagation = (
		| pairs current DPPairs |
		pairs := self makeList: 5.
		self duplicateValueOfAndFollowingfromHead: pairs.
		self assert: pairs next val key equals: 16.
		self assert: pairs next next next val key equals: 8.
		self duplicateValueOfAndFollowingfromHead: pairs readOnly.
		self assert: pairs next val key equals: 16.
		self assert: pairs next next next val key equals: 8.
		DPPairs := ListElementProxy handler: ReadOnlyPropagationHandler new target: pairs.
		self duplicateValueOfAndFollowingfromHead: DPPairs.
		self assert: pairs next val key equals: 16.
		self assert: pairs next next next val key equals: 8.
    )
    
    duplicateValueOfAndFollowingfromHead: head = (
    	| current |
    	current := head.
    	1 to: 4 do: [:i |
			current val key: current val key * 2.
    		current next val key: current next val key * 2.
			current := current next
		].
    )
    
    makeList: length = (
        (length = 0)
            ifTrue: [ ^nil ]
            ifFalse: [
                ^(ListElementForProxies new: (PairForProxiesAndHandles new key: length))
                    next: (self makeList: (length - 1)) ]
    )
    
)