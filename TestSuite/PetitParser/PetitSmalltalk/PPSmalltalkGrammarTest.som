PPSmalltalkGrammarTest = PPCompositeParserTest (
	parserClass = (
		^ PPSmalltalkGrammar
	)
	
	testSimpleBlock1 = (
		self 
			parse: '[ ]'
			rule: #block
	)
	
	testPragma18 = (
		self 
			parse: 'method <foo: 1 bar: 2  baz: b>'
			rule: #method
	)
	
	testMethod2 = (
		"Spaces at the beginning of the method."
		self 
			parse: '	  negated ^ 0 - self'
			rule: #method
	)
	
	testUnaryMethod2 = (
		self 
			parse: 'abs | a |'
			rule: #method
	)
	
	testStatements2 = (
		self 
			parse: '1 . 2'
			rule: #sequence
	)
	
	testNumberLiteral5 = (
		self 
			parse: '-0'
			rule: #numberLiteral
	)
	
	testArgumentsBlock2 = (
		self 
			parse: '[ :a :b | ]'
			rule: #block
	)
	
	testAssignment3 = (
		self 
			parse: 'a := b := 1'
			rule: #expression
	)
	
	testPragma12 = (
		self 
			parse: 'method <foo: false>'
			rule: #method
	)
	
	testSymbolLiteral9 = (
		self 
			parse: '## fucker'
			rule: #symbolLiteral
	)
	
	testSymbolLiteral8 = (
		self 
			parse: '##fucker'
			rule: #symbolLiteral
	)
	
	testArrayLiteral8 = (
		self 
			parse: '#(\'baz\')'
			rule: #arrayLiteral
	)
	
	testNumberLiteral1 = (
		self 
			parse: '0'
			rule: #numberLiteral
	)
	
	testNumberLiteral9 = (
		self 
			parse: '-123.456'
			rule: #numberLiteral
	)
	
	testNumberLiteral6 = (
		self 
			parse: '-0.1'
			rule: #numberLiteral
	)
	
	testPragma1 = (
		self 
			parse: 'method <foo>'
			rule: #method
	)
	
	testSequence1 = (
		self 
			parse: '| a | 1 . 2'
			rule: #sequence
	)
	
	testSimpleBlock3 = (
		self 
			parse: '[ :a ]'
			rule: #block
	)
	
	testCompleteness = (
		"This test asserts that all subclasses override all test methods."
		
		self class allSubclassesDo: [ :subclass |
			self class testSelectors do: [ :selector |
				self 
					assert: (selector = #testCompleteness or: [ subclass selectors includes: selector ])
					description: subclass printString , ' does not test ' , selector printString ] ]
	)
	
	testStatements8 = (
		self 
			parse: '.1'
			rule: #sequence
	)
	
	testPragma5 = (
		self 
			parse: 'method <foo> | a | <bar>'
			rule: #method
	)
	
	testCascadeExpression2 = (
		self 
			parse: '1 abs negated; raisedTo: 12; negated'
			rule: #expression
	)
	
	testUnaryMethod3 = (
		self 
			parse: 'abs a'
			rule: #method
	)
	
	testStatements9 = (
		self 
			parse: ''
			rule: #statements
	)
	
	testNumberLiteral14 = (
		self 
			parse: '3r-22.2'
			rule: #numberLiteral
	)
	
	"Still need some work with converting Fractions to scaled Decimals"
	"testNumberLiteral15 = (
		self 
			parse: '0.50s2'
			rule: #numberLiteral
	)"
	
	testSpecialLiteral2 = (
		self 
			parse: 'false'
			rule: #falseLiteral
	)
	
	testArray2 = (
		self 
			parse: '{self foo}'
			rule: #array
	)
	
	testCascadeExpression3 = (
		self 
			parse: '1 + 2; - 3'
			rule: #expression
	)
	
	testSymbolLiteral3 = (
		self 
			parse: '#key:'
			rule: #symbolLiteral
	)
	
	testStatements7 = (
		self 
			parse: '. 1'
			rule: #sequence
	)
	
	testArrayLiteral2 = (
		self 
			parse: '#(1)'
			rule: #arrayLiteral
	)
	
	testComment2 = (
		self 
			parse: '1 "one" +2'
			rule: #expression
	)
	
	testSymbolLiteral6 = (
		PPSmalltalkGrammar allowUnderscoreAssignment ifFalse: [
			self 
				parse: '#__gen__binding'
				rule: #symbolLiteral ]
	)
	
	testBinaryExpression3 = (
		self 
			parse: '1 // 2'
			rule: #expression
	)
	
	testPragma2 = (
		self 
			parse: 'method <foo> <bar>'
			rule: #method
	)
	
	testNumberLiteral7 = (
		self 
			parse: '-123'
			rule: #numberLiteral
	)
	
	testArray4 = (
		self 
			parse: '{self foo. self bar.}'
			rule: #array
	)
	
	testAssignment4 = (
		PPSmalltalkGrammar allowUnderscoreAssignment
			ifTrue: [ self parse: 'a _ 1' rule: #expression ]
			ifFalse: [ self fail: 'a _ 1' rule: #expression ]
	)
	
	testNumberLiteral8 = (
		self 
			parse: '-123'
			rule: #numberLiteral
	)
	
	testSymbolLiteral7 = (
		self 
			parse: '# fucker'
			rule: #symbolLiteral
	)
	
	testKeywordExpression3 = (
		self 
			parse: '1 to: 2 by: 3 do: 4'
			rule: #expression
	)
	
	testPragma6 = (
		self 
			parse: 'method <foo: 1>'
			rule: #method
	)
	
	testNumberLiteral2 = (
		self 
			parse: '0.1'
			rule: #numberLiteral
	)
	
	testMethod1 = (
		self 
			parse: 'negated ^ 0 - self'
			rule: #method
	)
	
	testTemporaries2 = (
		self 
			parse: '| a b |'
			rule: #sequence
	)
	
	testPragma15 = (
		self 
			parse: 'method <foo: #()>'
			rule: #method
	)
	
	testArrayLiteral4 = (
		self 
			parse: '#(true false nil)'
			rule: #arrayLiteral
	)
	
	testComplexBlock2 = (
		self 
			parse: '[:a||b|c]'
			rule: #block
	)
	
	testStringLiteral1 = (
		self 
			parse: '\'\''
			rule: #stringLiteral
	)
	
	testPragma8 = (
		self 
			parse: 'method <foo: \'bar\'>'
			rule: #method
	)
	
	testPragma13 = (
		self 
			parse: 'method <foo: nil>'
			rule: #method
	)
	
	testStatementBlock1 = (
		self 
			parse: '[ nil ]'
			rule: #block
	)
	
	testCharLiteral2 = (
		self 
			parse: '$ '
			rule: #charLiteral
	)
	
	testUnaryMethod5 = (
		self 
			parse: 'abs | a |'
			rule: #method
	)
	
	testVariable1 = (
		self 
			parse: 'trueBinding'
			rule: #primary
	)
	
	testStatements5 = (
		self 
			parse: '1 . . 2'
			rule: #sequence
	)
	
	testPragma11 = (
		self 
			parse: 'method <foo: true>'
			rule: #method
	)
	
	testPragma16 = (
		self 
			parse: 'method < + 1 >'
			rule: #method
	)
	
	testVariable5 = (
		self 
			parse: 'supernanny'
			rule: #primary
	)
	
	testArgumentsBlock3 = (
		self 
			parse: '[ :a :b :c | ]'
			rule: #block
	)
	
	testPragma9 = (
		self 
			parse: 'method <foo: #\'bar\'>'
			rule: #method
	)
	
	testNumberLiteral11 = (
		self 
			parse: '8r777'
			rule: #numberLiteral
	)
	
	testKeywordExpression2 = (
		self 
			parse: '1 to: 2 by: 3'
			rule: #expression
	)
	
	testCharLiteral3 = (
		self 
			parse: '$$'
			rule: #charLiteral
	)
	
	testAssignment5 = (
		PPSmalltalkGrammar allowUnderscoreAssignment
			ifTrue: [ self parse: 'a _ b _ 1' rule: #expression ]
			ifFalse: [ self fail: 'a _ b _ 1' rule: #expression ]
	)
	
	testArray3 = (
		self 
			parse: '{self foo. self bar}'
			rule: #array
	)
	
	testVariable3 = (
		self 
			parse: 'nilly'
			rule: #primary
	)
	
	testVariable7 = (
		PPSmalltalkGrammar allowUnderscoreAssignment ifFalse: [
			self 
				parse: '__gen_var_123__'
				rule: #primary ]
	)
	
	testStatementBlock2 = (
		self 
			parse: '[ | a | nil ]'
			rule: #block
	)
	
	testBlock1 = (
		self 
			parse: '[]'
			rule: #block
	)
	
	testNumberLiteral10 = (
		self 
			parse: '10r10'
			rule: #numberLiteral
	)
	
	testStatements4 = (
		self 
			parse: '1 . 2 . 3 .'
			rule: #sequence
	)
	
	testArrayLiteral3 = (
		self 
			parse: '#(1 2)'
			rule: #arrayLiteral
	)
	
	testTemporaries3 = (
		self 
			parse: '| a b c |'
			rule: #sequence
	)
	
	testUnaryExpression2 = (
		self 
			parse: '1 abs negated'
			rule: #expression
	)
	
	testKeywordExpression1 = (
		self 
			parse: '1 to: 2'
			rule: #expression
	)
	
	testBinaryMethod2 = (
		self 
			parse: '+ a | b |'
			rule: #method
	)
	
	testSimpleBlock2 = (
		self 
			parse: '[ nil ]'
			rule: #block
	)
	
	testStringLiteral2 = (
		self 
			parse: '\'ab\''
			rule: #stringLiteral
	)
	
	testComment5 = (
		self 
			parse: '1"one"	"two"+2'
			rule: #expression
	)
	
	testPragma14 = (
		self 
			parse: 'method <foo: ()>'
			rule: #method
	)
	
	testPragma10 = (
		self 
			parse: 'method <foo: bar>'
			rule: #method
	)
	
	testPragma17 = (
		self 
			parse: 'method <foo: 1 bar: 2>'
			rule: #method
	)
	
	testTemporaries1 = (
		self 
			parse: '| a |'
			rule: #sequence
	)
	
	testBinaryMethod5 = (
		self 
			parse: '-- a'
			rule: #method
	)
	
	testBinaryMethod4 = (
		self 
			parse: '+ a | b | c'
			rule: #method
	)
	
	testUnaryExpression1 = (
		self 
			parse: '1 abs'
			rule: #expression
	)
	
	testArrayLiteral5 = (
		self 
			parse: '#($a)'
			rule: #arrayLiteral
	)
	
	testNumberLiteral3 = (
		self 
			parse: '123'
			rule: #numberLiteral
	)
	
	testCascadeExpression1 = (
		self 
			parse: '1 abs; negated'
			rule: #expression
	)
	
	testComment3 = (
		self 
			parse: '1"one"+"two"2'
			rule: #expression
	)
	
	testKeywordMethod4 = (
		self 
			parse: 'to: a do: b by: c | d | e'
			rule: #method
	)
	
	testMethod3 = (
		"Spaces at the end of the method."
		self 
			parse: '	negated ^ 0 - self  '
			rule: #method
	)
	
	testBinaryExpression2 = (
		self 
			parse: '1 + 2 + 3'
			rule: #expression
	)
	
	testComment1 = (
		self 
			parse: '1"one"+2'
			rule: #expression
	)
	
	testVariable2 = (
		self 
			parse: 'falseBinding'
			rule: #primary
	)
	
	testArray1 = (
		self 
			parse: '{}'
			rule: #array
	)
	
	testArrayLiteral1 = (
		self 
			parse: '#()'
			rule: #arrayLiteral
	)
	
	testAssignment2 = (
		self 
			parse: 'a := 1'
			rule: #expression
	)
	
	testArrayLiteral11 = (
		self 
			parse: '#([1 2] #[1 2 3])'
			rule: #arrayLiteral
	)
	
	testPragma3 = (
		self 
			parse: 'method | a | <foo>'
			rule: #method
	)
	
	testStringLiteral3 = (
		self 
			parse: '\'ab\'\'cd\''
			rule: #stringLiteral
	)
	
	testNumberLiteral4 = (
		self 
			parse: '123.456'
			rule: #numberLiteral
	)
	
	testStatements3 = (
		self 
			parse: '1 . 2 . 3'
			rule: #sequence
	)
	
	testComplexBlock1 = (
		self 
			parse: '[ :a | | b | c ]'
			rule: #block
	)
	
	testBinaryExpression5 = (
		self 
			parse: '1 ==> 2'
			rule: #expression.
	)
	
	testBinaryMethod1 = (
		self 
			parse: '+ a'
			rule: #method
	)
	
	testCharLiteral1 = (
		self 
			parse: '$a'
			rule: #charLiteral
	)
	
	testStatements6 = (
		self 
			parse: '1. 2'
			rule: #sequence
	)
	
	testPragma7 = (
		self 
			parse: 'method <foo: 1.2>'
			rule: #method
	)
	
	testByteLiteral1 = (
		self 
			parse: '#[]'
			rule: #byteLiteral
	)
	
	testBinaryExpression4 = (
		self 
			parse: '1 -- 2'
			rule: #expression
	)
	
	testArgumentsBlock1 = (
		self 
			parse: '[ :a | ]'
			rule: #block
	)
	
	testKeywordMethod2 = (
		self 
			parse: 'to: a do: b | c |'
			rule: #method
	)
	
	testArrayLiteral10 = (
		self 
			parse: '#((1 2) #(1 2 3))'
			rule: #arrayLiteral
	)
	
	testPragma4 = (
		self 
			parse: 'method <foo> | a |'
			rule: #method
	)
	
	testComment4 = (
		self 
			parse: '1"one""two"+2'
			rule: #expression
	)
	
	testKeywordMethod1 = (
		self 
			parse: 'to: a'
			rule: #method
	)
	
	testByteLiteral3 = (
		self 
			parse: '#[255]'
			rule: #byteLiteral
	)
	
	testUnaryMethod1 = (
		self 
			parse: 'abs'
			rule: #method
	)
	
	testSymbolLiteral2 = (
		self 
			parse: '#+'
			rule: #symbolLiteral
	)
	
	testBinaryMethod3 = (
		self 
			parse: '+ a b'
			rule: #method
	)
	
	testStatements1 = (
		self 
			parse: '1'
			rule: #sequence
	)
	
	testVariable6 = (
		PPSmalltalkGrammar allowUnderscoreAssignment ifFalse: [
			self 
				parse: 'super_nanny'
				rule: #primary ]
	)
	
	testArrayLiteral9 = (
		self 
			parse: '#((1) 2)'
			rule: #arrayLiteral
	)
	
	testByteLiteral2 = (
		self 
			parse: '#[0]'
			rule: #byteLiteral
	)
	
	testSymbolLiteral1 = (
		self 
			parse: '#foo'
			rule: #symbolLiteral
	)
	
	testNumberLiteral12 = (
		self 
			parse: '16rAF'
			rule: #numberLiteral
	)
	
	testByteLiteral5 = (
		self 
			parse: '#[ 2r1010 8r77 16rFF ]'
			rule: #byteLiteral
	)
	
	testByteLiteral4 = (
		self 
			parse: '#[ 1 2 ]'
			rule: #byteLiteral
	)
	
	testArrayLiteral6 = (
		self 
			parse: '#(1.2)'
			rule: #arrayLiteral
	)
	
	testSpecialLiteral1 = (
		self 
			parse: 'true'
			rule: #trueLiteral
	)
	
	testBinaryExpression1 = (
		self 
			parse: '1 + 2'
			rule: #expression
	)
	
	testSymbolLiteral5 = (
		self 
			parse: '#\'testing-result\''
			rule: #symbolLiteral
	)
	
	testSpecialLiteral3 = (
		self 
			parse: 'nil'
			rule: #nilLiteral
	)
	
	testAssignment6 = (
		self 
			parse: 'a := (b := c)'
			rule: #expression
	)
	
	testUnaryMethod4 = (
		self 
			parse: 'abs | a | b'
			rule: #method
	)
	
	testKeywordMethod3 = (
		self 
			parse: 'to: a do: b by: c d'
			rule: #method
	)
	
	testSymbolLiteral4 = (
		self 
			parse: '#key:value:'
			rule: #symbolLiteral
	)
	
	testArrayLiteral7 = (
		self 
			parse: '#(size #at: at:put: #\'==\')'
			rule: #arrayLiteral
	)
	
	testAssignment1 = (
		self 
			parse: '1'
			rule: #expression
	)
	
	testStatementBlock3 = (
		self 
			parse: '[ | a b | nil ]'
			rule: #block
	)
	
	testVariable4 = (
		self 
			parse: 'selfish'
			rule: #primary
	)
	
	testNumberLiteral13 = (
		self 
			parse: '16rCA.FE'
			rule: #numberLiteral
	)
)