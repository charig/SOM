PPTokenTest = PPAbstractParserTest (
	identifier = (^ #word asParser plus token)
	
	parse: aString using: aParser = (^ aParser parse: aString)
	
	testParsedValue = (
		| input result |
		input := 'foo'.
		result := self parse: input using: self identifier.
		self assert: result parsedValue equals: #($f $o $o)
	)
	
	"testValue = (
		| result |
		result := PPToken on: 'var'.
		self should: [ result value ] raise: Notification
	)"
	
	testCopyFromTo = (
		| result other |
		result := PPToken on: 'abc'.
		other := result copyFrom: 2 to: 2.
		self assert: other size equals: 1.
		self assert: other start equals: 2.
		self assert: other stop equals: 2.
		self assert: other collection equals: result collection
	)
	
	testSize = (
		| result |
		result := self parse: 'foo' using: self identifier.
		self assert: result size equals: 3
	)
	
	"testNew = (
		self should: [ PPToken new ] raise: Error.
	)"
	
	testStop = (
		| result |
		result := self parse: 'foo' using: self identifier.
		self assert: result stop equals: 3
	)
	
	testInputValue = (
		| input result |
		input := 'foo'.
		result := self parse: input using: self identifier.
		self assert: result inputValue equals: input.
		"The following is not true with TruffleMate immutable strings"
		"self deny: result inputValue == input"
	)
	
	testPrinting = (
		| result |
		result := PPToken on: 'var'.
		self assert: result printString includesSubstring: 'PPToken[1,3]'
	)
	
	testCollection = (
		| input result |
		input := 'foo    '.
		result := self parse: input using: self identifier.
		self assert: result collection equals: input.
		self assert: result collection == input
	)
	
	testInitialize = (
		PPToken initialize
	)
	
	testColumn = (
		| input parser result |
		input := '1' , (String with: (Character codePoint: 13)) , '12' , (String with: (Character codePoint: 13) with: (Character codePoint: 10)) , '123'
			, (String with: (Character codePoint: 10)) , '1234'.
		parser := #any asParser token star.
		result := parser parse: input.
		result with: #(1 2 1 2 3 4 1 2 3 4 1 2 3 4) do: [ :token :line | self assert: token column equals: line ]
	)
	
	testEquality = (
		| token1 token2 |
		token1 := self parse: 'foo' using: self identifier.
		token2 := self parse: 'foo' using: self identifier.
		self deny: token1 == token2.
		self assert: token1 equals: token2.
		self assert: token1 hash equals: token2 hash
	)
	
	testLine = (
		| input parser result |
		input := '1' , (String with: (Character codePoint: 13)) , '12' , (String with: (Character codePoint: 13) with: (Character codePoint: 10)) , '123'
			, (String with: (Character codePoint: 10)) , '1234'.
		parser := #any asParser token star.
		result := parser parse: input.
		result with: #(1 1 2 2 2 2 3 3 3 3 4 4 4 4) do: [ :token :line | self assert: token line equals: line ]
	)
	
	testStart = (
		| result |
		result := self parse: 'foo' using: self identifier.
		self assert: result start equals: 1
	)
)