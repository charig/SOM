BasicToDo = Benchmark (
    | problemSize points |
    
    oneTimeSetup = (
    	points := Vector new: self problemSize.
    	1 to: self problemSize do: [:index | 
    		points at: index put: Point new.
    	].
    	self benchmark.
    	self iterationOne.
    )
    
    benchmark = (
    	| accumulator p |
    	accumulator := 0.
    	points collect: [:point | accumulator := accumulator + point x].
    	"To ensure the compiler do not optimize both blocks into one"
    	p := Point new.
    	points append: p.
    	points collect: [:point | accumulator := accumulator + point y].
    	points remove: p.
    	p := Point new.
    	points append: p.
    	points collect: [:point | accumulator := accumulator + point x].
    	points remove: p.
    	^accumulator
    )
    
    iterationOne = ()
    
    verifyResult: result = (
    	^self assert: result equals: (self problemSize * 3) + 2
    )
    
    problemSize = (^2)
    problemSize: aNumber = (problemSize := aNumber)
)    
