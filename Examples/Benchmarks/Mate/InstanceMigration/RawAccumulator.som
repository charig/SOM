RawAccumulator = Benchmark (
    | problemSize points i |
    
    oneTimeSetup = (
    	| shape |
    	points := Array new: self problemSize.
    	1 to: self problemSize do: [:index | points at: index put: Point new].
    	i := 1.
    )
    
    benchmark = (
    	| value accumulator |
    	accumulator := 0.
    	1 to: self problemSize do: [:index | accumulator := accumulator + (points at: index) x].
    	"points do: [:point | accumulator := accumulator + point x]."
    	"This test needs a couple of iterations of warming up"
    	i = 1 ifTrue: [self iterationOne].
    	i = 2 ifTrue: [self iterationTwo].
    	"Uncomment for testing that not weird automatic splitting is invalidating the experiment"
    	"i > 2 ifTrue: [self iterationGreaterThanTwo]."
    	i := i + 1.  
    	^accumulator
    )
    
    iterationOne = ()
    iterationTwo = ()
    iterationGreaterThanTwo = ()
    
    verifyResult: result = (
      ^self assert: result equals: self problemSize
    )
    
    sumXField = (
    	| accumulator |
    	accumulator := 0.
    	points do: [:point | accumulator := accumulator + point x]
    	^accumulator.
    )
    
    problemSize = (^10000)
    problemSize: aNumber = (problemSize := aNumber)
    
    dispatchChainOfFieldReading = (
    	| ast send target read |
    	ast := (RawAccumulator>>#benchmark) compilation.
    	send := (ast messageSendsWithSelector: 'x') first.
    	target := send dispatchChain activeSpecializations first firstInstance targetNode.
    	read := (target fieldReadsWithIndex: 0) first.
    	^read dispatchChain.
    )
)    
