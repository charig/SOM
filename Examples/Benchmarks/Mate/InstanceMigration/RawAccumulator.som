RawAccumulator = Benchmark (
    | problemSize points i |
    
    oneTimeSetup = (
    	| shape |
    	points := Array new: self problemSize.
    	1 to: self problemSize do: [:index | points at: index put: OneDimensionalPoint new].
    	i := 1.
    	self benchmark.
    )
    
    benchmark = (
    	| value |
    	value := self sumXField.
    	"Uncomment for testing that not weird automatic splitting is invalidating the experiment"
    	"i > 2 ifTrue: [self iterationTwo]."
    	i := i + 1.  
    	^value.
    )
    
    iterationOne = ()
    iterationTwo = ()
    
    verifyResult: result = (
      ^self assert: result equals: self problemSize
    )
    
    sumXField = (
    	| accumulator |
    	accumulator := 0.
    	points do: [:point | accumulator := accumulator + point x]
    	^accumulator.
    )
    
    problemSize = (^10000)
    problemSize: aNumber = (problemSize := aNumber)
    
    dispatchChainOfFieldReading = (
    	| ast nodes node |
    	ast := (OneDimensionalPoint>>#x) compilation.
    	node := (ast fieldReadsWithIndex: 0) first.
    	^node dispatchChain.
    )
)    
