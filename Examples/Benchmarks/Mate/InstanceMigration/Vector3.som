Vector3 =  (
    | first last storage |
 	initialize: size = (
	    first := 1.
	    last  := 1.
	    storage := Array new: size.
	)
	
    "Accessing"
    at: index = ( 
   		index > storage length ifTrue: [ ^ nil ].
    	^ storage at: index
    )
    
    at: index put: val = (
	    index > storage length ifTrue: [
	      | newLength newStorage |
	      newLength := storage length.
	      [ newLength < index ] whileTrue: [
	        newLength := newLength * 2 ].
	      newStorage := Array new: newLength.
	      storage doIndexes: [:i | newStorage at: i put: (storage at: i) ].
	      storage := newStorage ].
	
	    storage at: index put: val.
	    last < (index + 1) ifTrue: [
	      last := index + 1 ]
  	)
    
    first = ( ^ (self size > 0) ifTrue: [storage at: 1] ifFalse: [nil] )
    second = (^ self at: 2)
    third = (^ self at: 3)
    last = (^ self at: self size)
    
    "Iterating"
    do: block = (
        first to: last - 1 do: [ :i | block value: (storage at: i) ]
    )
    
    doIndexes: block = (
        first to: last - 1 do: block
    )
    
    withIndexDo: elementAndIndexBlock = ( 
		first to: last - 1 do: [:index |
			elementAndIndexBlock
				value: (self at: index)
				value: index
		]
	)
    
    "Adding"
    , element = ( ^self append: element )
    
    append: element = (
        (last >= storage length) ifTrue: [
            "Need to expand capacity first"
            | newStorage |
            newStorage := Array new: ((2 * storage length) max: 1).
            storage doIndexes: [ :i | newStorage at: i put: (storage at: i) ].
            storage := newStorage. ].
        storage at: last put: element.
        last := last + 1.
        ^self
    )
    
    "Removing"
    remove = (
        (last > first)
            ifTrue:  [ last := last - 1. ^storage at: last ]
            ifFalse: [
                self error:
                    'Vector: Attempting to pop element from empty Vector' ]
    )
    
    remove: object = (
        | newArray newLast found |
        newArray := Array new: self capacity.
        newLast := 1.
        found := false.
       
        self do: [ :it |
          (it == object)
              ifTrue:  [ found := true ]
              ifFalse: [
                  newArray at: newLast put: it.
                  newLast := newLast + 1.
              ]
        ].
       
        storage := newArray.
        last := newLast.
        first := 1.
        ^found
    )
   
    contains: anObject = (
        ^ storage contains: anObject
    )
  
    "Printing"
    println = (
        '(' print.
        self do: [ :it | '(' print. it print. ')' print ].
        ')' println
    )
    
    "Sizing"
    isEmpty  = ( ^last = first)
    notEmpty  = ( ^self isEmpty not)
    size     = ( ^last - first)
    length	 = (^self size)
    capacity = ( ^storage length)
    
    "Conversion"
    asArray = ( | arr |
        arr := Array new: self size.
        self doIndexes: [ :i | arr at: i put: (self at: i) ].
        ^arr
    )
    
    "Comparing"
    = otherCollection = (
	    self == otherCollection ifTrue: [^ true].
		self species == otherCollection species ifFalse: [^ false].
		^ self hasEqualElements: otherCollection
	)
	
	hasEqualElements: otherCollection = (	
		| size |
		(size := self size) = otherCollection size ifFalse: [^ false].
		1 to: size do:
			[:index |
			(self at: index) = (otherCollection at: index) ifFalse: [^ false]].
		^ true
	)
		
    "Private"
    initialize: size = (
        storage := Array new: size.
        first := 1.
        last  := 1.
    )
    
    checkIndex: index ifValid: block = (
        ^ ((first <= index) && (index <= last)
            ifTrue: [ block value ]
            ifFalse: [
                self error:
                    'Vector[' + first asString + '..' + last asString +
                    ']: Index ' + index asString + ' out of bounds' ])
    )
    
    forEach: block = (
		first to: last - 1 do: [ :i | block value: (storage at: i) ]
	)
	
	hasSome: block = (
	    first to: last - 1 do: [ :i |
	      (block value: (storage at: i))
	        ifTrue: [ ^ true ] ].
	    ^ false
  	)
  
  	getOne: block = (
	    ^self detect: block
  	)
	
	sort: aBlock = (
		" Make the argument, aBlock, be the criterion for ordering elements of
    	the receiver. sortBlocks with side effects may not work right "
		self size > 0 ifTrue: [
  			self sort: first
        		to: last - 1
       			with: aBlock 
		]
	)
    
    sort: i to: j with: sortBlock = (
	    " Sort elements i through j of self to be non-descending according to
	       sortBlock. "
	    | di dij dj tt ij k l n |
	    sortBlock isNil ifTrue: [ ^ self defaultSort: i to: j ].
	    
	    "The prefix d means the data at that index."
	    (n := j + 1  - i) <= 1 ifTrue: [ ^ self ]. "Nothing to sort."
	    " Sort di,dj. "
	    di := storage at: i.
	    dj := storage at: j.
	    
	    "i.e., should di precede dj?"
	    (sortBlock value: di with: dj) ifFalse: [
	      storage swap: i with: j.
	      tt := di.
	      di := dj.
	      dj := tt
	    ].

	    n > 2 ifTrue: [ " More than two elements. "
	      ij := (i + j) / 2.  " ij is the midpoint of i and j. "
	      dij := storage at: ij.  " Sort di,dij,dj.  Make dij be their median. "
	      (sortBlock value: di with: dij)
	        ifTrue: [ " i.e. should di precede dij? "
	          (sortBlock value: dij with: dj) ifFalse: [ " i.e., should dij precede dj? "
	            storage swap: j with: ij.
	            dij := dj]]
	        ifFalse: [ " i.e. di should come after dij "
	          storage swap: i with: ij.
	          dij := di].
	      
		n > 3 ifTrue: [
	        " More than three elements.
	          Find k>i and l<j such that dk,dij,dl are in reverse order.
	          Swap k and l.  Repeat this procedure until k and l pass each other. "
	        k := i.
	        l := j.
	        [ [l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]
	            whileTrue.  " i.e. while dl succeeds dij "
	          [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]
	            whileTrue.  " i.e. while dij succeeds dk "
	          k <= l]
	            whileTrue:
	              [ storage swap: k with: l ].
	
	        " Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
	          through dj.  Sort those two segments. "
	        self sort: i to: l with: sortBlock.
	        self sort: k to: j with: sortBlock
	      ]
	   ]
  	)
  		
    "DeltaBlue"
    removeFirst = (
        self isEmpty ifTrue: [ self error: 'OrderedCollection is empty' ].
        first := first + 1.
        ^ storage at: first - 1
    )
    
    "Conversion"
    asSet = (
        ^ Set new addAll: self
    )
    
    "detect protocol ported from Pharo 5.0"
    detect: aBlock = (
		^ self detect: aBlock ifNone: [self errorNotFound: aBlock]
    )
    
    detect: aBlock ifNone: exceptionBlock = (
		^ self detect: aBlock ifFound: [ :element | element ] ifNone: exceptionBlock
	)
	
	detect: aBlock ifFound: foundBlock ifNone: exceptionBlock = (
		self
			do: [ :each | 
				(aBlock value: each)
					ifTrue: [ ^ foundBlock value: each ] ].
		^ exceptionBlock value
	)
	
	select: aBlock = (
        | newCollection |
        newCollection := self species new: self size.
        self do: [:each | (aBlock value: each)  
                            ifTrue: [newCollection append: each]].
        ^ newCollection
    )
    
    collect: aBlock = (
        | newCollection |
        newCollection := self species new: self size.
        self do: [ :each | newCollection append: (aBlock value: each) ].
        ^newCollection
    )
    
    inject: thisValue into: binaryBlock = (	
	    | nextValue |
		nextValue := thisValue.
		self do: [:each | nextValue := binaryBlock value: nextValue value: each].
		^nextValue
	)
	
	errorNotFound: anObject = (^nil)
	
	appendAll: aCollection = ( 
		aCollection do: [:each | self append: each].
		^ aCollection
	)
	
	grownBy: length = (
		"Answer a copy of receiver collection with size grown by length"
		| newCollection size |
		size := self size.
		newCollection := Vector new: size + length.
		self doIndexes: [:i | newCollection append: (self at: i)].
		^ newCollection
	)
	
	replaceFrom: start to: stop with: replacement startingAt: repStart = ( 
		"This destructively replaces elements from start to stop in the receiver 
		starting at index, repStart, in the sequenceable collection, 
		replacementCollection. Answer the receiver. No range checks are 
		performed."
	
		| index repOff |
		repOff := repStart - start.
		index := start - 1.
		[(index := index + 1) <= stop] whileTrue: [ 
			self at: index put: (replacement at: repOff + index)
		]
	)
	
	copyFrom: start to: stop = ( 
		"Answer a copy of a subset of the receiver, starting from element at 
		index start until element at index stop."
	
		| newSize newVector |
		newSize := stop - start + 1.
		newVector := (self species new: newSize).
		start to: stop do: [:i | newVector append: (self at: i)].
		^newVector
	)
	
	removeAll = (
	    first := 1.
	    last  := 1.
	    storage  := Array new: storage length
	)
  
  	remove: object = (
	    | newArray newLast found |
	    newArray := Array new: self capacity.
	    newLast := 1.
	    found := false.
	   
	    self forEach: [ :it |
	      it == object
	          ifTrue:  [ found := true ]
	          ifFalse: [
	              newArray at: newLast put: it.
	              newLast := newLast + 1 ] ].
	
	    storage := newArray.
	    last := newLast.
	    first := 1.
	    ^ found
  	)
	
	"Pharo Compatibility"
	species = (^self class)
	postCopy = (storage := storage copy)
	
	"Petit Parser"
	asPetitStream = (^ PPStream on: self)
	
    ----------------------------
    
    "Allocation"
    new              = ( ^ self new: 50 )
    new: initialSize = ( ^ super new initialize: initialSize )
    newFrom: aCollection = (^ self withAll: aCollection)
    
    with: elem = (
        | newVector |
        newVector := self new: 1.
        newVector append: elem.
        ^ newVector
    )
    
    withAll: aCollection = (
    	| collection |
    	collection := self new: aCollection length. 
    	collection addAll: aCollection.
    	^collection
    )
    
    streamContents: blockWithArg = (
		^ self new: 100 streamContents: blockWithArg
	)
	
	new: newSize streamContents: blockWithArg = (
		| stream |
		stream := WriteStream on: (self streamSpecies new: newSize).
		blockWithArg value: stream.
		^ stream contents
	)
)
