SumKeys = Benchmark (
    | pairs listSize self propagation |
    
    listSize = (^listSize)
    listSize: aNumber = (listSize := aNumber)
    propagation = (^propagation)
    propagation: aNumber = (propagation := aNumber)
    
    oneTimeSetup = (
		self listSize: 20.
		self propagation: 5.
    	self initializePairArrays.
   	)
    
    initializePairArrays = (
    	pairs := self makeList: self listSize withAll: [:i | PairForProxiesAndHandles new key: i].
    )
    
    benchmark = (
		| current |
		current := pairs.
		[current isNil] whileFalse: [
			self duplicateValueOf: current andFollowing: self propagation.
			current := current next.
		]
    )
    
    duplicateValueOf: element andFollowing: aNumber = (
    	| current length pos |
    	length := element length.
		pos := (self listSize - length) + 1.
		element val key: element val key + pos.
    	length > 1 ifTrue: [
	    	current := element next.
	    	pos := pos + 1.
	    	1 to: (aNumber - 1 min: current length) do: [:i |
	  			current val key: current val key + pos.
	  			current := current next.
	  			pos := pos + 1.
	  		]
	  	]
    )
    
    encapsulate: aListElement = (
    	^aListElement
    )
    
    verifyResult: result = (
      | current value |
      current := pairs.
      1 to: self listSize do: [:i | 
      	"value := (i * (2 exp: (i min: self propagation)))."
      	current val key > i ifFalse: [i println. current val key println.^false].
      	(current val key rem: i) = 0 ifFalse: [i println. current val key println.^false].
      	current := current next.
      ].
      ^true
    )
    
    makeList: length withAll: aBlock = (
        | element last |
        (length = 0) ifTrue: [ ^nil ].
        element := (self encapsulate: (ListElementForProxies new: (aBlock value: 1))).
        last := element.
        2 to: length do: [:i | | value |
        	value := (self encapsulate: (ListElementForProxies new: (aBlock value: i))).
        	last next: value.
        	last := value.
        ].
        ^element
    )
)