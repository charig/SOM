CCT = (
	| root current |
	
	root = (
		^root
	)
	
	current: aCallRecord = (
		current := aCallRecord
	)
	
	root: aCallRecord = (
		root := aCallRecord
	)
	
	current = (
		^current
	)
	
	activate: aMethod withArguments: arguments = (
		| record |
		"self assert: current id = thisContext method."
		record := self recordFor: aMethod calledFrom: current argumentsCount: arguments length.
		self fillForMethodActivation: record withArguments: arguments.
		current := record.
	)
	
	return: aValue = (
		self current addReturnType: aValue class 
	)
	
	recordFor: aMethod calledFrom: aCallRecord argumentsCount: aNumber = (
		"Look for an existing call record hanging from the actual record"
		(aCallRecord children detect: [:record | record id = aMethod]) ifNotNil: [:record | ^record].
		"Look for an existing call record in the parents sequence to look for a recursive call"
		(self callRecordForRecursiveCallFor: aMethod calledFrom: aCallRecord) ifNotNil: [:record | ^record].
		"Create a new call record hanging from the actual record"
		^self addRecordFor: aMethod from: current argumentsCount: aNumber 
	)
	
	callRecordForRecursiveCallFor: aMethod calledFrom: aCallRecord = (
		| record |
		record := aCallRecord.
		[record isNil or: [record id = aMethod]] whileFalse: [
			record := record parent.
		].
		^record
	)
	
	addRecordFor: aMethod from: current argumentsCount: aNumber = (
		| record |
		record := CallRecord forMethod: aMethod parent: current argumentsCount: aNumber.
		current addCallTo: record.
		^record
	)
	
	fillForMethodActivation: record withArguments: arguments = (
		"Here it should be the definition for storing in the call record the necessary information to profile about method activations"
		record addInvokation.
		record storeArgumentTypes: arguments.
	)
	
	asString = (
		| levelRecords childrenRecords output |
		output := ''.
		levelRecords := Vector with: self root.
		[levelRecords isEmpty] whileFalse: [
			childrenRecords := Vector new.
			levelRecords do: [:callRecord | 
				output := output + callRecord printString + '\n'.
				callRecord children isNil ifFalse: [childrenRecords appendAll: callRecord children].
			]. 
			output := output + '-------------------------------------------------\n'.
			levelRecords := childrenRecords.
		].
		^output
	)
	
	----------------------------------
	| instance |
	
	forThisThread = (
		^instance
	)
	
	initializeFrom: aMethod = (
		 | record |
		 "Initialization for a unithread environment"
		 record := CallRecord forMethod: aMethod.
		 instance := self new.
		 instance root: record.
		 instance current: record.
	)
)