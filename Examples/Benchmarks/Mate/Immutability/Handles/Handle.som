Handle = (
	| target |
    "Accessing"
    targetSPECIAL: anObject = ( target := anObject )
    targetSPECIAL = ( ^target )
    = other 				= (^self equalsSPECIAL: other)
    equalsSPECIAL: other 	= (^target = other)
    == other 				= (^self equalsequalsSPECIAL: other)
    equalsequalsSPECIAL: other = (
    	| compareTo | 
    	compareTo := (other class = self class) 
    		ifTrue: [other targetSPECIAL]
    		ifFalse: [other]. 
    	^target == compareTo
    )
    
    ----------------------------
    
    | semantics |
    
    "Accessing"
    semantics = ( ^semantics )
    semantics: anObject	= ( semantics := anObject ) 
    
    initialize = (
		| shape |
		HandleForArray initialize.
		HandleForClass initialize.
		ImmutableMessageForHandlesMO initialize.
		ImmutableMessageForArrayHandlesMO initialize.
		ImmutableMessageForClassHandlesMO initialize.
		shape := self getShapeForInstances.
		self semantics: 
					(EnvironmentMO 
							operationalSemantics: ImmutableSemanticsForHandlesMO new 
							message: ImmutableMessageForHandlesMO new
							layout: nil
					).
		self updateShapeForInstancesWith: (shape installEnvironment: self semantics).
	)
    
    targetSPECIAL: anObject = (
    	| object |
    	(anObject class = self) ifTrue: [^anObject].
    	object := self basicNew.
    	object targetSPECIAL: anObject. 
    	^object
    )
 )