PropagationHandler = Object (
	handleMessage: aSelector withArguments: arguments myself: aProxy target: aReceiver = (
		| dpSelector args |
		dpSelector := (arguments length > 0) 
			ifTrue: [(aSelector, 'myself:') asSymbol ] 
			ifFalse: [ (aSelector, 'Myself:') asSymbol].
		^aSelector isPrimitive
			ifTrue: [ self wrap: (aReceiver perform: dpSelector withArguments: arguments, aProxy) ]
			ifFalse: [ 
				args := arguments length > 0 
					ifTrue: [(self wrapAll: arguments), (Array with: aProxy)] 
					ifFalse: [Array with: aProxy].
				self unwrap: (aReceiver perform: dpSelector withArguments: args).
			]
	)
	
	handleReadField: aField myself: aProxy target: aReceiver = (
		^self wrap: (aReceiver instVarNamed: aField myself: aProxy).
	)
	
	handleWriteField: aField value: aValue myself: aProxy target: aReceiver = (
		aReceiver instVarNamed: aField put: (self unwrap: aValue) myself: aProxy.
		^aValue
	)
	
	handleLiteral: l myself: p target: t = (
		^self wrap: l.
	)
	
	wrap: anObject = (
		^anObject proxyClass handler: self class new target: anObject
	)
	
	wrapAll: aCollection = (
 		^aCollection collect: [ :each | self wrap: each ]
 	)
 	
 	unwrap: aProxy = (
		"Reflect targetOf: aProxy"
		^aProxy target.
 	)

)