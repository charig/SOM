UnaryConstraint = AbstractConstraint (
    "I am an abstract superclass for constraints having a single possible output
    variable.

    Instance variables:
        output      possible output variable <Variable>
        satisfied       true if I am currently satisfied <Boolean>"
    | output satisfied |
    
    "initialize-release"

    var: aVariable strength: strengthSymbol = (
        "Initialize myself with the given variable and strength."

        Counter addMethodCall.
        strength := Strength of: strengthSymbol.
        output := aVariable.
        satisfied := false.
        self addConstraint.
    )

    "queries"
    isSatisfied = (
        "Answer true if this constraint is satisfied in the current solution."

        Counter addMethodCall.
        ^satisfied
    )

    "add/remove"

    addToGraph = (
        "Add myself to the constraint graph."

        Counter addMethodCall.
        output addConstraint: self.
        satisfied := false.
    )

    removeFromGraph = (
        "Remove myself from the constraint graph."

        Counter addMethodCall.
        (output == nil) ifFalse: [output removeConstraint: self].
        satisfied := false.
    )

    "planning"

    chooseMethod: mark = (
        "Decide if I can be satisfied and record that decision."

        Counter addMethodCall.
        satisfied :=
            (output mark ~= mark) and:
            [strength stronger: output walkStrength].
    )

    execute = (
        "Enforce this constraint. Assume that it is satisfied."
        Counter addMethodCall.
        self subclassResponsibility
    )

    inputsDo: aBlock = (
        "I have no input variables."
        Counter addMethodCall.
    )

    markUnsatisfied = (
        "Record the fact that I am unsatisfied."
        Counter addMethodCall.
        satisfied := false.
    )

    output = (
        "Answer my current output variable."
        Counter addMethodCall.
        ^ output
    )

    recalculate = (
        "Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied."

        Counter addMethodCall.
        output walkStrength: strength.
        output stay: (self isInput not).
        (output stay) ifTrue: [self execute].   "stay optimization"
    )
)