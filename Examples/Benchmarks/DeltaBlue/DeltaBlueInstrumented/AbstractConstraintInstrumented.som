AbstractConstraintInstrumented = (
    "I am an abstract class representing a system-maintainable relationship (or
    'constraint') between a set of variables. I supply a strength instance
    variable; concrete subclasses provide a means of storing the constrained
    variables and other information required to represent a constraint.

    Instance variables:
        strength            the strength of this constraint <Strength>"
    | strength |

    "accessing"

    strength = (
        "Answer my strength."
        Counter addMethodCall.
        ^strength
    )

    strength: strengthSymbol = (
        "Set my strength."
        Counter addMethodCall.
        strength := StrengthInstrumented of: strengthSymbol.
    )

    "queries"
    isInput = (
        "Normal constraints are not input constraints. An input constraint is
         one that depends on external state, such as the mouse, the keyboard,
         a clock, or some arbitrary piece of imperative code."
         Counter addMethodCall.
        ^false
    )

    isSatisfied = (
        "Answer true if this constraint is satisfied in the current solution."
        Counter addMethodCall.
        self subclassResponsibility
    )

    "add/remove"
    addConstraint = (
        "Activate this constraint and attempt to satisfy it."

        Counter addMethodCall.
        self addToGraph.
        PlannerInstrumented current incrementalAdd: self.
    )

    addToGraph = (
        "Add myself to the constraint graph."
        Counter addMethodCall.
        self subclassResponsibility
    )

    destroyConstraint = (
        "Deactivate this constraint, remove it from the constraint graph,
         possibly causing other constraints to be satisfied, and destroy it."

        Counter addMethodCall.
        (self isSatisfied) ifTrue: [PlannerInstrumented current incrementalRemove: self].
        self removeFromGraph.
        "self release."
    )

    removeFromGraph = (
        "Remove myself from the constraint graph."
        Counter addMethodCall.
        self subclassResponsibility
    )

    "planning"
    chooseMethod: mark = (
        "Decide if I can be satisfied and record that decision. The output of
         the choosen method must not have the given mark and must have a
         walkabout strength less than that of this constraint."
        Counter addMethodCall.
        self subclassResponsibility
    )

    execute = (
        "Enforce this constraint. Assume that it is satisfied."
        Counter addMethodCall.
        self subclassResponsibility
    )

    inputsDo: aBlock = (
        "Assume that I am satisfied. Evaluate the given block on all my current
         input variables."
        Counter addMethodCall.
        self subclassResponsibility
    )

    inputsKnown: mark = (
        "Assume that I am satisfied. Answer true if all my current inputs are
         known. A variable is known if either a) it is 'stay' (i.e. it is a
         constant at plan execution time), b) it has the given mark (indicating
         that it has been computed by a constraint appearing earlier in the
         plan), or c) it is not determined by any constraint."

        Counter addMethodCall.
        self inputsDo:
            [: v |
             ((v mark = mark) or: [(v stay) or: [v determinedBy == nil]]) ifFalse:
                [^false]].
        ^true
    )

    markUnsatisfied = (
        "Record the fact that I am unsatisfied."
        Counter addMethodCall.
        self subclassResponsibility
    )

    output = (
        "Answer my current output variable. Raise an error if I am not
         currently satisfied."
        self subclassResponsibility
    )

    recalculate = (
        "Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied."
        Counter addMethodCall.
        self subclassResponsibility
    )

    satisfy: mark = (
        "Attempt to find a way to enforce this (still unsatisfied) constraint.
         If successful, record the solution, perhaps modifying the current
         dataflow graph.  Answer the constraint that this constraint overrides,
         if there is one, or nil, if there isn't."

        | overridden |
        Counter addMethodCall.
        self chooseMethod: mark.
        (self isSatisfied)
            ifTrue:         "constraint can be satisfied"
                ["mark inputs to allow cycle detection in addPropagate"
                 | out |
                 self inputsDo: [: in | in mark: mark].
                 out := self output.
                 overridden := out determinedBy.
                 (overridden == nil) ifFalse: [overridden markUnsatisfied].
                 out determinedBy: self.
                 (PlannerInstrumented current addPropagate: self mark: mark) ifFalse:
                    [self notify:
                        ('Cycle encountered adding:\   ',
                         self printString,
                         '\Constraint removed.') withCRs.
                     ^nil].
                 out mark: mark]
            ifFalse:            "constraint cannot be satisfied"
                [overridden := nil.
                 (strength sameAs: (StrengthInstrumented required)) ifTrue:
                    [self notify: 'Failed to satisfy a required constraint']].
        ^overridden
    )

    "printing"
    longPrintOn: aStream = (

        | bindings |
        Counter addMethodCall.
        aStream nextPut: '('.
        self shortPrintOn: aStream.
        aStream space.
        aStream nextPutAll: strength printString.
        (self isSatisfied)
            ifTrue:
                [aStream cr. aStream space. aStream space. aStream space.
                 self inputsDo:
                    [: in | aStream nextPutAll: 'v', in asOop printString, ' '].
                aStream nextPutAll: '-> '.
                aStream nextPutAll: 'v', self output asOop printString]
            ifFalse:
                [aStream space. aStream nextPutAll: 'UNSATISFIED'].
        aStream nextPut: ')'.
        aStream cr.
    )

    printOn: aStream = (
        Counter addMethodCall.
        self shortPrintOn: aStream
    )

    shortPrintOn: aStream = (
        Counter addMethodCall.
        aStream nextPutAll: self class name, '(', self asOop printString, ')'.
    )
)