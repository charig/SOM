FileHandle = FileSystemHandle (
	"I provide an interface for doing IO on an open file. I keep an id, which as an opaque identifier used by the FilePlugin primitives. I translate positions from the 1-based indexes used in Smalltalk to the 0-based offsets used by the primitives.I do not implement the primitives myself, instead delegating those to an instance of FilePluginPrimitives."
	| id |
	
	binaryReadStream = (
		^ (FileStream onHandle: self)
			ifNil: [ self streamError ]
			ifNotNilDo: [ :stream | 
				stream binary.
				stream yourself ]
	)
	
	size = (
		"TODO: remove once FileHandles are really used!"
		self assureOpen.
		
		^ Primitives size: id
	)
	
	close = (
		Primitives close: id.
		id := nil
	)
	
	isOpen = (
		^ (Primitives sizeOrNil: id) notNil
	)
	
	finalize = (
		self primCloseNoError: id.
	)
	
	at: index write: buffer startingAt: start count: count = (
		"TODO: remove once FileHandles are really used!"
		self assureOpen.
		Primitives setPosition: id to: index - 1.
		Primitives
			write: id
			from: buffer
			startingAt: start
			count: count
	)
	
	register = (
		"register the instance for proper clreanup on garbage collection"
		^self class register: self
	)
	
	readStream = (
		^ (FileStream onHandle: self)
			ifNil: [ self streamError ]
		
	)
	
	streamError = (
		reference exists
			ifFalse: [FileDoesNotExist signalWith: reference].
		self error: 'Unable to open file ' , reference printString
	)
	
	at: index read: buffer startingAt: start count: count = (
		"TODO: remove once FileHandles are really used!"
		self assureOpen.
		Primitives setPosition: id to: index - 1.
		^ Primitives
			read: id
			into: buffer
			startingAt: start
			count: count
	)
	
	assureOpen = (
		"compatibility method to make the FileHandle Tests pass"
		self isOpen ifFalse: [ id := self basicOpen ].
	)
	
	startUp = (
		"This functionality is disabled for now, to avoid doing lots of processing
		on start up."
		
		"We're starting up in a new OS process, so the file id will be invalid.
		Try to reopen the file, but fail silently: just leave the id as nil. #isOpen will
		answer false, and we'll raise an error if anyone tries to do IO."
		
		self basicOpen
	)
	
	writeStream = (
		^( FileStream onHandle: self)
			 ifNil: [ self streamError ]
	)
	
	flush = (
		
		"TODO: remove once FileHandles are really used!"
		self assureOpen.
		
		Primitives flush: id
	)
	
	open = (
		"TODO: for now we solely rely on the old FileStreams"
		"id := self basicOpen.
		id ifNil: 	[
			reference exists ifFalse: [FileDoesNotExist signalWith: reference].
			self error: 'Unable to open file ' , reference printString]"
	)
	
	truncateTo: anInteger = (
		Primitives truncate: id to: anInteger.
		self reopen
	)
	
	----------------------------------
	| Registry |
	
	registry = (
		^Registry ifNil: [Registry := WeakRegistry new]
	
	)
	
	register: aFileHandle = (
		"properly register the given FileHandle for being closed on garbage collection"
		^self registry add: aFileHandle
	)
	
	initialize = (
		self useFilePlugin.
	
	)
	
	useFilePlugin = (
		Primitives := FilePluginPrims new
	)
	
	startUp: resuming = (
		"This functionality is disabled for now, to avoid doing a lot of processing at
		image start up. To reenable, add this class to the start up list."
		
		resuming ifTrue: [self allInstancesDo: [:ea | ea startUp]]
	)
)