DiskStore = FileSystemStore (
	"I am an abstract superclass for disk store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. "
	| maxFileNameLength |
	
	maxFileNameLength = (
		^ maxFileNameLength
	)
	
	isWritable: aPath = (
		(self exists: aPath) ifFalse: [ ^ false ].
		self flag: 'TODO: we need a decent primitive for this...'.
		(self basicOpen: aPath writable: true) 
			ifNotNil: [ :id|
				Primitives close: id.
				^ true].
		^ false
	)
	
	basicEntry: directoryEntry path: aPath nodesDo: aBlock = (
		| encodedPathString index entry pathString |
			
		index := 1.
		pathString := self stringFromPath: aPath.
		encodedPathString := Primitives encode: pathString.
		entry := Primitives lookupEntryIn: encodedPathString index: index.
		entry = #badDirectoryPath ifTrue: [ self signalDirectoryDoesNotExist: aPath ].
		
		[ entry isNil ]
			whileFalse: [ 
				entry at: 1 put: (Primitives decode: entry first).
				aBlock value: entry.
				index := index + 1.
				entry := Primitives lookupEntryIn: encodedPathString index: index ].
	)
	
	basicOpen: aPath writable: aBoolean = (
		| string encoded |
		string := self stringFromPath: aPath.
		encoded := Primitives encode: string.
		^ Primitives open: encoded writable: aBoolean
	)
	
	createDirectory: path = (
		"Create a directory for the argument path. 
		If the path refers to an existing file, raise FileExists.
		If the path refers to an existing directory, raise DirectoryExists.
		If the parent directory of the path does not exist, raise DirectoryDoesNotExist"
	
		| parent encodedPathString pathString result |
		pathString := self stringFromPath: path.
		encodedPathString := Primitives encode: pathString.
		result := Primitives createDirectory: encodedPathString.
		result
			ifNil: [ 
				parent := path parent.
				(self exists: path)
					ifTrue: [ 
						(self isFile: path)
							ifTrue: [ self signalFileExists: path ]
							ifFalse: [ self signalDirectoryExists: path ] ].
				(self isDirectory: parent)
					ifFalse: [ ^ self signalDirectoryDoesNotExist: parent ].
				self primitiveFailed ].
		^ self
	)
	
	rename: sourcePath to: destinationPath = (
	
		| sourcePathString encodedSourcePathString targetPathString encodedTargetPathString result |
		sourcePathString := self stringFromPath: sourcePath.
		encodedSourcePathString := Primitives encode: sourcePathString.
		targetPathString := self stringFromPath: destinationPath.
		encodedTargetPathString := Primitives encode: targetPathString.
		^ Primitives rename: encodedSourcePathString to: encodedTargetPathString.
	)
	
	defaultWorkingDirectory = (
		| pathString |
		pathString := Primitives decode: Primitives imageFile.
		^ (self pathFromString: pathString) parent
	)
	
	initialize = (
		super initialize.
		maxFileNameLength := Smalltalk vm maxFilenameLength ifNil: [ 255 ].
	)
	
	basicPosixPermissions: anEntry = (
		^ (anEntry size >= 6)
			ifTrue: [ anEntry at: 6 ]
			ifFalse: [ nil ].
	)
	
	openFileStream: path writable: writable = (
		| fullPath |
		fullPath := self stringFromPath: path.
		"redirect over the default implementation"
		^ writable 
			ifFalse: [ FileStream readOnlyFileNamed: fullPath ]
			ifTrue: [ FileStream fileNamed: fullPath ]
	)
	
	basicIsSymlink: anEntry = (
		^(anEntry size >= 7)
			ifTrue: [ anEntry at: 7 ]
			ifFalse: [ false ]
	)
	
	rootNode = (
		^ #('' 0 0 true 0 8r555)
	)
	
	isDiskFileSystem = (
		^ true
	)
	
	basicIsDirectory: anEntry = (
		^ anEntry at: 4
	)
	
	forReferencePrintOn: aStream = (
		aStream nextPutAll: 'File @ '
	)
	
	delete: path = (
		| pathString encodedPathString |
		
		(self exists: path)
			ifFalse: [ ^ FileDoesNotExist signalWith: path ].
			
		pathString := self stringFromPath: path.
		encodedPathString := Primitives encode: pathString.
		
		(self isDirectory: path)
			ifTrue: [ Primitives deleteDirectory: encodedPathString ]
			ifFalse: [ 
				StandardFileStream
					retryWithGC: [ Primitives deleteFile: encodedPathString ]
					until: [ :result | result notNil ]
					forFileNamed: pathString ]
	)
	
	basicIsFile: anEntry = (
		^ (anEntry at: 4) not
	)
	
	hash = (
		^ self species hash
	)
	
	nodeAt: aPath ifPresent: presentBlock ifAbsent: absentBlock = (
		
		| entry |
		
		aPath isRoot ifTrue: [ ^ presentBlock value: self rootNode ].
		
		entry := self basicEntryAt: aPath.
		
		^ entry == #badDirectoryPath 
			ifTrue: absentBlock
			ifFalse: [
				entry at: 1 put: aPath basename.
				presentBlock value: entry ].
	)
	
	isReadable: aPath = (
		(self exists: aPath) ifFalse: [ ^ false ].
		self flag: 'TODO: we need a decent primitive for this...'.
		(self basicOpen: aPath writable: false) 
			ifNotNil: [ :id|
				Primitives close: id.
				^ true].
		^ false
	)
	
	basicSize: anEntry = (
		^ (anEntry at: 5)
	)
	
	basenameFromEntry: entry = (
		^ entry at: 1
	)
	
	= other = (
		^ self species = other species
	)
	
	handleClass = (
		^ FileHandle
	)
	
	basicEntryAt: aPath = (
		| encodedPath encodedBasename |
		
		encodedPath := Primitives encode: (self stringFromPath: aPath parent).
		encodedBasename := Primitives encode: aPath basename.
		
		^ (Primitives lookupDirectory: encodedPath filename: encodedBasename)
			ifNil: [ #badDirectoryPath ].
		
	)
	
	basicCreationTime: anEntry = (
		" the entry contains the seconds since the squeak epoch in local time"
		^  (DateAndTime fromSeconds: (anEntry at: 2) offset: 0) translateTo: DateAndTime localOffset
	)
	
	checkName: aFileName fixErrors: fixErrors = (
		"Check a string aFileName for validity as a file name. Answer the original file name if it is valid. If the name is not valid (e.g., it is too long or contains illegal characters) and fixing is false, raise an error. If fixing is true, fix the name (usually by truncating and/or tranforming characters), and answer the corrected name. The default behavior is just to truncate the name to the maximum length for this platform. Subclasses can do any kind of checking and correction appropriate for their platform."
		
		| maxLength |
		aFileName size = 0 ifTrue: [self error: 'zero length file name'].
		maxLength := self maxFileNameLength.
		aFileName size > maxLength ifTrue: [
			fixErrors
				ifTrue: [^ aFileName contractTo: maxLength]
				ifFalse: [self error: 'file name is too long']].
		^ aFileName
	)
	
	isDirectory: aPath = (
		| entry |
		
		aPath isRoot ifTrue: [ ^ true ].
		
		entry := self  basicEntryAt: aPath.
		
		^ entry == #badDirectoryPath 
			ifTrue: [  false ]
			ifFalse: [ self basicIsDirectory: entry ].
		
	)
	
	isSymlink: aPath = (
		| entry |
		
		aPath isRoot ifTrue: [ ^false ].
		
		entry := self  basicEntryAt: aPath.
		
		^ entry == #badDirectoryPath 
			ifTrue: [  false ]
			ifFalse: [ self basicIsSymlink: entry ].
		
	)
	
	isFile: aPath = (
		| entry |
		
		aPath isRoot ifTrue: [ ^ false ].
		
		entry := self  basicEntryAt: aPath.
		
		^ entry == #badDirectoryPath 
			ifTrue: [  false ]
			ifFalse: [ self basicIsFile: entry ].
		
	)
	
	basicModificationTime: anEntry = (
		" the entry contains the seconds since the squeak epoch in local time"
		^ (DateAndTime fromSeconds: (anEntry at: 3) offset: 0) translateTo: DateAndTime localOffset
	)
	
	----------------------------------
	
	maxFileNameLength = (
		self subclassResponsibility 
	)
	
	currentFileSystem = (
		^ CurrentFS ifNil: [
			CurrentFS := FileSystem store: self activeClass createDefault]
	)
	
	checkVMVersion = (
		"Display a warning if the VM is too old"
		| displayError |
		displayError := [ ^ self inform: 'Your VM is too old for this image. Please download the latest VM.' ].
		[(Smalltalk vm interpreterSourceDate > '2012-07-08+2:00' asDate)
			ifFalse: displayError
		] on: Error do: [ :e| displayError value ].
	)
	
	reset = (
		CurrentFS := nil
	)
	
	useFilePlugin = (
		Primitives := FilePluginPrims new
	)
	
	createDefault = (
		^ self new
	)
	
	activeClass = (
		self allSubclassesDo: [:ea | 
			ea isActiveClass ifTrue: [^ ea]].
		^ self
	)
	
	initialize = (
		self useFilePlugin.
		Smalltalk removeFromStartUpList: self.
		Smalltalk removeFromShutDownList: self.
		Smalltalk addToStartUpList: self after: OSPlatform.
		Smalltalk addToShutDownList: self
	)
	
	isActiveClass = (
		^ self delimiter = Primitives delimiter
	)
	
	shutDown: quitting = (
		"Force to detect filesystem after image restart"
		self reset
	)
	
	delimiter = (
		^ self current delimiter
	)
	
	current = (
		^ self currentFileSystem store
	)
	
	startUp: resuming = (
		self checkVMVersion.
		resuming 
			ifTrue: [ self reset ]
	)
)