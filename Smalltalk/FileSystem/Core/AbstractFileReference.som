AbstractFileReference = Object (
	"I am an abstract superclass for FileLocator and FileReference. By implementing most of the methods on myself most code duplucation between the locator and the reference can be avoided"
	
	
	isRoot = (
		^ self resolve isRoot
	)
	
	hasFiles = (
		^self resolve hasFiles
	)
	
	resolve: anObject = (
		^ anObject asResolvedBy: self
	)
	
	binaryReadStream = (
		^ self subclassResponsibility
	)
	
	isContainedBy: anObject = (
		"DoubleDispatch helper for #contains:"
		^ anObject containsReference: self resolve
	)
	
	filesMatching: patterns = (
		"
		FileSystem disk workingDirectory filesMatching: '*'
		FileSystem disk workingDirectory filesMatching: '*.image;*.changes'
		"
		^ self 
			childGeneratorBlock: [:reference : aBlock| 
				reference fileSystem fileNamesAt: reference path do: aBlock ]
			matching:  patterns 
	)
	
	children = (
		"Answer an array containing references to the direct children of this reference."
		| reference |
		reference := self resolve.
		^ (reference fileSystem childNamesAt: reference path) 
			collect: [ :aName | self / aName ]
	)
	
	allEntries = (
		^ CollectVisitor breadthFirst: self resolve
	)
	
	mimeTypes = (
		^ self resolve mimeTypes
	)
	
	ensureCreateFile = (
		"Create if necessary a file for the receiver."
		self writeStream close.
		
	)
	
	parent = (
		^ self withPath: self path parent
	)
	
	allDirectories = (
		"Return all the directories recursively nested in the receiver."
		^ (SelectVisitor breadthFirst: self resolve select: [:entry | entry isDirectory ])
			collect: [ :each| each reference ]
	)
	
	openWritable: aBoolean = (
		^ self resolve openWritable: aBoolean
	)
	
	basenameWithoutExtension: anExtension = (
		"Returns the basename without specified extension (if any)
		('/foo/gloops.taz' asFileReference basenameWithoutExtension: 'taz') = 'gloops'
		"
		^ self fullPath basenameWithoutExtension: anExtension
	)
	
	modificationTime = (
		^ self resolve modificationTime 
	)
	
	extension = (
		
		^ self fullPath extension.
	)
	
	macTypeAndCreator = (
		^ self resolve macTypeAndCreator
	)
	
	relativeToReference: landmarkReference = (
		"Return the path of the receiver relative to landmarkReference."
		
		^ self fullPath relativeTo: landmarkReference path
	)
	
	relativeTo: landmark = (
		"Answer a new path relative to landmark."
		
		"parent/child/grandChild relativeTo: parent returns child/grandChild
		(Filesystem disk / 'griffle' / 'plonk' / 'nurp') relativeTo: (Filesystem disk / 'griffle') 
		returns plonk/nurp"
	
		^ landmark makeRelative: self resolve
	)
	
	asUrl = (
		^ self asZnUrl
	)
	
	moveTo: aReference = (
		"Move the receiver in the location passed as argument.
		
		(FileSystem disk workingDirectory / 'paf' ) ensureCreateFile.
		(FileSystem disk workingDirectory / 'fooFolder') ensureCreateDirectory. 
		(FileSystem disk workingDirectory / 'paf' ) moveTo: (FileSystem disk workingDirectory / 'fooFolder' / 'paf')
		"
		^ self resolve moveTo: aReference
	)
	
	allChildren = (
		"Return all the files and folders recursively nested in the receiver"
		
		^ CollectVisitor breadthFirst: self resolve collect: [:entry | entry reference]
	)
	
	fullPath = (
		"Returns the absolute path, better use absolutePath"
		
		^ self subclassResponsibility
	)
	
	isRelative = ( 
		self subclassResponsibility 
	)
	
	delete = (
		"Delete the receiver, does raise an error if it is not present."
		
		^ self resolve delete
	)
	
	allDirectoriesMatching: aPattern = (
	    "Return all the directories recursively nested in the receiver."
	    ^ (SelectVisitor 
				breadthFirst: self resolve 
				select: [:entry | entry isDirectory and: [ aPattern match: entry basename ] ])
	        collect: [ :each | each reference ]
	
	)
	
	relativeToPath: landmarkPath = ( 
		
		^ self fullPath relativeTo: landmarkPath
	)
	
	fileIn = (
	
		self readStreamDo: [ :stream | 
			CodeImporter evaluateFileStream: stream ]
	)
	
	files = (
		"Return all the files (as opposed to folders) contained in the receiver"
		
		| reference |
		reference := self resolve.
		^ (reference fileSystem fileNamesAt: reference path) 
			collect: [ :aName | self withPath: self path / aName ]
	)
	
	contains: anObject = (
		"Return true if anObject is in a subfolder of me"
		^ anObject isContainedBy: self resolve
	)
	
	readStreamDo: doBlock ifAbsent: absentBlock = (
		^ self isFile 
			ifTrue: [ self readStreamDo: doBlock ]
			ifFalse: absentBlock
	)
	
	createDirectory = (
		"Create a new repository and raise an error if the directory already exist."
		self resolve createDirectory
	)
	
	isWritable = (
		^ self resolve isWritable
	)
	
	childrenMatching: patterns = (
		"
		FileSystem disk workingDirectory childrenMatching: '*'
		FileSystem disk workingDirectory childrenMatching: '*.image;*.changes'
		"
		^ self 
			childGeneratorBlock: [:reference : aBlock| 
				reference fileSystem childNamesAt: reference path do: aBlock ]
			matching:  patterns 
	)
	
	allChildrenMatching: aPattern = (
	    "Return all the files and folders recursively nested in the receiver and matching the pattern, aPattern"
	    
	    ^ self allChildren select: [ :each |  aPattern match: each basename ]
	
	)
	
	asPathWith: anObject = (
		^ self resolve asPathWith: anObject
	)
	
	isChildOf: anObject = (
		^ self parent = anObject
	)
	
	copyAllTo: aResolvable = (
		"Performs a deep copy of the receiver, to a location specified by the argument. If the receiver is a file, the file will be copied; if a directory, the directory and its contents will be copied recursively. The argument must be a reference that doesn't exist; it will be created by the copy."
		
		CopyVisitor copy: self resolve asAbsolute to: aResolvable resolve
	)
	
	streamWritable: writable do: aBlock = (
		^ writable 
			ifTrue: [ self writeStreamDo: aBlock ]
			ifFalse: [ self readStreamDo: aBlock ]
	)
	
	directoryNames = (
		^ self directories collect: #basename
	)
	
	binaryReadStreamDo: doBlock ifAbsent: absentBlock = (
		^ self isFile 
			ifTrue: [ self binaryReadStreamDo: doBlock ]
			ifFalse: absentBlock
	)
	
	nextVersion = (
		^ self resolve nextVersion
	)
	
	entries = (
		^ self resolve entries
	)
	
	size = (
		^ self resolve size
	)
	
	indicator = (
		"Returns a string indicating the type of reference:
		- '?' for a non existing reference',
		- '/' for a directory,
		- the empty string for a file."
		"When this framework gets more complete, it is possible to extend this behavior with the following indicators (taken from unix ls utility):
		- '*' for a regular file that is executable
		- '@' for a symbolic link
		- '|' for FIFOs
		- '=' for sockets
		- '>' for doors"
		^ self exists
			ifTrue: [self isDirectory ifTrue: ['/'] ifFalse: ['']  ]
			ifFalse: ['?']
	)
	
	withExtension: aString = (
		^ self withPath: (self path withExtension: aString)
	)
	
	extensions = (
		  "#('foo' 'foo.tar' 'foo.tar.gz' 'foo.1.tar' 'foo.1.tar.gz') collect: [:thing| thing extensions] => #(#() #('tar') #('tar' 'gz') #('1' 'tar') #('1' 'tar' 'gz'))"
		
	        ^ self fullPath extensions
	)
	
	copyWithPath: newPath = (
		self subclassResponsibility
	)
	
	isAbsolute = ( 
		self subclassResponsibility 
	)
	
	asResolvedBy: anObject = (
		^ anObject resolveReference: self
	)
	
	childGeneratorBlock: doBlock matching: patterns = (
		"
		FileSystem workingDirectory filesMatching: '*'
		FileSystem workingDirectory filesMatching: '*.image;*.changes'
		"
		
		| files reference|
		files := Set new.
		reference := self resolve.
		
		(patterns findTokens: ';', String crlf) do: [ :pattern | 
			doBlock value: reference value: [ :basename|
				(pattern match: basename)
					ifTrue: [ files add: (self / basename) ]]].
		
		^files asOrderedCollection
	)
	
	readStreamDo: aBlock = (
		| stream |
		stream := self readStream.
		^ [ aBlock value: stream ] 
			ensure: [ stream close ]
	)
	
	<= other = (
		^ self path <= other path
	)
	
	readStreamIfAbsent: absentBlock = (
		^ self isFile
			ifTrue: [ self readStream ]
			ifFalse: absentBlock
	)
	
	isReadable = (
		^ self resolve isReadable
	)
	
	ensureDeleteAll = (
		"Delete this directory and all children of it, and does not raise an error if the file does not exist."
		
		self exists ifFalse: [ ^ self  ].
		self deleteAll
		
	)
	
	ifFile: fBlock ifDirectory: dBlock ifAbsent: aBlock = (
		^ self isFile
			ifTrue: fBlock
			ifFalse: [
				self isDirectory
					ifTrue: dBlock
					ifFalse: aBlock ]
	)
	
	uri = (
		"Convert my path into a file:// type url. For odd characters use %20 notation."
	
		^ self asUrl
	)
	
	deleteIfAbsent: aBlock = (
		"Delete the receiver, when it does not exist evaluate the block"
		self resolve deleteIfAbsent: aBlock
	)
	
	asAbsolute = ( 
		self subclassResponsibility
	)
	
	entry = (
		^ self resolve entry
	)
	
	absolutePath = (
		"Returns the absolute path"
		
		^ self subclassResponsibility
	)
	
	resolveString: aString = ( 
		self subclassResponsibility
	)
	
	asZnUrl = (
		"Convert the receiver in a file:// ZnUrl.
		Only an absolute path can be represented as a file:// URL"
		
		^ self asAbsolute path asZnUrl
	)
	
	allFiles = (
		"Return all the files (not directories) recursively nested in the receiver."
		^ (SelectVisitor breadthFirst: self resolve select: [:entry | entry isFile ])
			collect: [ :each| each reference ]
	)
	
	hasDirectories = (
		^self resolve hasDirectories
	)
	
	exists = (
		^ self resolve exists
	)
	
	copyTo: aReference = (
		^ self resolve copyTo: aReference resolve
	)
	
	fullNameWithIndicator = (
		"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is '/foo/gloops.taz', whereras /foo basenameWithIndicator is '/foo/'" 
		^ self fullName, self indicator   
	)
	
	fullName = (
	
		^ self resolve fullName
	)
	
	makeRelative: anObject = (
		^ anObject relativeToReference: self resolve
	)
	
	ensureCreateDirectory = (
		"Verifies that the directory does not exist and only creates if necessary. Do not remove files contained if they exist."
		^ self resolve ensureCreateDirectory
	)
	
	, extension = (
		^ self resolve, extension
	)
	
	directories = (
		"Return all the directories (by opposition to files) contained in the receiver"
	
		| reference |
		reference := self resolve.
		^ (reference fileSystem directoryNamesAt: reference path) 
			collect: [ :aName | self withPath: self path / aName ]
	)
	
	fileSystem = (
		^ self resolve fileSystem
	)
	
	writeStreamDo: aBlock = (
		| stream |
		stream := self writeStream.
		^ [ aBlock value: stream ]
			ensure: [ stream close ]
	)
	
	base = (
		"Returns the base of the basename, i.e. /foo/gloops.taz base is 'gloops'"
		^ self fullPath base
	)
	
	hasChildren = (
		^self resolve hasChildren
	)
	
	resolvePath: aPath = (
		^ self withPath: (self path resolvePath: aPath)
	)
	
	writeStream = (
		self subclassResponsibility
	)
	
	isFile = (
		^ self resolve isFile
	)
	
	basenameWithoutExtension = (
		"Returns the basename, i.e. /foo/gloops.taz basenameWithoutExtension is 'gloops'"
		^ self fullPath basenameWithoutExtension
	)
	
	basename = (
		"Returns the basename, i.e. /foo/gloops.taz basename is 'gloops.taz'"
		^ self fullPath basename
	)
	
	/ aString = (
		^ self withPath: self path / aString
	)
	
	writeStreamDo: doBlock ifPresent: presentBlock = (
		^ self isFile
			ifTrue: presentBlock
			ifFalse: [ self writeStreamDo: doBlock ]
	)
	
	deleteAllChildren = (
		"delete all children of the receiver, raise an error if the receiver does not exist"
		
		self children do: [:aReference | aReference deleteAll ]
	)
	
	ensureDelete = (
		"Delete the file and does not raise exception if it does not exist contrary to delete"
		
		self deleteIfAbsent: [].
	)
	
	creationTime = (
		^ self resolve creationTime 
	)
	
	binaryReadStreamDo: aBlock = (
		| stream |
		stream := self binaryReadStream.
		^ [ aBlock value: stream ] 
			ensure: [ stream close ]
	)
	
	isDirectory = (
		^ self resolve isDirectory
	)
	
	humanReadableSize = (
		^ self size humanReadableSIByteSize
	)
	
	binaryReadStreamIfAbsent: absentBlock = (
		^ self isFile
			ifTrue: [ self binaryReadStream ]
			ifFalse: absentBlock
	)
	
	deleteAll = (
		"Delete this directory and all children of it, raise an error if the file does not exist."
		DeleteVisitor delete: self resolve
	)
	
	glob: aBlock = (
		^ SelectVisitor breadthFirst: self resolve select: aBlock
	)
	
	containsPath: aPath = (
		^ self fullPath containsPath: aPath
	)
	
	writeStreamIfPresent: presentBlock = (
		^ self isFile 
			ifTrue: presentBlock
			ifFalse: [ self writeStream ]
	)
	
	resolveReference: aReference = (
		^ aReference isAbsolute
			ifTrue: [ aReference ]
			ifFalse: [ self withPath: aReference path ]
	)
	
	hash = (
		"Hash is reimplemented because #= is reimplemented"
		^ self path  hash
	)
	
	parentUpTo: aParentDirName = (
		^ self withPath: (self path parentUpTo: aParentDirName)
	)
	
	basenameWithIndicator = (
		"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is 'gloops.taz', whereras /foo basenameWithIndicator is 'foo/'" 
		^ self basename, self indicator   
	)
	
	directoriesMatching: patterns = (
		"
		FileSystem disk workingDirectory directoriesMatching: '*'
		FileSystem disk workingDirectory directoriesMatching: 'package-cache'
		"
		^ self 
			childGeneratorBlock: [:reference : aBlock| 
				reference fileSystem directoryNamesAt: reference path do: aBlock ]
			matching:  patterns 
	)
	
	fileNames = (
		^ self files collect: #basename
	)
	
	pathString = (
		^ self resolve pathString
	)
	
	readStream = (
		self subclassResponsibility
	)
	
	asFileReference = ( 
		self subclassResponsibility 
	)
	
	childNames = (
		^ self children collect: #basename
	)
	
	permissions = (
		"Return the FileSystemPermission for this node"
		^ self resolve permissions
	)
	
	item = (
		^ self
	)
	
	pathSegments = (
		^ self fullPath segments
	)
	
	renameTo: newBasename = (
		self subclassResponsibility
	)
	
	ensureDeleteAllChildren = (
		"delete all children of the receiver and does not raise an error if the receiver does not exist"
		
		self exists ifFalse: [ ^ self  ].
		self deleteAllChildren
	)
	
	resolve = (
		^ self subclassResponsibility 
	)
	
	withPath: newPath = (
		^ self path == newPath
			ifTrue: [ self ]
			ifFalse: [ self copyWithPath: newPath ]
	)
	
	contents = (
		self readStreamDo: [ :stream |
			^ stream contents ]
	)
)