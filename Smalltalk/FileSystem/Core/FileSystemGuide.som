FileSystemGuide = Object (
	"I am an abstract superclass for objects that fulfill the Guide role in the Guide/Visitor pattern. My subclasses know how to traverse a filesystem in a specific order, "showing" the files and directories they encounter to a visitor.visitor	An object that fulfills the Visitor role and implements the visitor protocol.	work	An OrderedCollection, used to keep track of filesystem nodes that have not yet been visited"
	| visitor work selectChildren |
	
	pushAll: aCollection = ( 
		aCollection do: [ :ea | self push: ea ]
	)
	
	initialize = (
	
		super initialize.
		work := OrderedCollection new
	)
	
	initializeWithVisitor: aVisitor = (
		self initialize.
		visitor := aVisitor.
		
	)
	
	pop = (
		^ work removeLast
	)
	
	selectChildren = (
		^ selectChildren
	)
	
	push: anObject = (
		work add: anObject
	)
	
	top = (
		^ work removeFirst
	)
	
	show: aReference = (
		self subclassResponsibility
	)
	
	selectChildren: aBlock = (
		"With this block you can control how the guide spreads over directories.
		Example: 
			self selectChildren: [ :parentEntry | parentEntry isSymlink not ].
			This will prevent the outer visitor to see any children of symlinked directories.
			
		Since the guides essentially rearrange the files visited controlling which children
		you see is the main concern of the guide. All the other visiting aspects can be 
		controlled in the visitor."
		selectChildren := aBlock
	)
	
	whileNotDoneDo: aBlock = (
		[ work isEmpty ] whileFalse: [ aBlock value ]
	)
	
	shouldVisitChildrenOf: anEntry = (
		^ selectChildren 
			ifNil: [ true ]
			ifNotNil: [ selectChildren cull: anEntry ]
	)
	
	----------------------------------
	
	show: aReference to: aVisitor selecting: aBlock = (
		| receiver |
		receiver := self for: aVisitor.
		receiver selectChildren: aBlock.
		^ receiver show: aReference
	)
	
	show: aReference to: aVisitor = (
		^ (self for: aVisitor) show: aReference
	)
	
	for: aVisitor = (
		^ self basicNew initializeWithVisitor: aVisitor
	)
)