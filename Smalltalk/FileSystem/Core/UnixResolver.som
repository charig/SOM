UnixResolver = PlatformResolver (
	"I am an expert on Unix filesystem conventions. I resolve origins according to these conventions."
	
	
	preferences = (
		"http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
	
		^ self directoryFromEnvVariableNamed: 'XDG_CONFIG_HOME' or: [ self home / '.config' ]
	)
	
	home = (
		^ self directoryFromEnvVariableNamed: 'HOME'
	)
	
	cache = (
		"http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
	
		^ self directoryFromEnvVariableNamed: 'XDG_CACHE_HOME' or: [ self home / '.cache' ]
	)
	
	desktop = (
		^ (self xdgUserDir: 'DESKTOP') ifNil: [ self home / 'Desktop' ]
	)
	
	xdgParseUserDirLine: aStream = (
		"Format is XDG_xxx_DIR=""'H'OME/yyy"", where yyy is a shell-escaped homedir-relative path, or XDG_xxx_DIR=""/yyy"", where /yyy is an absolute path. No other format is supported."
		| path firstChar |
		(aStream next = '"') ifFalse: [ ^ nil ].
		firstChar := aStream next.
		(#('$' '/') includes: firstChar) ifFalse: [ ^ nil ].
		path := firstChar = '$'
					ifTrue: [ (aStream next: 5) = 'HOME/' ifFalse: [ ^ nil ].
						       self home / (aStream upTo: '"') ]
					ifFalse: [ self resolveString: '/', (aStream upTo: '"') ].
		^ path
	)
	
	xdgUserDir: userDirName = (
		"Read ~/.config/user-dirs.dirs to find the directory of userDirName (e.g., 'DESKTOP')"
		"http://freedesktop.org/wiki/Software/xdg-user-dirs"
		"This file is written by xdg-user-dirs-update If you want to change or add directories, just edit the line you're interested in. All local changes will be retained on the next run Format is XDG_xxx_DIR=""'H'OME/yyy"", where yyy is a shell-escaped homedir-relative path, or XDG_xxx_DIR=""/yyy"", where /yyy is an absolute path. No other format is supported."
		| configFile |
		configFile := self preferences / 'user-dirs.dirs'.
		(configFile isFile and: [ configFile isReadable ]) ifFalse: [ ^ nil ].
		configFile readStreamDo: [ :stream | 
			[ stream atEnd ]
				whileFalse: [ 
					((stream peek ~= '#') and: [ (stream upTo: '=') = ('XDG_', userDirName, '_DIR') ])
								ifTrue: [ ^ self xdgParseUserDirLine: stream ]
								ifFalse: [ stream nextLine ] ] ].
		^ nil
	)
	
	documents = (
		^ (self xdgUserDir: 'DOCUMENTS') ifNil: [ self home / 'Documents' ]
	)
	
	userData = (
		^ self directoryFromEnvVariableNamed: 'XDG_DATA_HOME' or: [ self home / '.local' / 'share' ]
	)
	
	supportedOrigins = (
		^ super supportedOrigins , #( userData )
	)
	
	temp = (
		^ '/tmp' asFileReference
	)
	
	----------------------------------
	
	platformName = (
		^  'unix'
	)
)