FileReference = AbstractFileReference (
	"I combine a filesystem and path, which is sufficient to refer to a concrete file or directory. I provide methods for navigating my filesystem, performing filesystem operations and opening and closing files.  I am the primary mechanism for working with files and directories. 	| working |	working := FileSystem disk workingDirectory.	working files 	| disk |	disk := FileSystem disk.	disk root.                               	a reference to the root directory	disk working.                         	a reference to the working directory
	"
	| filesystem path |
	
	isRoot = (
		^ path isRoot
	)
	
	hasFiles = (
		"Return whether the receiver has children that are files."
		"FileSystem workingDirectory hasFiles"
		
		^ filesystem hasFiles: path
	)
	
	isReadable = (
		^ filesystem isReadable: path
	)
	
	binaryReadStream = (
		^ filesystem binaryReadStreamOn: self path
	)
	
	deleteIfAbsent: aBlock = (
		self exists 
			ifTrue: [ self delete ]
			ifFalse: aBlock
	)
	
	
	path = (
		"Return the path internal representation that denotes the receiver in the context of its filesystem. "
		^ path
	)
	
	containsReference: aReference = (
		^  aReference fileSystem = filesystem and: [path contains: aReference path]
	)
	
	asAbsolute = (
		"Return the receiver as an absolute file reference."
		
		^ self isAbsolute
			ifTrue: [ self ]
			ifFalse: [ filesystem referenceTo: (filesystem resolve: path) ]
	)
	
	entry = (
		"Return the entry (meta data) describing the receiver."
		^ filesystem entryAt: path
	)
	
	resolveString: aString = ( 
		| thePath |
		thePath := filesystem pathFromString: aString.
		^ filesystem referenceTo: (path resolve: thePath)
	)
	
	absolutePath = (
		"Return the absolute of the receiver"
		^ self path isRelative
			ifFalse: [ self path ]
			ifTrue: [ filesystem resolve: self path ]
	)
	
	mimeTypes = (
		"Return the possible mime types for the given path."
		^ filesystem mimeTypesAt: path
	)
	
	hasDirectories = (
		"Return whether the receiver has children that are directories."
		"FileSystem workingDirectory hasDirectories"
		
		^ filesystem hasDirectories: path
	)
	
	exists = (
		^ filesystem exists: path
	)
	
	openWritable: aBoolean = ( 
		^ filesystem open: path writable: aBoolean
	)
	
	copyTo: aReference = (
		self isDirectory
			ifTrue: [ aReference ensureCreateDirectory ]
			ifFalse: [ 
				filesystem = aReference fileSystem
					ifTrue: [ filesystem copy: path to: aReference resolve path ]
					ifFalse: [ filesystem copy: path toReference: aReference ] ]
	)
	
	modificationTime = ( 
		^ filesystem modificationTime: self path
	)
	
	macTypeAndCreator = (
		| results typeString creatorString |
		"get the Macintosh file type and creator info for the file with the given name. Fails if the file does not exist or if the type and creator type arguments are not strings of length 4. Does nothing on other platforms (where the underlying primitive is a noop)."
		"FileDirectory default getMacFileNamed: 'foo'"
	
		self flag: 'TODO'.
		"
		typeString := ByteArray new: 4 withAll: ('?' asInteger). #[63 63 63 63]
		creatorString := ByteArray new: 4 withAll: ('?' asInteger).
		[self primGetMacFileNamed: (self fullNameFor: fileName) asVmPathName
			type: typeString
			creator: creatorString.] ensure: 
			[typeString := typeString asString. 
			creatorString := creatorString asString].
		results := Array with: typeString convertFromSystemString with: creatorString convertFromSystemString.
		^results"
	
	)
	
	fullName = (
		"Return the full path name of the receiver."
		^ filesystem stringFromPath: (filesystem resolve: path)
	)
	
	ensureCreateDirectory = (
		"Create if necessary a directory for the receiver."
		filesystem ensureCreateDirectory: path
		
	)
	
	, extension = (
		^ self withPath: self path, extension
	)
	
	moveTo: aReference = (
		
		| result |
		result := self fileSystem 
			rename: self path
			to: aReference resolve path.
		result ifNotNil: [
			self setFileSystem: filesystem path: aReference path ].		
	)
	
	fileSystem = (
		"Return the filesystem to which the receiver belong."
		^ filesystem
	)
	
	isRelative = (
		^ path isRelative
	)
	
	fullPath = (
		^ self path
	)
	
	delete = (
		filesystem delete: path
	)
	
	resolvePath: anObject = (
		^ self withPath: (path resolve: anObject)
	)
	
	writeStream = (
		^ filesystem writeStreamOn: self path
	)
	
	hasChildren = (
		"Return whether the receiver has any children."
		"FileSystem workingDirectory hasChildren"
		
		^ filesystem hasChildren: path
	)
	
	isFile = (
		^ filesystem isFile: path
	)
	
	setFileSystem: aFilesystem path: aPath = (
		filesystem := aFilesystem.
		path := aPath
	)
	
	createDirectory = (
		"Create a directory if it does not already exist, if this is the case raise the DirectoryExists exception."
		filesystem createDirectory: path
	)
	
	creationTime = ( 
		^ filesystem creationTime: self path
	)
	
	isWritable = (
		^ filesystem isWritable: path
	)
	
	isSymlink = ( 
		^ filesystem isSymlink: path
	)
	
	isDirectory = (
		^ filesystem isDirectory: path
	)
	
	printOn: aStream = (
		filesystem forReferencePrintOn: aStream.
		filesystem printPath: path on: aStream
	)
	
	nextVersion = (
		"Assumes a file name includes a version number encoded as '.' followed by digits 
		preceding the file extension.  Increment the version number and answer the new file name.
		If a version number is not found, return just the file"
	
		| parent version versionNumbers nameWithoutExtension |
		
		self exists
			ifFalse: [ ^ self ].
		
		parent := self parent.
		nameWithoutExtension := self basename copyUpTo: '.'.
		
		versionNumbers := parent files 
					select: [ :f| 
						(f basename beginsWith: nameWithoutExtension) ]
					thenCollect: [ :f| 
						Number squeezeNumberOutOfString: f basename ifFail: [ 0 ]].
		
		versionNumbers ifEmpty: [ ^self ].
		
		version := versionNumbers max + 1.
		^ parent / (nameWithoutExtension , '.', version asString) , self extension
	)
	
	resolveReference: aReference = (
		
		^ (filesystem = aReference fileSystem or: [aReference isRelative])
			ifTrue: [filesystem referenceTo: (path resolvePath: aReference path)]
			ifFalse: [aReference]
	)
	
	entries = (
		"Return the entries (meta data - file description) of the direct children of the receiver"
		^ self fileSystem entriesAt: self path 
	)
	
	size = (
		^ filesystem size: path
	)
	
	hash = (
		^ path hash bitXor: filesystem hash
	)
	
	readStream = (
		^ filesystem readStreamOn: self path
	)
	
	copyWithPath: newPath = (
		^ filesystem referenceTo: newPath
	)
	
	isAbsolute = (
		^ path isAbsolute
	)
	
	pathString = (
		"Return the full path name of the receiver."
		
		^ filesystem stringFromPath: (filesystem resolve: path)
	)
	
	asFileReference = (
		^ self
	)
	
	permissions = (
		^ filesystem permissions: self path
	)
	
	
	= other = (
		^ self species = other species
			and: [self path = other path
				and: [self fileSystem = other fileSystem]]
	)
	
	isZipFile = (
		^ self isFile and: [ #('zip' 'jar' 'ear' 'war') includes: self extension ]
	)
	
	renameTo: newBasename = (
		
		| destinationPath |
		destinationPath := self fileSystem 
			rename: self 
			to: self parent / newBasename.
		
		destinationPath ifNotNil: [
			self 
				setFileSystem: filesystem 
				path: destinationPath ].
		^ self
			
	)
	
	resolve = (
		^ self
	)
	
	----------------------------------

	fileSystem: aFilesystem path: aPath = (
		^ self new setFileSystem: aFilesystem path: aPath
	)
	
	newTempFilePrefix: prefix suffix: suffix = (
		| tmpDir random fileName |
		
		tmpDir := FileLocator temp asFileReference.
		[ random := UUIDGenerator default generateRandomBitsOfLength: 100.
		fileName := prefix , random asString, suffix ] doWhileTrue: [ (tmpDir / fileName) exists ].
		^ fileName asFileReference
	)
	
	/ aString = (
		"Answer a reference to the argument resolved against the root of the current disk filesystem."
		
		^ FileSystem disk / aString
	)
)