FileSystem = Object (
	"I present a low-level protocol for interacting with filesystems. I hold a reference toa store (a subinstance of FileSystemStore) which takes care of the details of performing file and directory operations on the filesystem I represent. I keep track of the current directory, and am responsible for resolving all paths thatI pass into my store. My store acts as a factory and offers platform specific actions.FileSystem instances know two methods that return a Reference object: workingDirectory and root.FileSystem disk workingDirectoryFileSystem disk root"
	| workingDirectory store |
	
	copyFrom: inputStream to: destPath = (
		| buffer out |
		out := nil.
		(self exists: destPath)
			ifTrue: [ store signalFileExists: destPath ].
		^ [ 
		out := self writeStreamOn: destPath.
		buffer := ByteArray new: 1024.
		[ inputStream atEnd ]
			whileFalse: [ 
				buffer := inputStream nextInto: buffer.
				out nextPutAll: buffer ]] ensure: [ out ifNotNil: [ out close ]]
	)
	
	childrenAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self childrenAt: aResolvable do: [ :path|
				out nextPut: path ]].
	)
	
	resolve: aResolvable = (
		^ aResolvable asResolvedBy: self
	)
	
	root = (
		"Returns the root of the receiver filesystem, i.e. / on unix"
		^ self referenceTo: Path root
	)
	
	referenceTo: aResolvable = ( 
		"Answer a reference to the argument from the context of the receiver filesystem.  	
			Example: Filesystem disk referenceTo: 'plonk.taz'"
	
		^ FileReference 
			fileSystem: self
			path: (self pathFromObject: aResolvable)
	)
	
	fileNamesAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			fileNodesDo: [ :entry | 
				aBlock value: (store basenameFromEntry: entry) ]
	)
	
	childrenAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			nodesDo: [ :entry | 
				aBlock value: path / (store basenameFromEntry: entry) ]
	)
	
	childNamesAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self childNamesAt: aResolvable do: [ :path|
				out nextPut: path ]].
	)
	
	createDirectory: aResolvable = (
		"Resolve aResolvable into an absolute path, then as the store to create a directory there. 
		The store is expected to raise an exception if it cannot do so."
	
		^ store createDirectory: (self resolve: aResolvable)
	)
	
	gtInspectorWorkingDirectoryItemsIn: composite = (
		(self workingDirectory gtInspectorItemsIn: composite) title: 'Working directory'
	)
	
	workingDirectoryPath = (
		^ workingDirectory
	)
	
	ensureCreateDirectory: aResolvable = (
		"Resolve the argument to an absolute path, then ask the store to make
		sure that all the directories contained in the argument path exist or are created."
		
		store ensureCreateDirectory: (self resolve: aResolvable)
	)
	
	resolveString: aString = (
		"Returns the root of the receiver filesystem, i.e. / on unix"
		
		^ workingDirectory resolvePath: (store pathFromString: aString)
	)
	
	workingDirectoryPath: aPath = (
	
		aPath isAbsolute 
			ifFalse: [ self error: 'Cannot set the working directory to a relative path' ].
		workingDirectory := aPath
	
	)
	
	binaryReadStreamOn: aResolvable = (
		"Resolve the argument into an absolute path and open a file handle on the file
		at that path. Ask the handle to give us a read stream for reading the file."
	
		^ (self open: aResolvable writable: false) binaryReadStream.
	)
	
	openFileStream: aResolvable writable: aBoolean = (
		^ store 
			openFileStream: (self resolve: aResolvable) 
			writable: aBoolean
	)
	
	entriesAt: aResolvable do: aBlock = (
		^ self 
			entriesAt: aResolvable 
			ifAbsent: [ store signalDirectoryDoesNotExist: ( self resolve: aResolvable) ]
			do: aBlock 
	)
	
	pathFromObject: anObject = ( 
		^ anObject asPathWith: self
	)
	
	initializeWithStore: aStore = (
		store := aStore.
		workingDirectory := store defaultWorkingDirectory
	)
	
	printPath: aPath on: aStream = (
		store printPath: aPath on: aStream
	)
	
	store = (
		^ store
	)
	
	hasChildren: aResolvable = (
		"Returns whether aResolvable has children."
		store directoryAt: (self resolve: aResolvable)
				ifAbsent: [ ^false ]
				nodesDo:  [ :node | ^true ].
		^false
	)
	
	directoriesAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self directoriesAt: aResolvable do: [ :path|
				out nextPut: path ]].
	)
	
	separator = (
		"Return path separator used by this filesystem."
	
		^ store separator
	)
	
	modificationTime: aResolvable = (
		"Resolve the argument, and answer true if the result refers
		to a directory, false if it refers to a file or doesn't exist."
	
		^ store modificationTime: (self resolve: aResolvable)
	)
	
	creationTime: aResolvable = (
		"Resolve the argument, and answer true if the result refers
		to a directory, false if it refers to a file or doesn't exist."
	
		^ store creationTime: (self resolve: aResolvable)
	)
	
	isReadable: aResolvable = (
		"Resolve the argument, and answer true if the there is
		a file or directory that can be read from."
		
		^ (self permissions: aResolvable) isReadable
	)
	
	gtInspectorRootItemsIn: composite = (
		(self root gtInspectorItemsIn: composite) title: 'Root directory'
	)
	
	workingDirectory = (
		"Returns a reference to the directory from where the image was launched"
	
		^ self referenceTo: self workingDirectoryPath
	)
	
	resolvePath: aPath = (
		"Return a path where the argument is resolved in the context of the
		receiver. The behavior is similar to the one of a command line.
			> cd /a/b/c
			> cd b
			The shell will attempt to make /a/b/c/b the current directory. "
	
		^ workingDirectory resolve: aPath
	)
	
	entryAt: aResolvable = (
		| path |
		path := self resolve: aResolvable.
		^ store
			nodeAt: path
			ifPresent: [ :node | store entryFromNode: node fileSystem: self path: path ]
			ifAbsent: [ store signalFileDoesNotExist: path ]
	)
	
	pathFromString: aString = (
		^ store pathFromString: aString
	)
	
	open = (
		"Some kinds of filesystems need to open connections to external resources. Does nothing by default."
		
		store open
	)
	
	filesAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self filesAt: aResolvable do: [ :path|
				out nextPut: path ]].
	)
	
	checkName: aString fixErrors: fixErrors = (
		^ store checkName: aString fixErrors: fixErrors
	)
	
	rename: sourcePath ifAbsent: aBlock to: destPath ifPresent: pBlock = (
		"Rename the file referenced as sourcePath to the destination referred as destPath. 
		Perform associate actions in case of problems."
		
		| source destination |
		source := self resolve: sourcePath.
		destination := self resolve: destPath.
		store
			rename: source
			ifAbsent: aBlock
			to: destination
			ifPresent: pBlock
			fileSystem: self.
		^ destination
	)
	
	delimiter = (
		"Return path delimiter used by this filesystem."
	
		^ store delimiter
	)
	
	readStreamOn: aResolvable = (
		"Resolve the argument into an absolute path and open a file handle on the file
		at that path. Ask the handle to give us a read stream for reading the file."
	
		^ (self open: aResolvable writable: false) readStream.
	)
	
	isDirectory: aResolvable = (
		"Resolve the argument, and answer true if the result refers
		to a directory, false if it refers to a file or doesn't exist."
	
		^ store isDirectory: (self resolve: aResolvable)
	)
	
	directoriesAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			directoryNodesDo: [ :entry | 
				aBlock value: path / (store basenameFromEntry: entry) ]
	)
	
	entriesAt: aResolvable = (
		^ Array
			streamContents: [ :out | 
				self entriesAt: aResolvable do: [ :entry | out nextPut: entry ]
			]
	)
	
	/ anObject = (
		"Return the absolute reference obtained by resolving anObject against the
		root of this filesystem."
		
		^ self root / anObject
	)
	
	isSymlink: aResolvable = (
		"Resolve the argument, and answer true if the result refers
		to a directory, false if it refers to a file or doesn't exist."
	
		^ store isSymlink: (self resolve: aResolvable)
	)
	
	directoryNamesAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			directoryNodesDo: [ :entry | 
				aBlock value: (store basenameFromEntry: entry) ]
	)
	
	close = (
		store close
	)
	
	filesAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			fileNodesDo: [ :entry | 
				aBlock value: path / (store basenameFromEntry: entry) ]
	)
	
	isCaseSensitive = (
		^ self store isCaseSensitive
	)
	
	stringFromPath: aPath = (
		^ store stringFromPath: aPath
	)
	
	writeStreamOn: aResolvable = (
		"Open a write stream on the file referred by the argument. It can be a string or a path"
	
		^ (self open: aResolvable writable: true) writeStream.
	)
	
	isWritable: aResolvable = (
		"Resolve the argument, and answer true if the there is
		a file that can be written to or directory that can be changed."
		
		^  (self permissions: aResolvable) isWritable
	)
	
	rename: sourcePath to: destName = (
		"Rename the file referenced as sourcePath to destPath.  Raise exceptions 
		FileExists or FileDoesNotExist  if the operation fails"
		
		^ self
			rename: sourcePath
			ifAbsent: [store signalFileDoesNotExist: sourcePath]
			to: destName
			ifPresent: [store signalFileExists: destName]
	)
	
	isDiskFileSystem = (
		^ store isDiskFileSystem
	)
	
	changeDirectory: aPath = (
		self workingDirectoryPath: (self resolve: aPath)
	)
	
	forReferencePrintOn: aStream = (
		store forReferencePrintOn: aStream
	)
	
	delete: aResolvable = (
		store delete: (self resolve: aResolvable)
	)
	
	resolveReference: aReference = (
		^ aReference fileSystem = self ifTrue:
			[workingDirectory resolvePath: aReference path]
	)
	
	hasDirectories: aResolvable = (
		self
			entriesAt: aResolvable
			ifAbsent: [  ^ false ]
			do: [ :entry | 
				entry isDirectory ifTrue: [ ^true ] ].
		^false
	)
	
	hash = (
		^ store hash
	)
	
	exists: aResolvable = (
		"Resolve the argument, and answer true if the there is
		a file or directory at that path, false if there is not."
		
		^ store exists: (self resolve: aResolvable)
	)
	
	copy: sourcePath ifAbsent: absentBlock to: destinationPath ifPresent: presentBlock = (
		"Copy the file referenced as sourcePath to the destination referred as destPath. Perform associate actions in case of problems."
	
		store
			copy: (self resolve: sourcePath)
			ifAbsent: absentBlock
			to: (self resolve: destinationPath)
			ifPresent: presentBlock
			fileSystem: self
	)
	
	hasFiles: aResolvable = (
		self
			entriesAt: aResolvable
			ifAbsent: [  ^ false ]
			do: [ :entry | entry isFile ifTrue: [ ^true ] ].
		^false
	)
	
	fileNamesAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self fileNamesAt: aResolvable do: [ :path|
				out nextPut: path ]].
	)
	
	openStreamDescription: aResolvable writable: aBoolean = (
		"I am  a helper method to delegate basicOpen:writable: to the store.
		 I am called from FileSystemHandle implementations."
		
		| path |
		
		path := self resolve: aResolvable.
		^ store basicOpen: path writable: aBoolean
	)
	
	mimeTypesAt: aResolvable = (
		"Return the possible mime types for the given path."
		^ store mimeTypesAt: (self resolve: aResolvable)
	)
	
	isMemoryFileSystem = (
		^ store isMemoryFileSystem
	)
	
	entriesAt: aResolvable ifAbsent: absentBlock do: aBlock = (
		| path entry aFilesystem |
		path := self resolve: aResolvable.
		aFilesystem := self.
		store
			directoryAt: path
			ifAbsent: [ ^ absentBlock value ]
			nodesDo: [ :node | 
				entry := store entryFromNode: node path: path for: aFilesystem.
				aBlock value: entry ]
	)
	
	copy: sourcePath to: destPath = (
		"Copy the file referenced as sourcePath to the destination referred as destPath.  
		If there is no file at sourcePath, raise FileDoesNotExist.
		If destPath is a file, raise FileExists."
		
		self
			copy: sourcePath
			ifAbsent: [ store signalFileDoesNotExist: sourcePath ]
			to: destPath
			ifPresent: [ store signalFileExists: destPath ]
	)
	
	copy: aPath toReference: destRef = (
		| inputStream path |
		
		path := self resolve: aPath.
		
		[
		inputStream := self readStreamOn: path.
		inputStream ifNil: [ store signalFileDoesNotExist: path ].
		destRef fileSystem copyFrom: inputStream to: destRef path 
		
			] ensure: [ inputStream ifNotNil: [ inputStream close ]]
	)
	
	directoryNamesAt: aResolvable = (
		^ Array streamContents: [ :out | 
			self directoryNamesAt: aResolvable do: [ :name|
				out nextPut: name ]].
	)
	
	= other = (
		^ self species = other species and: [self store = other store]
	)
	
	size: aResolvable = (
		"Resolve the argument and return the size for this file or directory "
	
		^ store size: (self resolve: aResolvable)
	)
	
	open: aResolvable writable: aBoolean = ( 
		"Resolve aResolvable into an absolute path, then ask the store to open the file at
		that path using the specified access mode."
		
		| path |
		path := self resolve: aResolvable.
		^ store handleClass 
			open: (FileReference fileSystem: self path: path) 
			writable: aBoolean
			
	)
	
	permissions: aResolvable = (
		"Resolve the argument and return the Permissions for this file or directory "
	
		^ store permissions: (self resolve: aResolvable)
	)
	
	childNamesAt: aResolvable do: aBlock = (
		| path |
		path := self resolve: aResolvable.
		store
			directoryAt: path
			ifAbsent: [ store signalDirectoryDoesNotExist: path ]
			nodesDo: [ :entry | 
				aBlock value: (store basenameFromEntry: entry) ]
	)
	
	extensionDelimiter = (
		^ '.'
	)
	
	isFile: aResolvable = (
		"Resolve the argument, and answer true if the result refers
		to a file, false if it refers to a directory or doesn't exist."
	
		^ store isFile: (self resolve: aResolvable)
	)
	
	* anObject = (
		"Return a relative reference."
		
		^ self referenceTo:( Path * anObject)
	)
	
	----------------------------------
	
	root = (
		^ self disk root
	)
	
	lookInUsualPlaces: fileName = (
		"Check the default directory, the imagePath, and the vmPath (and the vmPath's owner) for this file."
	
		| file |
		 (file := fileName asFileReference) exists
			ifTrue: [ ^ file ].
	
		(file := Smalltalk imageFile resolve: fileName) exists
			ifTrue: [ ^ file ].
	
		(file :=  Smalltalk vmDirectory resolve: fileName) exists
			ifTrue: [ ^ file ].
	
		(file := Smalltalk vmDirectory parent resolve: fileName) exists
			ifTrue: [ ^ file ].
	
		^ nil
	)
	
	workingDirectory = (
		^ self disk workingDirectory
	)
	
	gtExampleZip = (
		| zipFile zip receiver |
		zipFile := FileSystem memory workingDirectory / 'test.zip'.
		zip := (FileSystem zip: zipFile) open.
		receiver := zip / 'sample.txt'.
		receiver writeStreamDo: [ :stream | stream nextPutAll: self comment ].
		receiver yourself.
		^ zip
	)
	
	disk = (
		"Answer a filesystem that represents the 'on-disk' filesystem used by the host operating system."
	
		^ DiskStore currentFileSystem
	)
	
	* aFileOrDirectoryName = (
		^ self disk * aFileOrDirectoryName
	)
	
	zip: aReference = (
		^ self store: (ZipStore reference: aReference)
	)
	
	store: aStore = (
		| receiver |
		receiver := self basicNew.
		receiver initializeWithStore: aStore.
		^ receiver yourself
	)
	
	memory = (
		^ self store: (MemoryStore new)
	)
	
	startUp: aBoolean = (
		"This is only here to deal with migration from older versions of
		FileSystem that wanted to receive startup notifcations."
		
		Smalltalk removeFromStartUpList: self
	)
	
	/ aFileOrDirectoryName = (
		^ self disk / aFileOrDirectoryName
	)
)