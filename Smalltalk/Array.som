"

$Id: Array.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Array = (
	"Accessing"
    at: index            = primitive
    at: index put: value = primitive
    length               = primitive
    isEmpty				 = (^self length = 0)
    notEmpty 		     = (^ self isEmpty not)
    putAll: block        = ( self doIndexes: [ :i |
                                self at: i put: block value ] )
    first  = ( ^ self at: 1 )
    second = ( ^ self at: 2 )
    third = ( ^ self at: 3 )
    last   = ( ^ self at: self length )
    asArray = (^ self)
    asOrderedCollection = (^ self as: OrderedCollection)
    isCollection = (^true)
    
    "Comparing"
    = otherCollection = (
	    self == otherCollection ifTrue: [^ true].
		self species == otherCollection species ifFalse: [^ false].
		^ self hasEqualElements: otherCollection
	)
	
	, otherCollection = (
		^ self copyReplaceFrom: self length + 1
		  to: self length
		  with: otherCollection
	)
	
	hasEqualElements: otherCollection = (	
		| size |
		(size := self length) = otherCollection length ifFalse: [^ false].
		1 to: size do: [:index |
			(self at: index) = (otherCollection at: index) ifFalse: [^ false]].
		^ true
	)
	
    "Iterating"
    do: block            = ( self doIndexes: [ :i |
                                block value: (self at: i) ] )
    doIndexes: block     = ( 1 to: self length do: [:i |
                                block value: i. ] )
                                
    withIndexDo: aBlock = ( 1 to: self length do: 
    						[:i | aBlock value: i value: (self at: i)])
	
	
	keysAndValuesDo: aBlock = (^self withIndexDo: aBlock)    	    
    
    from: start to: end do: block = ( | i |
        start to: end do: [:i | block value: (self at: i) ] )
    
    "Copying (inclusively)"
    copyFrom: start to: end = ( | result i |
        result := self species new: end - start + 1.
        i := 1.
        self from: start to: end do: [ :e |
            result at: i put: e.
            i := i + 1 ].
        ^result
    )
    
    copy = (^self copyFrom: 1)
    copyFrom: start = ( ^self copyFrom: start to: self length )
    
    copyWith: newElement = ( 
		"Answer a copy of the receiver that is 1 bigger than the receiver and has 
		newElement at the last element."
		| newIC |
		newIC := self species new: self length + 1.
		newIC 
			replaceFrom: 1
			to: self length
			with: self
			startingAt: 1.
		newIC at: newIC length put: newElement.
		^newIC
	)
    
    copyReplaceFrom: start to: stop with: replacementCollection = (
		"Answer a copy of the receiver satisfying the following conditions: If 
		stop is less than start, then this is an insertion; stop should be exactly 
		start-1, start = 1 means insert before the first character, start = size+1 
		means append after last character. Otherwise, this is a replacement; start 
		and stop have to be within the receiver's bounds."

		| newSequenceableCollection newSize endReplacement |
		newSize := self length - (stop - start + 1) + replacementCollection length.
		endReplacement := start - 1 + replacementCollection length.
		newSequenceableCollection := self species new: newSize.
		start > 1 ifTrue:[
			newSequenceableCollection
				replaceFrom: 1
				to: start - 1
				with: self
				startingAt: 1].
		start <= endReplacement ifTrue:[
			newSequenceableCollection
				replaceFrom: start
				to: endReplacement
				with: replacementCollection
				startingAt: 1].
		endReplacement < newSize ifTrue:[
			newSequenceableCollection
				replaceFrom: endReplacement + 1
				to: newSize
				with: self
				startingAt: stop + 1].
		^newSequenceableCollection
	)
	
    replaceFrom: start to: stop with: replacement startingAt: repStart = (
        "This destructively replaces elements from start to stop in the
        receiver starting at index, repStart, in the sequenceable collection,
        replacementCollection. Answer the receiver. No range checks are 
        performed."
        | index repOff |
        repOff := repStart - start.
        index := start - 1.
        [(index := index + 1) <= stop]
            whileTrue: [self at: index put: (replacement at: repOff + index)]
    )
    
    "Numerical"
    sum     = ( ^self inject: 0 into: [ :sub :elem | sub + elem ] )
    average = ( ^self sum / self length )
                                
    "Containment check"
    contains: element = ( self do: [ :e | e = element ifTrue: [ ^true ] ].
                          ^false )
    
    indexOf: element = (^self indexOf: element ifAbsent: [nil])
    
    indexOf: element ifAbsent: aBlock = (
      self doIndexes: [ :i | (self at: i) = element ifTrue: [ ^ i ]].
      ^ aBlock value
    )
  
    lastIndexOf: element = (
      self length downTo: 1 do: [: i | (self at: i) = element ifTrue: [ ^ i ]].
      ^ nil
    )
    
    "Collection"
    collect: aBlock = (
        | result |
        result := Array new: self length.
        self doIndexes: [ :i | result at: i put: (aBlock value: (self at: i)) ].
        ^result
    )

    inject: sub into: aBlock = ( | next |
        next := sub.
        self do: [ :e | next := aBlock value: next with: e ].
        ^next
    )
    
    reject: aBlock = (
        ^ self select: [:element | (aBlock value: element) == false ]
    )
    
    select: aBlock = (
        "TODO: fix the hard reference to Vector..."
        | newCollection |
        newCollection := Vector new: self length.
        self do: [:each | (aBlock value: each)  
                            ifTrue: [newCollection append: each]].
        ^ newCollection
    )
    
    union: aCollection = (
        | new |
        new := Set new.
        new addAll: self.
        new addAll: aCollection.
        ^ new
    )
    
    with: otherCollection do: twoArgBlock = (
		"Evaluate twoArgBlock with corresponding elements from this collection and otherCollection."
		otherCollection length = self length ifFalse: [self errorSizeMismatch].
		1 to: self length do:
			[:index |
			twoArgBlock value: (self at: index)
					value: (otherCollection at: index)]
	)

	ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock = (
		self isEmpty ifTrue: [ ^emptyBlock value ].
		^notEmptyBlock cull: self
	)
        
    "Files / Pharo Compatibility"
    asString = (
    	^self inject: '' into: [:res :elm | res + elm asString].
    )
    
    indexOfAnyOf: aCollection = (^self indexOfAnyOf: aCollection startingAt: 1)
	indexOfAnyOf: aCollection startingAt: start = (
		start to: self length do: [:index |
			(aCollection contains: (self at: index)) ifTrue: [ ^index]
		].
		^0
	)
	
	"Accessing"
    species = (^self class)
    
    "PetitParser"
    asParser = (    
		(self allSatisfy: [ :e | e isCharacter ]) ifTrue: [ 
			| charSet |
			charSet := PPCharSetPredicate on: [ :char | self contains: char ] .
	     	^ PPPredicateObjectParser on: charSet message: 'One of these charactes expected: ', self printString.
		].
		^ super asParser
	)
	
	allSatisfy: aBlock = (
		self do: [:each | (aBlock value: each) ifFalse: [^ false]].
		^ true
	)
    
    asChoiceParser = (
		^ PPChoiceParser withAll: (self collect: [ :each | each asParser ])
	)
	
	asSequenceParser = (
		^ PPSequenceParser withAll: (self collect: [ :each | each asParser ])
	) 
	
	asPetitStream = (^ PPStream on: self)
	
	reversed = (
		| size result |
		size := self length.
		result := self species new: size.
		1 to: size do: [:i | result at: i put: (self at: size - (i - 1))].
		^ result
	)
	
	
    ----------------------------
    
    "Allocation"
    new                        = ( ^self new: 0 )
    new: length                = primitive
    new: length withAll: block = ( ^((self new: length) putAll: block) )

    "Convenience"
    with: a = (
        | arr |
        arr := self new: 1.
        arr at: 1 put: a.
        ^ arr
    )
    
    with: a with: b            = (
        | arr |
        arr := self new: 2.
        arr at: 1 put: a.
        arr at: 2 put: b.
        ^ arr
    )

    with: a with: b with: c    = (
        | arr |
        arr := self new: 3.
        arr at: 1 put: a.
        arr at: 2 put: b.
        arr at: 3 put: c.
        ^ arr
    )
    
    with: a with: b with: c with: d    = (
    	| arr |
        arr := self new: 4.
        arr at: 1 put: a.
        arr at: 2 put: b.
        arr at: 3 put: c.
        arr at: 4 put: d.
        ^ arr
    )
)
