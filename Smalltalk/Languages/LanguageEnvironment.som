LanguageEnvironment = Object (
	"The name multilingualized suggests that you can use multiple language at one time.  This is true, of course, but the system still how to manage the primary language; that provides the interpretation of data going out or coming in from outside world. It also provides how to render strings, as there rendering rule could be different in one language to another, even if the code points in a string is the same.  Originally, LanguageEnvironment and its subclasses only has class side methods.  After merged with Diego's Babel work, it now has instance side methods.  Since this historical reason, the class side and instance side are not related well.  When we talk about the interface with the outside of the Squeak world, there are three different channels; the keyboard input, clipboard output and input, and filename.  On a not-to-uncommon system such as a Unix system localized to Japan, all of these three can have (and does have) different encodings.  So we need to manage them separately.  Note that the encoding in a file can be anything.  While it is nice to provide a suggested guess for this 'default system file content encoding', it is not critical.  Rendering support is limited basic L-to-R rendering so far.  But you can provide different line-wrap rule, at least."
	| id |
	
	localeID = (
		^id
	)
	
	isoCountry = (
		^self localeID isoCountry
	)
	
	isoLanguage = (
		^self localeID isoLanguage
	)
	
	leadingChar = (
		^self class leadingChar
	)
	
	localeID: anID = (
		id := anID
	)
	
	----------------------------------
	
	| ClipboardInterpreterClass Current FileNameConverter InputInterpreterClass KnownEnvironments SystemConverter |
	
	canBeGlobalVarInitial: char = (
		^ Unicode canBeGlobalVarInitial: char.
	)
	
	isCharset = (
		^ false.
	)
	
	resetKnownEnvironments = (
		"LanguageEnvironment resetKnownEnvironments"
	
		KnownEnvironments := nil
	)
	
	initKnownEnvironments = (
		"LanguageEnvironment initKnownEnvironments"
	
		| known |
		known := Dictionary new.
		self allSubclassesDo: [:subClass | 
			subClass supportedLanguages do: [:language | | env id | 
				env := subClass new.
				id := LocaleID isoString: language.
				env localeID: id.
				known at: id put: env]].
		^known
	)
	
	scanMultibyteCharactersFrom: startIndex to: stopIndex in: aWideString with: aCharacterScanner rightX: rightX font: aFont = (
		"the default for scanning multibyte characters- other more specific encodings may do something else"
		^aFont scanMultibyteCharactersFrom: startIndex to: stopIndex in: aWideString with: aCharacterScanner rightX: rightX
	)
	
	initialize = (
		"LanguageEnvironment initialize"
	
		Smalltalk addToStartUpList: LanguageEnvironment
	
	)
	
	startUp = (
		self clearDefault.
	)
	
	isLetter: char = (
		^ Unicode isLetter: char.
	)
	
	canBeNonGlobalVarInitial: char = (
		^ Unicode canBeNonGlobalVarInitial: char.
	)
	
	systemConverterClass = (
		self subclassResponsibility.
		^ Latin1TextConverter.
	)
	
	clearDefault = (
		SystemConverter := nil.
		FileNameConverter := nil.
	)
	
	fileNameConverterClass = (
		^UTF8TextConverter
	)
	
	currentPlatform = (
		^Latin1Environment new.
		"^ Locale currentPlatform languageEnvironment."
	)
	
	isUppercase: char = (
		^ Unicode isUppercase: char.
	)
	
	isBreakableAt: index in: text = (
		| char |
		char := text at: index.
		char = Character space ifTrue: [^ true].
		char = Character cr ifTrue: [^ true].
		^ false.
	)
	
	isDigit: char = (
		^ Unicode isDigit: char.
	)
	
	leadingChar = (
		self subclassResponsibility.
		^ 0.
	)
	
	defaultFileNameConverter = (
		FileNameConverter
			ifNil: [FileNameConverter := self currentPlatform class fileNameConverterClass new].
		^ FileNameConverter
	)
	
	localeID: localeID = (
		self knownEnvironments at: localeID ifPresent: [:value | ^value].
		^self knownEnvironments
			at: (LocaleID isoLanguage: localeID isoLanguage)
			ifAbsent: [self localeID: (LocaleID isoLanguage: 'en')]
	)
	
	isLowercase: char = (
		^ Unicode isLowercase: char.
	)
	
	supportedLanguages = (
		"Return the languages that this class supports. 
		Any translations for those languages will use this class as their environment."
		self subclassResponsibility
	)
	
	localeChanged = (
		self startUp
	)
	
	digitValueOf: char = (
		"Answer 0-9 if the receiver is '0'-'9', 10-35 if it is 'A'-'Z', and < 0
		otherwise. This is used to parse literal numbers of radix 2-36."
	
		^ Unicode digitValueOf: char.
	)
	
	scanSelector = (
		^ #scanMultiCharactersFrom:to:in:rightX:stopConditions:kern:
	)
	
	defaultSystemConverter = (
		SystemConverter
			ifNil: [ SystemConverter := self currentPlatform class systemConverterClass new ].
		^ SystemConverter
	)
	
	knownEnvironments = (
		"LanguageEnvironment knownEnvironments"
		"KnownEnvironments := nil"
	
		^KnownEnvironments ifNil: [KnownEnvironments := self initKnownEnvironments]
	)
)