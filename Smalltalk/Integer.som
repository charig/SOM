"

$Id: Integer.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Integer = (
    "Arithmetic"
    + argument  = primitive
    - argument  = primitive
    * argument  = primitive
    / argument  = primitive
    // argument = primitive
    % argument  = primitive "modulo with sign of divisor"
    rem: argument=primitive "modulo with sign of dividend"
    & argument  = primitive
    << argument = primitive
    >>> argument= primitive
    bitXor: argument = primitive
    abs         = ( ^(self < 0) ifTrue: (0 - self) ifFalse: self )
    sqrt        = primitive
    negated     = ( ^0 - self )
    asInteger	= (^self)
    
    exp: aNumber = (
    	| value |
    	aNumber = 0 ifTrue: [^1].
    	value := self.
    	1 to: aNumber abs - 1 do: [:i | value := value * self].
    	^aNumber negative ifTrue: [1 // value] ifFalse: [value]
    )
    
    "Random numbers"
    atRandom = primitive
    
    "Comparing"
    =  argument = primitive
    ~= argument = (^ (self = argument) not )
    <  argument = primitive
    >  argument = ( ^(self >= argument) and: [ self <> argument ] )
    >= argument = ( ^(self < argument) not )
    <= argument = ( ^(self < argument) or: [ self = argument ] )
    positive 	= (^self > 0)
    negative    = ( ^self < 0 )
    isInteger 	= (^true)
    between: a and: b = ( ^(self >= a) and: [ self <= b ] )
    
    "Converting"
    asString    = primitive
    printOn: aStream = (aStream nextPutAll: self asString)
    
    as32BitSignedValue   = primitive " returns an int, with the value that a signed 32-bit integer would have"
    as32BitUnsignedValue = primitive " returns an int, with the value that a unsigned 32-bit integer would have"
    hashcode    = ( ^self )
    
    "Iterating"
    to: limit do: block = (
        self to: limit by: 1 do: block
    )
    
    to: limit do: block separatedBy: separatorBlock = (
        self to: limit by: 1 do: block separatedBy: separatorBlock
    )
    
    to: limit by: step do: block = (
        | i |
        i := self.
        step < 0 ifTrue:[
	        	[ i >= limit] whileTrue: [ block value: i. i := i - step]
	        ] ifFalse: [  
	        	[ i <= limit ] whileTrue: [ block value: i. i := i + step ]
	        ]
    )
    
    to: limit by: step do: block separatedBy: separatorBlock = (
        | i |
        i := self.
        [ i <= limit ] whileTrue: [ 
        	i = 1 ifFalse: [separatorBlock value].
        	block value: i. 
        	i := i + step 
        ]
    )
    
    downTo: limit do: block = (
        self downTo: limit by: 1 do: block
    )
    
    downTo: limit by: step do: block = (
        | i |
        i := self.
        [ i >= limit ] whileTrue: [ block value: i. i := i - step ]
    )
    
    "More Iterations"
    timesRepeat: block = (
        1 to: self do: [ :i | block value ]
    )
    
    "Range Creation"
    to: upper = (
        | range |
        range := Array new: upper - self + 1.
        self to: upper do: [ :i | range at: i put: i ].
        ^range
    )

    max: otherInt = (
        (self < otherInt) ifTrue: [^otherInt] ifFalse: [^self].
    )
    
    min: otherInt = (
        (self > otherInt) ifTrue: [^otherInt] ifFalse: [^self].
    )
    
    "Delegation Proxies"
    proxyClass = (^IntegerProxy)
    
	"Readonly"
	readOnly = (^self)
	readOnlyEnvInObj = (^self)
	
	"Petit Parser"
	isZero = (^self = 0)
	raisedToInteger: anInteger = (^self exp: anInteger)
	
    ----
    
    fromString: aString = primitive
    
    maxVal = (^2147483647 "Max java integer???")
    
)
