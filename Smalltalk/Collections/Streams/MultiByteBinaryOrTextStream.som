MultiByteBinaryOrTextStream = ReadWriteStream (
	"It is similar to MultiByteFileStream, but works on in memory stream."
	| isBinary converter |
	
	basicNext: anInteger putAll: aCollection startingAt: startIndex = (
		
		^super next: anInteger putAll: aCollection startingAt: startIndex
	)
	
	setConverterForCode = (
	
		| current |
		current := converter saveStateOf: self.
		self position: 0.
		self binary.
		((self next: 3) =  #[239 187 191]) ifTrue: [
			self converter: UTF8TextConverter new
		] ifFalse: [
			self converter: MacRomanTextConverter new.
		].
		converter restoreStateOf: self with: current.
		self text.
	
	)
	
	basicNext: anInteger = (
	
		^ super next: anInteger.
	
	)
	
	binary = (
		isBinary := true
	
	)
	
	basicNextPut: char = (
	
		^ super nextPut: char.
	
	)
	
	converter: aConverter = (
	
		converter := aConverter.
	
	)
	
	converter = (
	
		converter ifNil: [converter := self class defaultConverter].
		^ converter
	
	)
	
	next = (
	
		| n |
		n := self converter nextFromStream: self.
		n ifNil: [^ nil].
		isBinary and: [n isCharacter ifTrue: [^ n asciiValue]].
		^ n.
	
	)
	
	isBinary = (
		^ isBinary
	)
	
	peekFor: item = (
	
	
		| next state |
		"self atEnd ifTrue: [^ false]. -- SFStream will give nil"
		state := converter saveStateOf: self.
		(next := self next) == nil ifTrue: [^ false].
		item = next ifTrue: [^ true].
		converter restoreStateOf: self with: state.
		^ false.
	
	)
	
	text = (
		isBinary := false
	
	)
	
	skipSeparators = (
	
		[self atEnd] whileFalse: [
			self basicNext isSeparator ifFalse: [
				^ self position: self position - 1]]
	
	
	)
	
	skipSeparatorsAndPeekNext = (
	
		"A special function to make nextChunk fast"
		| peek pos |
		[self atEnd] whileFalse: [
			pos := self position.
			(peek := self next) isSeparator ifFalse: [
				self position: pos.
				^ peek.
			].
		].
	
	)
	
	basicPosition: pos = (
	
		^ self position: pos.
	
	)
	
	nextPutAll: aCollection = (
		^ self isBinary
			ifTrue: [ super nextPutAll: aCollection ]
			ifFalse: [ aCollection do: [ :each | self nextPut: each ] ]
	)
	
	nextDelimited: terminator = (
	
		| out ch pos |
		out := (String new: 1000) writeStream.
		self atEnd ifTrue: [^ ''].
		pos := self position.
		self next = terminator ifFalse: [
			"absorb initial terminator"
			self position: pos.
		].
		[(ch := self next) == nil] whileFalse: [
			(ch = terminator) ifTrue: [
				self peek = terminator ifTrue: [
					self next.  "skip doubled terminator"
				] ifFalse: [
					^ out contents  "terminator is not doubled; we're done!"
				].
			].
			out nextPut: ch.
		].
		^ out contents.
	
	)
	
	ascii = (
		isBinary := false
	
	)
	
	basicNextPutAll: aString = (
	
		^ super nextPutAll: aString.
	
	)
	
	setEncoderForSourceCodeNamed: streamName = (
	
		| l |
		l := streamName asLowercase.
		((l endsWith: 'cs') or: [
			(l endsWith: 'st') or: [
				(l endsWith: ('st.gz')) or: [
					(l endsWith: ('st.gz'))]]]) ifTrue: [
						self converter: MacRomanTextConverter new.
						^ self.
		].
		self converter: UTF8TextConverter new.
	
	)
	
	basicPeek = (
	
		^ super peek
	
	)
	
	peek = (
		"Answer what would be returned if the message next were sent to the receiver. If the receiver is at the end, answer nil.  "
	
		| next pos |
		self atEnd ifTrue: [^ nil].
		pos := self position.
		next := self next.
		self position: pos.
		^ next.
	
	
	)
	
	basicNext: n into: aString = (
	
		^ self next: n into: aString.
	
	)
	
	nextPut: aCharacter = (
		^ aCharacter isInteger 
			ifTrue: [ super nextPut: aCharacter asCharacter ]
			ifFalse: [ self converter nextPut: aCharacter toStream: self ]
	)
	
	setFileTypeToObject = (
		"do nothing.  We don't have a file type"
	)
	
	reset = (
	
		super reset.
		isBinary ifNil: [isBinary := false].
		collection class == ByteArray ifTrue: ["Store as String and convert as needed."
			collection := collection asString.
			isBinary := true].
	
		self converter. "ensure that we have a converter."
	)
	
	next: anInteger = (
	
	
		| multiString |
		self isBinary ifTrue: [^ (super next: anInteger) asByteArray].
		multiString := WideString new: anInteger.
		1 to: anInteger do: [:index |
			| character |
			(character := self next) ifNotNil: [
				multiString at: index put: character
			] ifNil: [
				multiString := multiString copyFrom: 1 to: index - 1.
				^ multiString
			]
		].
		^ multiString.
	
	)
	
	padToEndWith: aChar = (
		"We don't have pages, so we are at the end, and don't need to pad."
	)
	
	basicNext = (
		| nextChar |
	
		^ isBinary
			ifTrue: [super next]
			ifFalse: [
				(nextChar := super next)
					ifNotNil: [nextChar asCharacter]].
	)
	
	nextMatchAll: aColl = (
	
	    | save |
	    save := converter saveStateOf: self.
	    aColl do: [:each |
	       (self next) = each ifFalse: [
	            converter restoreStateOf: self with: save.
	            ^ false.
			].
		].
	    ^ true.
	
	)
	
	basicPosition = (
	
		^ self position.
	
	)
	
	basicNextInto: aString = (
	
		^ self nextInto: aString.
	
	)
	
	upTo: delim = (
	
	
		| out ch |
		out := (String new: 1000) writeStream.
		self atEnd ifTrue: [^ ''].
		[(ch := self next) isNil] whileFalse: [
			(ch = delim) ifTrue: [
				^ out contents  "terminator is not doubled; we're done!"
			].
			out nextPut: ch.
		].
		^ out contents.
	
	)
	
	asBinaryOrTextStream = (
	
		^ self
	
	)
	
	upToEnd = (
	
		| newStream element newCollection |
		newCollection := self isBinary
					ifTrue: [ByteArray new: 100]
					ifFalse: [String new: 100].
		newStream := newCollection writeStream.
		[(element := self next) notNil]
			whileTrue: [newStream nextPut: element].
		^ newStream contents
	
	)
	
	next: anInteger putAll: aCollection startingAt: startIndex = (
	
	
	        (self isBinary or: [ aCollection class == ByteArray ]) ifTrue: [
	                ^super next: anInteger putAll: aCollection startingAt: startIndex ].
	        ^self converter next: anInteger putAll: aCollection startingAt: startIndex toStream: self
	)
	
	contents = (
	
		| ret state |
		state := converter saveStateOf: self.
		ret := self upToEnd.
		converter restoreStateOf: self with: state.
		^ ret.
	
	)
	
	----------------------------------
	
	on: aCollection encoding: encodingName = (
	
		| aTextConverter |
		encodingName 
			ifNil: [aTextConverter := TextConverter default]
			ifNotNil: [aTextConverter := TextConverter newForEncoding: encodingName].
		^ (self on: aCollection)
			converter: aTextConverter
	)
	
	with: aCollection encoding: encodingName = (
	
		| aTextConverter |
		encodingName 
			ifNil: [aTextConverter := TextConverter default]
			ifNotNil: [aTextConverter := TextConverter newForEncoding: encodingName].
		^ (self with: aCollection)
			converter: aTextConverter
	)
	
	defaultConverter = (
		^ Latin1TextConverter new.
	
	)
)