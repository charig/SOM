Generator = Stream (
	"A Generator transforms callback interfaces into stream interfaces. When a producer algorithm provide results as callbacks (blocks) and a consumer algorithm expects streamable input, a Generator transforms one into the other. See class-side examples.Instance Variables	block:		<BlockClosure> The block associated with the generator.	continue:	<MethodContext>	The continuation to return to.	home:		<MethodContext>	The home (root) context of the activated block	next:		<Object>		The next object to return from the Generator."
	| block next continue home |
	
	size = (
		"A generator does not know its size."
	
		^ self shouldNotImplement
	)
	
	close = (
		"Close the receiving generator and unwind its ensure-blocks."
	
		continue ifNotNil:[continue unwindTo: home].
		continue := block := next := nil
	)
	
	atEnd = (
		"Answer whether the receiver can access any more objects."
	
		^ continue isNil
	)
	
	nextPut: anObject = (
		"Add anObject into the generator. A synonym to #yield: and value:."
	
		| previous |
		previous := next.
		next := anObject.
		continue := thisContext swapSender: continue.
		^ previous
	)
	
	next = (
		"Generate and answer the next object in the receiver."
	
		^ self atEnd ifFalse: [
			home swapSender: thisContext sender.
			continue := thisContext swapSender: continue
		]
	)
	
	yield: anObject = (
	
		"Yield the next value to the consumer of the generator.
		A synonym for #nextPut:"
		^ self nextPut: anObject
	)
	
	reset = (
		"Reset the generator, i.e., start it over"
		continue ifNotNil:[continue unwindTo: home].
		next := nil.
		continue := thisContext.
		self fork
	)
	
	fork = (
		| result |
		home := thisContext.
		block reentrant value: self.
		thisContext swapSender: continue.
		result := next.
		continue := next := home := nil.
		^ result
	)
	
	value: anObject = (
	
		"Allows passing generators as arguments to methods expecting blocks.
		A synonym for #yield: / #nextPut:."
		^ self nextPut: anObject
	)
	
	printOn: aStream = (
		aStream nextPutAll: self class name; nextPutAll: ' on: '; print: block
	)
	
	initializeOn: aBlock = (
		block := aBlock.
		self reset
	)
	
	contents = (
		"Answer the contents of this generator. Do not call this method on infinite generators."
	
		| stream |
		stream := (Array new: 10) writeStream.
		[ self atEnd ]
			whileFalse: [ stream nextPut: self next ].
		^ stream contents
	)
	
	peek = (
		"Answer the upcoming object of the receiver."
	
		^ next
	)
	
	----------------------------------
	
	on: aBlock = (
		^ self basicNew initializeOn: aBlock
	)
	
	examplePrimes = (
		| generator |
		Transcript open.
		generator := Generator on: [:g| Integer primesUpTo: 100 do:[:prime| g yield: prime]].
		[generator atEnd] whileFalse:[Transcript show: generator next; cr].
	)
)