Stream = Object (
	"I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my 'contents'."
	
	
	basicNext: anAmount putAll: aCollection startingAt: startIndex = (
	
		^ self next: anAmount putAll: aCollection startingAt: startIndex.
	
	)
	
	next: anInteger put: anObject = (
	
		"Make anObject be the next anInteger number of objects accessible by the 
		receiver. Answer anObject."
	
		anInteger timesRepeat: [self nextPut: anObject].
		^anObject
	)
	
	write: encodedObject = (
		^encodedObject putOn: self.
	)
	
	close = (
		"Presumably sets the status of the receiver to be closed. This message does 
		nothing at this level, but is included for FileStream compatibility."
	
		^self 
	)
	
	binary = (
		"do nothing"
		^self 
	)
	
	print: anObject = (
		"Have anObject print itself on the receiver."
	
		anObject printOn: self
	)
	
	next = (
		"Answer the next object accessible by the receiver."
	
		self subclassResponsibility 
	)
	
	basicNextPut: anObject = (
		^ self nextPut: anObject
	)
	
	isBinary = (
		^false
	)
	
	isMessageStream = (
		self deprecated: 'There was no sender of this method in Pharo 4.0'.
		^ false
	)
	
	<< items = (
		items putOn: self.
		^ self
	)
	
	isStream = (
		"Return true if the receiver responds to the stream protocol"
		^true
	)
	
	nextPutAll: aCollection = (
		"Append the elements of aCollection to the sequence of objects accessible 
		by the receiver. Answer aCollection."
		
		aCollection do: [:v | self nextPut: v].
		^aCollection
	)
	
	basicNextPutAll: aCollection = (
		^ self nextPutAll: aCollection.
	
	)
	
	openReadOnly = (
		^self
	)
	
	nextMatchFor: anObject = (
		"Gobble the next object and answer whether it is equal to the argument, 
		anObject."
	
		^anObject = self next
	)
	
	localName = (
		^'a stream'
	)
	
	atEnd = (
		"Answer whether the receiver can access any more objects."
	
		self subclassResponsibility 
	)
	
	nextPut: anObject = (
		"Insert the argument, anObject, as the next object accessible by the 
		receiver. Answer anObject."
		
		self subclassResponsibility 
	)
	
	nextBytesPutAll: aCollection = (
		"Append the bytes of aCollection to the sequence of bytes accessible 
		by the receiver. Answer aCollection."
	
		^self nextPutAll: aCollection
	)
	
	next: anInteger = (
		"Answer the next anInteger number of objects accessible by the receiver."
		
		| aCollection |
		aCollection := OrderedCollection new.
		anInteger timesRepeat: [aCollection addLast: self next].
		^aCollection
	)
	
	basicNext = (
		^ self next.
	)
	
	nextMatchAll: aColl = (
	    "Answer true if next N objects are the ones in aColl,
	     else false.  Advance stream of true, leave as was if false."
	    | save |
	    save := self position.
	    aColl do: [:each |
	       (self next) = each ifFalse: [
	            self position: save.
	            ^ false]
	        ].
	    ^ true
	)
	
	nextWordsPutAll: aCollection = (
		"Write the argument a word-like object in big endian format on the receiver.
		May be used to write other than plain word-like objects (such as ColorArray)."
		
		(aCollection class isPointers or: [ aCollection class isWords not ])
			ifTrue: [ ^ self error: aCollection class name,' is not word-like'].
		1 to: aCollection basicSize do: [ :i |
			self nextNumber: 4 put: (aCollection basicAt: i) ].
		^ aCollection
	)
	
	do: aBlock = (
		"Evaluate aBlock for each of the objects accessible by receiver."
	
		[self atEnd]
			whileFalse: [aBlock value: self next]
	)
	
	flush = (
		"Do nothing by default" 
	)
	
	readOnly = (
		^self
	)
	
	asPetitStream = (
		^ self contents asPetitStream
	)
	
	upToEnd = (
		"answer the remaining elements in the string"
		| elements |
		elements := OrderedCollection new.
		[ self atEnd ] whileFalse: [ 
			elements add: self next ].
		^elements
	)
	
	next: anInteger putAll: aCollection startingAt: startIndex = (
		"Store the next anInteger elements from the given collection."
		(startIndex = 1 and:[anInteger = aCollection size])
			ifTrue:[^self nextPutAll: aCollection].
		^self nextPutAll: (aCollection copyFrom: startIndex to: startIndex+anInteger-1)
	)
	
	contents = (
		"Answer all of the contents of the receiver."
	
		self subclassResponsibility
	)
	
	closed = (
		^ false
	)
	
	----------------------------------
	
	new = (
		self error: 'Streams are created with on: and with:'
	)
)