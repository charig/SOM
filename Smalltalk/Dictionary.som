"

$Id: Dictionary.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Dictionary = (
    | pairs |
    size = (^pairs size)
    
    at: aKey put: aValue = (
        (self containsKey: aKey)
            ifTrue:  [ (self pairAt: aKey) value: aValue ]
            ifFalse: [ pairs add: (Pair withKey: aKey andValue: aValue) ].
        ^aValue    
    )
    
    at: aKey = (
        pairs do: [ :p | p key = aKey ifTrue: [ ^p value ] ].
        ^nil
    )
    
    at: key ifAbsent: aBlock = (
    	^((self at: key) 
			ifNil: [aBlock] 
			ifNotNil: [:value | value]) value
    )
    
    at: key ifAbsentPut: aBlock = (
		^ self at: key ifAbsent: [self at: key put: aBlock value]
	)
	    
    containsKey: aKey = (
        pairs do: [ :p | p key = aKey ifTrue: [ ^true ] ].
        ^false
    )
    
    removeKey: aKey = (self removeKey: aKey ifAbsent: [])
    removeKey: aKey ifAbsent: aBlock = (
    	| pair |
    	pair := self pairAt: aKey. 
    	pair isNil 
    		ifTrue: [aBlock value] 
    		ifFalse: [pairs remove: pair. 
    					^pair value]
    )
    
    keys   = ( ^pairs collect: [ :p | p key ] )
    keysDo: aBlock = (self keys do: aBlock)
    values = ( ^pairs collect: [ :p | p value ] )
    
    "Iteration"
    do: block = ( pairs do: block )
    
    "Private"
    pairs: aSet = ( pairs := aSet )
    pairAt: aKey = (
        pairs do: [ :p | p key = aKey ifTrue: [ ^p ] ].
        ^nil
    )
    
    "Printing"
    print = ( '{' print. pairs do: [ :p | p print ]. '}' print )
    println = ( self print. '' println )
    
    keysAndValuesDo: aBlock = (
		^self do:[:pair| aBlock value: pair key value: pair value]
  	)
  	
  	isEmpty = (^self size = 0)
 	"Petit Parser"
 	
 	postCopy = (
		"Must copy the associations, or later store will affect both the
		original and the copy"
		| copyOfPairs |
		copyOfPairs := Set new.
		pairs := pairs do: [:pair | copyOfPairs add: pair copy].
		self pairs: copyOfPairs.
	)
 	
 	----
    
    new = (
        | newDictionary |
        newDictionary := super new.
        newDictionary pairs: Set new.
        ^newDictionary
    )
)
