RBReadBeforeWrittenTester = RBProgramNodeVisitor (
	"RBReadBeforeWrittenTester is a visitor that identifies variables that may have been read before they are initialized.Instance Variables:	checkNewTemps	<Boolean>	description of checkNewTemps	read	<Collection>	description of read	scopeStack	<OrderedCollection>	description of scopeStack"
	| read checkNewTemps scopeStack |
	
	checkNewTemps: aBoolean = (
	
		checkNewTemps := aBoolean
	)
	
	initializeVars: varNames = (
	
		varNames do: [:each | self currentScope at: each put: nil]
	)
	
	visitMessageNode: aMessageNode = (
	
		((#(#whileTrue: #whileFalse: #whileTrue #whileFalse) 
			includes: aMessageNode selector) and: [aMessageNode receiver isBlock]) 
			ifTrue: [self executeTree: aMessageNode receiver body]
			ifFalse: 
				[(aMessageNode isCascaded not or: [aMessageNode isFirstCascaded]) 
					ifTrue: [self visitNode: aMessageNode receiver]].
		((#(#ifTrue:ifFalse: #ifFalse:ifTrue:) includes: aMessageNode selector) 
			and: [aMessageNode arguments allSatisfy: [:each | each isBlock]]) 
				ifTrue: [^self processIfTrueIfFalse: aMessageNode].
		aMessageNode arguments do: [:each | self visitNode: each]
	)
	
	visitSequenceNode: aSequenceNode = (
	
		self processStatementNode: aSequenceNode
	)
	
	createScope = (
		scopeStack add: (self copyDictionary: scopeStack last)
	)
	
	currentScope = (
		^scopeStack last
	)
	
	visitBlockNode: aBlockNode = (
	
		self processBlock: aBlockNode
	)
	
	processBlock: aNode = (
	
		| newScope |
		self createScope.
		self executeTree: aNode body.
		newScope := self removeScope.
		newScope keysAndValuesDo: 
				[:key :value | 
				(value == true and: [(self currentScope at: key) isNil]) 
					ifTrue: [self currentScope at: key put: value]]
	)
	
	visitVariableNode: aVariableNode = (
	
		self variableRead: aVariableNode
	)
	
	initialize = (
		super initialize.
		scopeStack := OrderedCollection with: Dictionary new.
		read := Set new.
		checkNewTemps := true
	)
	
	removeScope = (
		^scopeStack removeLast
	)
	
	read = (
		self currentScope
			keysAndValuesDo: [:key :value | value == true ifTrue: [read add: key]].
		^read
	)
	
	variableRead: aNode = (
	
		(self currentScope includesKey: aNode name) 
			ifTrue: 
				[(self currentScope at: aNode name) isNil 
					ifTrue: [self currentScope at: aNode name put: true]]
	)
	
	visitAssignmentNode: anAssignmentNode = (
	
		self visitNode: anAssignmentNode value.
		self variableWritten: anAssignmentNode
	)
	
	variableWritten: aNode = (
	
		(self currentScope includesKey: aNode variable name) 
			ifTrue: 
				[(self currentScope at: aNode variable name) isNil 
					ifTrue: [self currentScope at: aNode variable name put: false]]
	)
	
	executeTree: aParseTree = (
	
		^self visitNode: aParseTree
	)
	
	processStatementNode: aNode = (
	
		| temps |
		(checkNewTemps not or: [aNode temporaries isEmpty]) 
			ifTrue: 
				[aNode statements do: [:each | self executeTree: each].
				^self].
		self createScope.
		temps := aNode temporaries collect: [:each | each name].
		self initializeVars: temps.
		aNode statements do: [:each | self executeTree: each].
		self removeScope keysAndValuesDo: 
				[:key :value | 
				(temps includes: key) 
					ifTrue: [value == true ifTrue: [read add: key]]
					ifFalse: 
						[(self currentScope at: key) isNil 
							ifTrue: [self currentScope at: key put: value]]]
	)
	
	copyDictionary: aDictionary = (
	
		"We could send aDictionary the copy message, but that doesn't copy the associations."
	
		| newDictionary |
		newDictionary := Dictionary new: aDictionary size.
		aDictionary keysAndValuesDo: [ :key :value | newDictionary at: key put: value ].
		^ newDictionary
	)
	
	processIfTrueIfFalse: aNode = (
	
		| trueScope falseScope |
		self createScope.
		self executeTree: aNode arguments first body.
		trueScope := self removeScope.
		self createScope.
		self executeTree: aNode arguments last body.
		falseScope := self removeScope.
		self currentScope keysAndValuesDo: 
				[:key :value | 
				value isNil 
					ifTrue: 
						[(trueScope at: key) == (falseScope at: key) 
							ifTrue: [self currentScope at: key put: (trueScope at: key)]
							ifFalse: 
								[((trueScope at: key) == true or: [(falseScope at: key) == true]) 
									ifTrue: [self currentScope at: key put: true]]]]
	)
	
	----------------------------------
	
	
	variablesReadBeforeWrittenIn: aParseTree = (
	
		^(self new)
			executeTree: aParseTree;
			read
	)
	
	isVariable: aString writtenBeforeReadIn: aBRProgramNode = (
	
		^(self readBeforeWritten: (Array with: aString) in: aBRProgramNode) 
			isEmpty
	)
	
	readBeforeWritten: varNames in: aParseTree = (
	
		^(self new)
			checkNewTemps: false;
			initializeVars: varNames;
			executeTree: aParseTree;
			read
	)
	
	isVariable: aString readBeforeWrittenIn: aBRProgramNode = (
	
		^(self isVariable: aString writtenBeforeReadIn: aBRProgramNode) not
	)
)