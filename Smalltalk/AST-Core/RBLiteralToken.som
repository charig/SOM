RBLiteralToken = RBValueToken (
	"RBLiteralToken is the first-class representation of a literal token (entire literals, even literal arrays, are a single token in the ST80 grammar.).Instance Variables:	stopPosition	<Integer>	The position within the source code where the token terminates."
	| stopPosition |
	
	isMultiKeyword = (
		^false
	)
	
	isLiteralToken = (
		^true
	)
	
	storeOn: aStream = (
	
		value isSymbol 
			ifTrue: 
				[aStream nextPut: $#.
				((RBScanner isSelector: value) and: [value ~~ #'||']) 
					ifTrue: [aStream nextPutAll: value]
					ifFalse: [value asString printOn: aStream].
				^self].
		value class == Character 
			ifTrue: 
				[aStream
					nextPut: $$;
					nextPut: value.
				^self].
		value storeOn: aStream
	)
	
	length = (
		^stopPosition - self start + 1
	)
	
	isNumberLiteralToken = (
		^false
	)
	
	stop: anObject = (
	
		stopPosition := anObject
	)
	
	value: aString start: anInteger stop: stopInteger = (
	
		value := aString.
		sourcePointer := anInteger.
		stopPosition := stopInteger
	)
	
	realValue = (
		^value
	)
	
	----------------------------------
	
	
	value: anObject = (
	
		| literal |
		literal := anObject class == Array 
					ifTrue: [anObject collect: [:each | self value: each]]
					ifFalse: [anObject].
		^self 
			value: literal
			start: nil
			stop: nil
	)
	
	value: aString start: anInteger stop: stopInteger = (
	
		^(self new)
			value: aString
				start: anInteger
				stop: stopInteger;
			yourself
	)
)