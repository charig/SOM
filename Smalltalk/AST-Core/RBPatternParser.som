RBPatternParser = RBParser (
	"RBPatternParser is a subclass of RBParser that allows the extended syntax that creates matching trees. These trees can be used by the ParseTreeMatcher to search and transform source code."
	
	
	variableNodeClass = (
		^RBPatternVariableNode
	)
	
	parsePatternBlock: aClass = (
	
		| position node |
		position := currentToken start.
		self step.
		node := self parseBlockArgsInto: aClass new.
		node left: position.
		
		node body: self sequenceNodeClass new.
		(self parseStatements: false into: node body).
		
		(currentToken isSpecial and: [currentToken value = $}]) 
			ifFalse: [ ^ self parserError: '''}'' expected'].
		node right: currentToken start.
		self step.
		^node
	)
	
	parseLiteralByteArrayObject = (
		| node |
		(currentToken isIdentifier and: [currentToken isPatternVariable]) 
			ifTrue: 
				[node := self variableNodeClass identifierNamed: currentToken value at: currentToken start.
				node isLiteralNode 
					ifTrue: 
						[self step.
						^node]].
		^super parseLiteralByteArrayObject
	)
	
	parsePrimitiveObject = (
		currentToken isPatternBlock 
			ifTrue: [^self parsePatternBlock: RBPatternBlockNode].
		^super parsePrimitiveObject
	)
	
	parseUnaryMessage = (
		| node |
		node := self parsePrimitiveObject.
		self addCommentsTo: node.
		
		[currentToken isLiteralToken ifTrue: [self patchLiteralMessage].
		currentToken isPatternBlock 
			ifTrue: 
				[node := (self parsePatternBlock: RBPatternWrapperBlockNode)
							wrappedNode: node;
							yourself].
		currentToken isIdentifier] 
				whileTrue: [node := self parseUnaryMessageWith: node].
		self addCommentsTo: node.
		^node
	)
	
	patchLiteralArrayToken = (
		(currentToken isIdentifier and: [currentToken isPatternVariable]) 
			ifTrue: [^self].
		super patchLiteralArrayToken
	)
	
	parsePragmaLiteral = (
		| node |
		currentToken isPatternBlock 
			ifTrue: [ ^ self parsePatternBlock: RBPatternBlockNode ].
		(currentToken isIdentifier and: [ currentToken isPatternVariable ]) ifTrue: [
			node := self variableNodeClass identifierNamed: currentToken value at: currentToken start.
			node isLiteralNode 
				ifFalse: [ self parseError: 'Literal pattern expected' ].
			self step.
			currentToken isPatternBlock ifTrue: [
				node := (self parsePatternBlock: RBPatternWrapperBlockNode)
					wrappedNode: node;
					yourself ].
			^ node ].
		^ super parsePragmaLiteral
	)
	
	parsePrimitiveLiteral = (
		| node |
		(currentToken isIdentifier and: [currentToken isPatternVariable]) 
			ifTrue: 
				[node := self variableNodeClass identifierNamed: currentToken value at: currentToken start.
				node isLiteralNode 
					ifTrue: 
						[self step.
						^node].
				currentToken := RBLiteralToken 
							value: currentToken value asSymbol
							start: currentToken start
							stop: currentToken stop].
		^super parsePrimitiveLiteral
	)
	
	scannerClass = (
		^RBPatternScanner
	)
	
	methodNodeClass = (
		^RBPatternMethodNode
	)
	
	messageNodeClass = (
		^RBPatternMessageNode
	)
	
	parseError: aString = (
	
		self error: aString
	)
	
	pragmaNodeClass = (
		^RBPatternPragmaNode
	)
)