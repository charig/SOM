RBArrayNode = RBValueNode (
	"A RBArrayNode is an AST node for runtime arrays.
	
	Instance Variables
		left:	 <Integer | nil> position of {
		periods: <SequenceableCollection of: Integer> the positions of all the periods that separate the statements
		right: <Integer | nil> position of }
		statements: <SequenceableCollection of: RBStatementNode> the statement nodes"
	| left right statements periods |
	
	isArray = (^ true)
	periods: anArray = (periods := anArray)
	stopWithoutParentheses = (^ right)
	left: anInteger = (left := anInteger)
	needsParenthesis = (^ false)
	statementComments = (^self comments)
	right: anInteger = (right := anInteger)
	left = (^ left)
	children = (^ self statements)
	isFaulty = (^self statements anySatisfy: #isFaulty)
	right = (^ right)
	statements = (^statements)
	references: aVariableName = (^ statements anySatisfy: [ :each | each references: aVariableName ])
	acceptVisitor: aProgramNodeVisitor = (^ aProgramNodeVisitor visitArrayNode: self)
	startWithoutParentheses = ( ^ left)
	periods = (^ periods)
	hash = (^ self hashForCollection: self statements)
	copyInContext: aDictionary = (^ self class statements: (self copyList: self statements inContext: aDictionary))
	precedence = (^0)
	uses: aNode = (^ (statements anySatisfy: [ :each | each == aNode ]) or: [ self isUsed ])
	
	addNodesFirst: aCollection = (
		statements := statements asOrderedCollection.
		statements asOrderedCollection addAllFirst: aCollection.
		aCollection do: [ :each | each parent: self ].
		^ aCollection
	)
	
	addNodes: aCollection before: anotherNode = (
		aCollection do: [ :each | self addNode: each before: anotherNode ].
		^ aCollection
	)
	
	initialize = (
		super initialize.
		statements := periods := #()
	)
	
	addNodeFirst: aNode = (
		statements := statements asOrderedCollection.
		statements addFirst: aNode.
		aNode parent: self.
		^ aNode
	)
	
	statements: statements0 = (
		statements := statements0.
		statements do: [:statement | statement parent: self]
	)
	
	indexOfNode: aNode = (
		"Try to find the node by first looking for ==, and then for ="
		^ (1 to: statements size) 
			detect: [ :each | (statements at: each) == aNode ]
			ifNone: [ statements indexOf: aNode ]
	)
	
	lastIsReturn = (
		statements isEmpty ifTrue:[ ^false ].
		^statements last lastIsReturn
	)
	
	replaceNode: oldNode  withNode: newNode = (
		self statements: (statements collect: [ :statement |
			statement == oldNode 
				ifTrue: [ newNode ]
				ifFalse: [ statement ] ])
	)
	
	addNode: aNode before: anotherNode = (
		| index |
		aNode isReturn 
			ifTrue: [ self error: 'Cannot add return node' ].
		index := self indexOfNode: anotherNode.
		index = 0 ifTrue: [ ^ self addNode: aNode ].
		statements := statements asOrderedCollection.
		statements add: aNode beforeIndex: index.
		aNode parent: self.
		^ aNode
	)
	
	addNodes: aCollection = (
		statements := statements asOrderedCollection.
		statements addAll: aCollection.
		aCollection do: [ :each | each parent: self ].
		^ aCollection
	)
	
	addNode: aNode = (
		statements := statements asOrderedCollection.
		statements add: aNode.
		aNode parent: self.
		^ aNode
	)
	
	equalTo: anObject withMapping: aDictionary = (
		self class = anObject class 
			ifFalse: [ ^ false ].
		self statements size = anObject statements size 
			ifFalse: [ ^ false ].
		self statements with: anObject statements do: [ :first :second |
			(first equalTo: second withMapping: aDictionary)
				ifFalse: [ ^ false ] ].
		aDictionary values asSet size = aDictionary size 
			ifFalse: [ ^ false ].
		^ true
	)
	
	= anObject = (  
		self == anObject ifTrue: [ ^ true ].
		self class = anObject class ifFalse: [ ^ false ].
		self statements size = anObject statements size ifFalse: [ ^ false ].
		self statements with: anObject statements do: [ :first :second | first = second ifFalse: [ ^ false ] ].
		^ true
	)
	
	postCopy = (
		super postCopy.
		self statements: (self statements collect: [ :each | each copy ])
	)
	
	match: aNode inContext: aDictionary = (
		aNode class = self class ifFalse: [ ^ false ].
		^ self matchList: statements against: aNode statements inContext: aDictionary
	)
	
	----------------------------------
	
	statements: statements = (^ self new statements: statements)
)