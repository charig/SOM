RBValueNode = RBProgramNode (
	"RBValueNode is an abstract class that represents a node that returns some value.

Subclasses must implement the following messages:
	accessing
		startWithoutParentheses
		stopWithoutParentheses
	testing
		needsParenthesis

Instance Variables:
	parentheses	<SequenceableCollection of: Inteval>	the positions of the parethesis around this node. We need a collection of intervals for stupid code such as '((3 + 4))' that has multiple parethesis around the same expression.

"
	| parentheses |
	
	hasParentheses = (^self parentheses notEmpty)
	isValue = (^true)
	stopWithoutParentheses = (^self subclassResponsibility)
	parentheses = (^parentheses ifNil: [#()] ifNotNil: [parentheses])
	needsParenthesis = (^self subclassResponsibility)
	asSequenceNode = (^RBSequenceNode statements: (Array with: self))
	stop = (^ parentheses ifNil: [ self stopWithoutParentheses ] ifNotNil: [ parentheses last last ])
	startWithoutParentheses = (^self subclassResponsibility)
	
	containedBy: anInterval = (
		^anInterval first <= self startWithoutParentheses 
			and: [anInterval last >= self stopWithoutParentheses]
	)
	
	start = (
		^ parentheses ifNil: 
			[ self startWithoutParentheses ] 
		ifNotNil: 
			[ parentheses last first ]
	)
	
	addParenthesis: anInterval = (
		parentheses ifNil: [parentheses := OrderedCollection new: 1].
		parentheses add: anInterval
	)
)
