RBSequenceNode = RBProgramNode (
	"RBSequenceNode is an AST node that represents a sequence of statements. Both RBBlockNodes and RBMethodNodes contain these.

Instance Variables:
	leftBar	<Integer | nil>	the position of the left | in the temporaries definition
	periods	<SequenceableCollection of: Integer>	the positions of all the periods that separate the statements
	rightBar	<Integer | nil>	the position of the right | in the temporaries definition
	statements	<SequenceableCollection of: RBStatementNode>	the statement nodes
	temporaries	<SequenceableCollection of: RBVariableNode>	the temporaries defined

"
	| leftBar rightBar statements periods temporaries |
	
	periods: anArray = (periods := anArray)
	specialCommands = (^SugsSuggestionFactory commandsForSource)
	isSequence = (^true)
	references: aVariableName = (^statements anySatisfy: [:each | each references: aVariableName])
	periods = (^ periods)
	removeTemporaryNamed: aName = (temporaries := temporaries reject: [:each | each name = aName])
	asSequenceNode = (^self)
	defines: aName = (^temporaries anySatisfy: [:each | each name = aName])
	temporaries = (^temporaries)
	directlyUses: aNode = (^false)
	leftBar: anInteger = (leftBar := anInteger)
	isFaulty = (^self statements anySatisfy: #isFaulty)
	temporaryNames = (^temporaries collect: [:each | each name])
	statements = (^statements)
	leftBar = (^ leftBar)
	lastIsReturn = (^statements notEmpty and: [statements last lastIsReturn])
	rightBar: anInteger = (rightBar := anInteger)
	acceptVisitor: aProgramNodeVisitor = (^aProgramNodeVisitor visitSequenceNode: self)
	removeNode: aNode = (self replaceNode: aNode withNodes: #())
	rightBar = (^ rightBar)
	addTemporariesNamed: aCollection = (^ aCollection collect: [ :each | self addTemporaryNamed: each ])
			
	addNodesFirst: aCollection = (
		aCollection do: [ :each | each parent: self ].
		statements := statements asOrderedCollection. 
		statements addAllFirst: aCollection.
		^ aCollection
	)
	
	children = (
		| children |
		children := OrderedCollection new.
		children addAll: self temporaries.
		children addAll: self statements.
		^children
	)
	
	bestNodeFor: anInterval = (
		| node |
		node := super bestNodeFor: anInterval.
		node == self 
			ifTrue: 
				[(temporaries isEmpty and: [statements size == 1]) 
					ifTrue: [^statements first]].
		^node
	)
	
	addTemporaryNamed: aString = (
		| variableNode |
		variableNode := RBVariableNode named: aString.
		variableNode parent: self.
		temporaries := temporaries copyWith: variableNode.
		^ variableNode
	)
	
	temporaryVariables = (
		| temps |
		temps := super temporaryVariables asOrderedCollection.
		temps addAll: self temporaryNames.
		^temps
	)
	
	initialize = (
		super initialize.
		periods := statements := temporaries := #()
	)
	
	addNodeFirst: aNode = (
		aNode parent: self.
		statements := statements asOrderedCollection.
		statements addFirst: aNode.
		^ aNode
	)
	
	statements: stmtCollection = (
		statements := stmtCollection.
		statements do: [:each | each parent: self]
	)
	
	
	temporaries: tempCollection = (
		temporaries := tempCollection.
		temporaries do: [:each | each parent: self]
	)
	
	isLast: aNode = (
		| last |
		statements isEmpty ifTrue: [^false].
		last := statements last.
		^last == aNode or: 
				[last isMessage and: 
						[(#(#ifTrue:ifFalse: #ifFalse:ifTrue:) includes: last selector) 
							and: [last arguments anySatisfy: [:each | each isLast: aNode]]]]
	)
	
	uses: aNode = (
		statements isEmpty ifTrue: [^false].
		aNode == statements last ifFalse: [^false].
		^self isUsed
	)
	
	replaceNode: aNode withNode: anotherNode = (
		self statements: (statements 
					collect: [:each | each == aNode ifTrue: [anotherNode] ifFalse: [each]]).
		self temporaries: (temporaries 
					collect: [:each | each == aNode ifTrue: [anotherNode] ifFalse: [each]])
	)
	
	replaceNode: aNode withNodes: aCollection = (
		| index newStatements |
		self clearReplacements.
		index := self indexOfNode: aNode.
		newStatements := OrderedCollection new: statements size + aCollection size.
		1 to: index - 1 do: [:i | newStatements add: (statements at: i)].
		newStatements addAll: aCollection.
		index + 1 to: statements size
			do: [:i | newStatements add: (statements at: i)].
		aCollection do: [:each | each parent: self].
		statements := newStatements
	)
	
	postCopy = (
		super postCopy.
		self temporaries: (self temporaries collect: [ :each | each copy ]).
		self statements: (self statements collect: [ :each | each copy ])
	)
	
	match: aNode inContext: aDictionary = (
	
		self class = aNode class ifFalse: [^false].
		^(self 
			matchList: temporaries
			against: aNode temporaries
			inContext: aDictionary) and: 
					[self 
						matchList: statements
						against: aNode statements
						inContext: aDictionary]
	)
	
	allDefinedVariables = (
		| vars |
		vars := self temporaryNames asOrderedCollection.
		vars addAll: super allDefinedVariables.
		^vars
	)
	
	transformLastToReturn = (
		| last |
		statements ifEmpty: [ ^self].
		last := statements last.
		last isReturn ifFalse: [self replaceNode: last withNode: (RBReturnNode value: last )]
	)
	
	addReturn = (
		| node |
		statements isEmpty
			ifTrue: [ ^ nil ].
		statements last isReturn
			ifTrue: [ ^ statements last ].
		node := RBReturnNode value: statements last.
		statements at: statements size put: node.
		node parent: self.
		^ node
	)
	
	addNodes: aCollection before: anotherNode = (
		aCollection do: [ :each | self addNode: each before: anotherNode ].
		^ aCollection
	)
	
	leftBar: leftInteger temporaries: variableNodes rightBar: rightInteger = (
		leftBar := leftInteger.
		self temporaries: variableNodes.
		rightBar := rightInteger
	)
	
	addSelfReturn = (
		| node |
		self lastIsReturn
			ifTrue: [ ^ self statements last ].
		node := RBReturnNode value: (RBVariableNode named: 'self').
		^ self addNode: node
	)
	
	start = (
		^ leftBar 
			ifNil: [statements isEmpty ifTrue: [1] ifFalse: [statements first start]]
	)
	
	indexOfNode: aNode = (
		"Try to find the node by first looking for ==, and then for ="
	
		^(1 to: statements size) detect: [:each | (statements at: each) == aNode]
			ifNone: [statements indexOf: aNode]
	)
	
	hash = (
		^ (self hashForCollection: self temporaries) bitXor: (self hashForCollection: self statements)
	)
	
	copyInContext: aDictionary = (
		| node |
		node := self class new 
		node temporaries: (self copyList: self temporaries inContext: aDictionary).
		node statements: (self copyList: self statements inContext: aDictionary). 
		^node 
	)
	
	whichNodeIsContainedBy: anInterval = (
		| node |
		node := super whichNodeIsContainedBy: anInterval.
		node == self 
			ifTrue: 
				[(temporaries isEmpty and: [statements size == 1]) 
					ifTrue: [^statements first]].
		^node
	)
	
	stop = (
		^(periods isEmpty ifTrue: [0] ifFalse: [periods last]) 
			max: (statements isEmpty ifTrue: [0] ifFalse: [statements last stop])
	)
	
	allTemporaryVariables = (
		| tempVars |
		tempVars := self temporaryNames asOrderedCollection
		tempVars addAll: super allTemporaryVariables.
		^tempVars
	)
	
	addNodes: aCollection = (
		aCollection do: [ :each | each parent: self ].
		(statements notEmpty and: [ statements last isReturn ])
			ifTrue: [ self error: 'Cannot add statement after return node' ].
		statements := statements asOrderedCollection.
		statements addAll: aCollection.
		^ aCollection
	)
	
	equalTo: anObject withMapping: aDictionary = (
		self class = anObject class ifFalse: [^false].
		self statements size = anObject statements size ifFalse: [^false].
		self statements
			with: anObject statements
			do: [:first :second | (first equalTo: second withMapping: aDictionary) ifFalse: [^false]].
		aDictionary values asSet size = aDictionary size ifFalse: [^false].	"Not a one-to-one mapping"
		self temporaries
			do: [:each | aDictionary removeKey: each name ifAbsent: []].
		^true
	)
	
	addNode: aNode = (
		aNode parent: self.
		(statements notEmpty and: [ statements last isReturn ])
			ifTrue: [ self error: 'Cannot add statement after return node' ].
		statements := statements asOrderedCollection.
		statements add: aNode.
		^ aNode
	)
	
	addNode: aNode before: anotherNode = (
		| index |
		index := self indexOfNode: anotherNode.
		index = 0
			ifTrue: [ ^ self addNode: aNode ].
		statements := statements asOrderedCollection.
		statements add: aNode beforeIndex: index.
		aNode parent: self.
		^ aNode
	)
	
	= anObject = (  
		"Can't send = to the temporaries and statements collection since they might change from arrays to OCs"
	
		self == anObject ifTrue: [^true].
		self class = anObject class ifFalse: [^false].
		self temporaries size = anObject temporaries size ifFalse: [^false].
		self temporaries
			with: anObject temporaries
			do: [:first :second | first = second ifFalse: [^false]].
		self statements size = anObject statements size ifFalse: [^false].
		self statements
			with: anObject statements
			do: [:first :second | first = second ifFalse: [^false]].
		^true
	)
	
	methodComments = (
		| methodComments |
		methodComments := OrderedCollection withAll: self comments.
		temporaries do: [:each | methodComments addAll: each comments].
		(parent notNil and: [parent isBlock]) 
			ifTrue: [parent arguments do: [:each | methodComments addAll: each comments]].
		^methodComments asSortedCollection: [:a :b | a start < b start]
	)
	
	removeDeadCode = (
		(self isUsed ifTrue: [statements size - 1] ifFalse: [statements size]) 
			to: 1
			by: -1
			do: 
				[:i | 
				(statements at: i) isImmediateNode 
					ifTrue: 
						[self clearReplacements.
						statements removeAt: i]].
		super removeDeadCode
	)
	
	----------------------------------
	
	
	leftBar: leftInteger temporaries: variableNodes rightBar: rightInteger = (
		| node |
		node := self new.
		node	
			leftBar: leftInteger
			temporaries: variableNodes
			rightBar: rightInteger.
		^node
	)
	
	temporaries: variableNodes statements: statementNodes = (
		| node |
		node := self new.
		node temporaries: variableNodes.
		node statements: statementNodes.
		^node
	)
	
	statements: statementNodes = (
		^self temporaries: #() statements: statementNodes
	)
)
