RBPatternPragmaNode = RBPragmaNode (
	| isList |
	
	sentMessages = (
		^ super sentMessages
			remove: self selector ifAbsent: [ ];
			yourself
	)
	
	matchArgumentsAgainst: aNode inContext: aDictionary = (
	
		self arguments size = aNode arguments size
			ifFalse: [ ^ false ].
		(self matchSelectorAgainst: aNode inContext: aDictionary) 
			ifFalse: [ ^ false ].
		self arguments with: aNode arguments do: [ :first :second |
			(first match: second inContext: aDictionary) 
				ifFalse: [ ^ false ] ].
		^ true
	)
	
	copyInContext: aDictionary = (
	
		| keywordSelector |
		keywordSelector := self isSelectorList 
			ifTrue: [ aDictionary at: self selectorParts first ]
			ifFalse: [ ('' join: (self selectorParts collect: [ :each | aDictionary at: each ])) asSymbol ].
		^ RBPragmaNode
			selector: keywordSelector
			arguments: (self copyList: self arguments inContext: aDictionary)
	)
	
	selector: aSymbol keywordsPositions: positionList arguments: valueNodes = (
		self 
			arguments: valueNodes;
			selector: aSymbol;
			keywordsPositions: positionList.
		isList := (aSymbol keywords first value at: 2) == self listCharacter
	)
	
	isPatternNode = (
		^ true
	)
	
	matchSelectorAgainst: aNode inContext: aDictionary = (
	
		self selectorParts with: aNode selectorParts do: [ :first :second |
			| keyword |
			keyword := aDictionary
				at: first
				ifAbsentPut: [ 
					first isPatternVariable 
						ifTrue: [ second ]
						ifFalse: [ first ] ].
			keyword = second 
				ifFalse: [ ^ false ] ].
		^ true
	)
	
	match: aNode inContext: aDictionary = (
		aNode class = self matchingClass
			ifFalse: [ ^ false ].
		self isSelectorList ifTrue: [
			^ (aDictionary at: self selectorParts first ifAbsentPut: [ aNode selector ]) = aNode selector
				and: [ (aDictionary at: arguments first ifAbsentPut: [ aNode arguments ]) = aNode arguments ] ].
		^ self matchArgumentsAgainst: aNode inContext: aDictionary
	)
	
	isSelectorList = (
		^ isList
	)
	
	matchingClass = (
		^ RBPragmaNode
	)
	
	----------------------------------
	
	
	selector: aSelector keywordsPositions: positionList arguments: valueNodes = (
		^(aSelector isPatternVariable)
			ifTrue: [ super selector: aSelector keywordsPositions: positionList arguments: valueNodes ]
			ifFalse: [ RBPragmaNode selector: aSelector keywordsPositions: positionList arguments: valueNodes ]
	)
)