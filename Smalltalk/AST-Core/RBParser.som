RBParser = Object (
	"RBParser takes a source code string and generates an AST for it. This is a hand-written, recursive descent parser and has been optimized for speed. The simplest way to call this is either 'RBParser parseExpression: aString' if you want the AST for an expression, or 'RBParser parseMethod: aString' if you want to parse an entire method.Instance Variables:	currentToken	<RBToken>	The current token being processed.	emptyStatements	<Boolean>	True if empty statements are allowed. In IBM, they are, in VW they aren't.	errorBlock	<BlockClosure>	The block to evaluate on a syntax error.	nextToken	<RBToken>	The next token that will be processed. This allows one-token lookahead.	scanner	<RBScanner>	The scanner that generates a stream of tokens to parse.	source	<String>	The source code to parse	tags	<Collection of: Interval>	The source intervals of the tags appearing at the top of a method (e.g. Primitive calls)Shared Variables:	ParserType	<Symbol>	the type code we are parsing"
	| scanner currentToken nextToken errorBlock source comments pragmas |
	
	variableNodeClass = (
		^ RBVariableNode
	)
	
	parseUnaryPragma = (
		| selector |
		selector := currentToken.
		self step.
		^ self pragmaNodeClass selector: selector value asSymbol keywordsPositions: (Array with: selector start) arguments: #()
	)
	
	thisContextNodeClass = (
		^ RBThisContextNode
	)
	
	parseMethod: aString = (
		| node errorNode |
		node := self parseMethod.
		self atEnd
			ifFalse: [ 
				errorNode := self parserError: 'Unknown input at end'.
				errorNode ifNotNil: [ node statements: node statements, {errorNode }] ].
		node source: aString.
		^ node
	)
	
	parseKeywordMessage = (
		^self parseKeywordMessageWith: self parseBinaryMessage
	)
	
	parseLiteralArray = (
		| stream start stop |
		start := currentToken start.
		stream := WriteStream on: (Array new: 5).
		self step.
		[self atEnd or: [currentToken isSpecial and: [currentToken value = $)]]] 
			whileFalse: [stream nextPut: self parseLiteralArrayObject].
		(currentToken isSpecial and: [currentToken value = $)]) 
			ifFalse: [ ^ self parserError: ''')'' expected'].
		stop := currentToken stop.
		self step.
		^self literalArrayNodeClass 
			startPosition: start
			contents: stream contents
			stopPosition: stop
			isByteArray: false
	)
	
	parseStatementList: pragmaBoolean into: sequenceNode = (
	
		| statements return periods returnPosition node |
		return := false.
		statements := OrderedCollection new.
		periods := OrderedCollection new.
		self addCommentsTo: sequenceNode.
		pragmaBoolean ifTrue: [self parsePragmas].
		[currentToken isSpecial and: [currentToken value = $.]] whileTrue: 
			[periods add: currentToken start.
			self step].
		[self atEnd 
			or: [currentToken isSpecial and: ['])}' includes: currentToken value]]] 
				whileFalse: [
					return ifTrue: [ 
						(self parserError: 'End of statement list encountered') 
							ifNotNil: [ :errorNode | 
									statements add: errorNode. 
									sequenceNode statements: statements.
									sequenceNode periods: periods.
									self step.
									^sequenceNode]
						].
					(currentToken isSpecial and: [currentToken value = $^]) 
						ifTrue: 
							[returnPosition := currentToken start.
							self step.
							node := self returnNodeClass return: returnPosition
										value: self parseAssignment.
							statements add: node.
							return := true]
						ifFalse: [
							"check for pragmas"
							(currentToken isBinary and: [ currentToken value == #<])
								ifTrue: [ self parsePragma ]
								ifFalse: [
									node := self parseAssignment.
									statements add: node ]].
					(currentToken isSpecial and: [currentToken value = $.]) 
						ifTrue: 
							[periods add: currentToken start.
							self step.
							self addCommentsTo: node]
						ifFalse: [
							"check for closing pragmas"
							(currentToken isBinary and: [ currentToken value == #>])
								ifFalse: [ return := true ]
								ifTrue: [ self step ]].
					[currentToken isSpecial and: [currentToken value = $.]] whileTrue: 
						[periods add: currentToken start.
						self step]
					].
		statements notEmpty ifTrue: [self addCommentsTo: statements last].
		sequenceNode
			statements: statements;
			periods: periods.
		^sequenceNode
	)
	
	returnNodeClass = (
		^ RBReturnNode
	)
	
	initialize = (
		comments := OrderedCollection new
	)
	
	scannerClass = (
		^RBScanner
	)
	
	parseBinaryPragma = (
		| binaryToken |
		currentToken isBinary 
			ifFalse: [ ^ self parserError: 'Message pattern expected' ].
		binaryToken := currentToken.
		self step.
		^ self pragmaNodeClass
			selector: binaryToken value asSymbol
			keywordsPositions: (Array with: binaryToken start)
			arguments: (Array with: self parsePragmaLiteral)
	)
	
	parseBinaryMessage = (
		| node |
		node := self parseUnaryMessage.
		
		[currentToken isLiteralToken ifTrue: [self patchNegativeLiteral].
		currentToken isBinary] 
				whileTrue: [node := self parseBinaryMessageWith: node].
		^node
	)
	
	parsePragmas = (
		[ currentToken isBinary and: [ currentToken value = #< ] ] whileTrue: [
			self parsePragma.
			self step ]
	)
	
	extractCommentsFrom: aToken = (
	 
		aToken comments 
			collect: [:interval |
				"RBComment from: interval first to: interval last"
	 			RBComment with: (source copyFrom: (interval first + 1) to: (interval last - 1)) at: interval first]
			into: comments
	)
	
	parseAssignment = (
		"Need one token lookahead to see if we have a ':='. This method could 
		make it possible to assign the literals true, false and nil."
	
		| node position |
		(currentToken isIdentifier and: [self nextToken isAssignment]) 
			ifFalse: [^self parseCascadeMessage].
		node := self parseVariableNode.
		position := currentToken start.
		self step.
		^self assignmentNodeClass 
			variable: node
			value: self parseAssignment
			position: position
	)
	
	parseParenthesizedExpression = (
		| leftParen node |
		leftParen := currentToken start.
		self step.
		node := self parseAssignment.
		^(currentToken isSpecial and: [currentToken value = $)])
			ifTrue: 
				[node addParenthesis: (leftParen to: currentToken start).
				self step.
				node]
			ifFalse: [ self parserError: ''')'' expected']
	)
	
	parsePrimitiveObject = (
		currentToken isIdentifier ifTrue: [^self parsePrimitiveIdentifier].
		(currentToken isLiteralToken and: [currentToken isMultiKeyword not]) 
			ifTrue: [^self parsePrimitiveLiteral].
		currentToken isLiteralArrayToken
			ifTrue: 
				[^currentToken isForByteArray 
					ifTrue: [self parseLiteralByteArray]
					ifFalse: [self parseLiteralArray]].
		currentToken isSpecial
			ifTrue: 
				[currentToken value = $[ ifTrue: [^self parseBlock].
				currentToken value = $( ifTrue: [^self parseParenthesizedExpression].
				currentToken value = ${ ifTrue: [^self parseArray]].
		(currentToken isBinary and: [ currentToken value = #- ]) 
			ifTrue: [ ^self parseNegatedNumber ].
		^ self parserError: 'Variable or expression expected'
	)
	
	parseLiteralByteArrayObject = (
		(currentToken isLiteralToken and: 
				[currentToken value isInteger and: [currentToken value between: 0 and: 255]]) 
			ifFalse: [ ^ self parserError: 'Expecting 8-bit integer'].
		^self parsePrimitiveLiteral
	)
	
	parseLiteralArrayObject = (
		currentToken isSpecial 
			ifTrue: 
				[currentToken value = $( ifTrue: [^self parseLiteralArray].
				"currentToken value == $[ ifTrue: [^self parseLiteralByteArray]"].
		currentToken isLiteralArrayToken 
			ifTrue: 
				[^currentToken isForByteArray 
					ifTrue: [self parseLiteralByteArray]
					ifFalse: [self parseLiteralArray]].
		currentToken isLiteralToken ifFalse: [self patchLiteralArrayToken].
		^self parsePrimitiveLiteral
	)
	
	parseBlock = (
		| position node |
		position := currentToken start.
		self step.
		node := self blockNodeClass new. 
		self parseBlockArgsInto: node.
		node left: position.
		node body: self sequenceNodeClass new.
		(self parseStatements: false into: node body).
		
		(currentToken isSpecial and: [currentToken value = $]])
			ifFalse: [^ self parserError: ''']'' expected' translated].
		node right: currentToken start.
		self step.
		^node
	)
	
	nextToken = (
		^nextToken ifNil: [nextToken := scanner next] ifNotNil: [nextToken]
	)
	
	cascadeNodeClass = (
		^ RBCascadeNode
	)
	
	parseUnaryMessage = (
		| node |
		node := self parsePrimitiveObject.
		self addCommentsTo: node.
		[currentToken isLiteralToken ifTrue: [self patchLiteralMessage].
		currentToken isIdentifier] 
				whileTrue: [node := self parseUnaryMessageWith: node].
		self addCommentsTo: node.
		^node
	)
	
	parseMessagePattern = (
		currentToken isLiteralToken ifTrue: [self patchLiteralMessage].
		^currentToken isIdentifier 
			ifTrue: [self parseUnaryPattern]
			ifFalse: 
				[currentToken isKeyword 
					ifTrue: [self parseKeywordPattern]
					ifFalse: [self parseBinaryPattern]]
	)
	
	parseVariableNode = (
		currentToken isIdentifier 
			ifFalse: [ ^ self parserError: 'Variable name expected' translated].
		^self parsePrimitiveIdentifier
	)
	
	patchNegativeLiteral = (
		"Handle the special negative number case for binary message sends."
	
		currentToken value isNumber 
			ifFalse: [^self].
		currentToken value <= 0 ifFalse: [^self].
		currentToken value = 0 
			ifTrue: 
				[(source notNil and: 
						[source notEmpty 
							and: [(source at: (currentToken start min: source size)) = $-]]) 
					ifFalse: [^self]].
		nextToken := currentToken.
		currentToken := RBBinarySelectorToken value: #- start: nextToken start.
		nextToken value: nextToken value negated.
		(nextToken isKindOf: RBNumberLiteralToken) 
			ifTrue: 
				[nextToken source: (nextToken source copyFrom: 2 to: nextToken source size)].
		nextToken start: nextToken start + 1
	)
	
	step = (
		(currentToken notNil and: [currentToken comments notNil]) 
			ifTrue: [self extractCommentsFrom: currentToken].
		nextToken notNil 
			ifTrue: 
				[currentToken := nextToken.
				nextToken := nil]
			ifFalse: [currentToken := scanner next].
	)
	
	parseKeywordPattern = (
		| selector positions args node |
		selector := ''.
		positions := OrderedCollection new: 2.
		args := OrderedCollection new: 2.
		[currentToken isKeyword]
			whileTrue:
				[selector := selector, currentToken value.
				 positions add: currentToken start.
				self step.
				args add: self parseVariableNode].
		node := self methodNodeClass
			selector: selector asSymbol
			keywordsPositions: positions asIntegerArray
			arguments: args.
		node comments: (node comments, args last comments).
		args last comments ifNotEmpty: [ args last comments: #() ].
		^node
	)
	
	parsePrimitiveIdentifier = (
		| token node |
		token := currentToken.
		self step.
		node := self variableNodeClass identifierNamed: token value at: token start.
		self addCommentsTo: node.
		^node
	)
	
	parseArgs = (
		| args |
		args := OrderedCollection new.
		[currentToken isIdentifier] whileTrue: [args add: self parseVariableNode].
		^args
	)
	
	parseStatements: pragmaBoolean = (
		^ self parseStatements: pragmaBoolean into: self sequenceNodeClass new
	)
	
	parseKeywordPragma = (
		| selector positions arguments |
		selector := ''.
		positions := OrderedCollection new: 2.
		arguments := OrderedCollection new: 2.
		[ currentToken isKeyword ] whileTrue: [
			selector := selector, currentToken value.
			positions add: currentToken start.
			self step.
			arguments addLast: self parsePragmaLiteral ].
		^ self pragmaNodeClass
			selector: selector asSymbol
			keywordsPositions: positions asIntegerArray
			arguments: arguments.
	)
	
	selfNodeClass = (
		^ RBSelfNode
	)
	
	parseBinaryPattern = (
		| binaryToken node args |
		currentToken isBinary
			ifFalse: [ ^ self parserError: 'Message pattern expected'].
		binaryToken := currentToken.
		self step.
		args := Array with: self parseVariableNode.
		node := self methodNodeClass
			selector: binaryToken value asSymbol
			keywordsPositions: (Array with: binaryToken start)
			arguments: args.
		node comments: node comments , args last comments.
		args last comments ifNotEmpty: [ args last comments: #() ].
		^node
	)
	
	messageNodeClass = (
		^ RBMessageNode
	)
	
	parseCascadeMessage = (
		| node receiver messages semicolons |
		node := self parseKeywordMessage.
		(currentToken isSpecial 
			and: [currentToken value = $; and: [node isMessage]]) ifFalse: [^node].
		receiver := node receiver.
		messages := OrderedCollection new: 3.
		semicolons := OrderedCollection new: 3.
		messages add: node.
		[currentToken isSpecial and: [currentToken value = $;]] whileTrue: 
				[semicolons add: currentToken start.
				self step.
				messages add: (currentToken isIdentifier 
							ifTrue: [self parseUnaryMessageWith: receiver]
							ifFalse: 
								[currentToken isKeyword 
									ifTrue: [self parseKeywordMessageWith: receiver]
									ifFalse: 
										[| temp |
										currentToken isLiteralToken ifTrue: [self patchNegativeLiteral].
										currentToken isBinary ifFalse: [ ^ self parserError: 'Message expected'].
										temp := self parseBinaryMessageWith: receiver.
										temp == receiver ifTrue: [ ^ self parserError: 'Message expected'].
										temp]])].
		^self cascadeNodeClass messages: messages semicolons: semicolons
	)
	
	superNodeClass = (
		^ RBSuperNode
	)
	
	parseErrorNode: aMessageString = (
		| token sourceString |
		currentToken isError 
			ifTrue: [ ^ RBParseErrorNode errorMessage: currentToken cause value: currentToken value at: currentToken start ].
		sourceString := source copyFrom: self errorPosition to: source size.
		token := RBValueToken value: sourceString start: self errorPosition.
		^ RBParseErrorNode
			errorMessage: aMessageString value: token value at: token start
	)
	
	parseTemps = (
		| temps |
		temps := OrderedCollection new.
		[currentToken isIdentifier] whileTrue: [temps add: self parsePrimitiveIdentifier].
		^temps
	)
	
	parseNumberLiteral = (
		| token |
		token := currentToken.
		self step.
		
		^self literalValueNodeClass 
			value: token value 
			start: token start
			stop: token stop
			source: token source
		
	)
	
	arrayNodeClass = (
		^ RBArrayNode
	)
	
	sequenceNodeClass = (
		^ RBSequenceNode
	)
	
	addCommentsTo: aNode = (
		aNode comments: aNode comments , comments.
		comments := OrderedCollection new
	)
	
	assignmentNodeClass = (
		^ RBAssignmentNode
	)
	
	errorBlock: aBlock = (
	
		errorBlock := aBlock.
		scanner notNil ifTrue: [scanner errorBlock: aBlock]
	)
	
	literalArrayNodeClass = (
		^ RBLiteralArrayNode
	)
	
	parseLiteralByteArray = (
		| stream start stop |
		start := currentToken start.
		stream := WriteStream on: (Array new: 5).
		self step.
		[self atEnd or: [currentToken isSpecial and: [currentToken value = $]]]] 
			whileFalse: [stream nextPut: self parseLiteralByteArrayObject].
		(currentToken isSpecial and: [currentToken value = $]]) 
			ifFalse: [^ self parserError: ''']'' expected'].
		stop := currentToken stop.
		self step.
		^self literalArrayNodeClass 
			startPosition: start
			contents: stream contents
			stopPosition: stop
			isByteArray: true
	)
	
	literalNodeClass = (
		^ RBLiteralNode
	)
	
	basicParsePragma = (
		^ currentToken isIdentifier
			ifTrue: [ self parseUnaryPragma ]
			ifFalse: [
				currentToken isKeyword
					ifTrue: [ self parseKeywordPragma ]
					ifFalse: [ self parseBinaryPragma ] ]
	)
	
	patchLiteralArrayToken = (
		(currentToken isIdentifier and: 
				[self nextToken isAssignment 
					and: [currentToken stop + 1 = self nextToken start]]) 
			ifTrue: 
				[currentToken := RBLiteralToken 
							value: (currentToken value , ':') asSymbol
							start: currentToken start
							stop: self nextToken start.
				nextToken := RBLiteralToken 
							value: #=
							start: nextToken stop
							stop: nextToken stop.
				^self].
		currentToken isAssignment 
			ifTrue: 
				[currentToken := RBLiteralToken 
							value: #':'
							start: currentToken start
							stop: currentToken start.
				nextToken := RBLiteralToken 
							value: #=
							start: currentToken stop
							stop: currentToken stop.
				^self].
		currentToken isSpecial 
			ifTrue: 
				[currentToken := RBLiteralToken 
							value: (String with: currentToken value) asSymbol
							start: currentToken start
							stop: currentToken stop.
				^self].
		(currentToken isIdentifier and: [currentToken value includes: $.]) 
			ifTrue: 
				[currentToken := RBLiteralToken 
							value: currentToken value
							start: currentToken start
							stop: currentToken stop.
				^self].
		(currentToken isIdentifier 
			or: [currentToken isBinary or: [currentToken isKeyword]]) 
				ifFalse: [^self parserError: 'Invalid token'].
		currentToken := RBLiteralToken 
					value: currentToken value asSymbol
					start: currentToken start
					stop: currentToken stop
	)
	
	blockNodeClass = (
		^ RBBlockNode
	)
	
	parsePragma = (
		| start pragma |
		start := currentToken start.
		self step.
		pragma := self basicParsePragma.
		(currentToken isBinary and: [ currentToken value == #> ]) 
			ifFalse: [ ^ self parserError: '''>'' expected' ].
		pragma left: start; right: currentToken start.
		self addPragma: pragma.
	)
	
	parsePragmaLiteral = (
		^ self parseLiteralArrayObject
	)
	
	parseUnaryPattern = (
		| selector |
		selector := currentToken.
		self step.
		^self methodNodeClass selector: selector value asSymbol keywordsPositions: (Array with: selector start) arguments: #()
	)
	
	errorBlock = (
		^errorBlock ifNil: [[:message :position | ]] ifNotNil: [errorBlock]
	)
	
	initializeParserWith: aString = (
	
		source := aString.
		self scanner: (self scannerClass on: (ReadStream on: aString))		
	)
	
	errorPosition = (
		^currentToken ifNotNil: [ :token | token start] ifNil:[1]
	)
	
	pragmaNodeClass = (
		^ RBPragmaNode
	)
	
	patchLiteralMessage = (
		currentToken value == true 
			ifTrue: 
				[^currentToken := RBIdentifierToken value: 'true' start: currentToken start].
		currentToken value == false 
			ifTrue: 
				[^currentToken := RBIdentifierToken value: 'false' start: currentToken start].
		currentToken value == nil 
			ifTrue: 
				[^currentToken := RBIdentifierToken value: 'nil' start: currentToken start]
	)
	
	scanner: aScanner = (
	
		scanner := aScanner.
		pragmas := nil.
		self initialize.
		self step.
	)
	
	parseStatements: pragmaBoolean into: aSequenceNode = (
		| temps leftBar rightBar |
		temps := #().
		leftBar := rightBar := nil.
		currentToken isBinary 
			ifTrue: 
				[currentToken value = #| 
					ifTrue: 
						[leftBar := currentToken start.
						self step.
						temps := self parseTemps.
						(currentToken isBinary and: [currentToken value = #|]) 
							ifFalse: [ ^ self parserError: '''|'' expected'].
						rightBar := currentToken start.
						self step]
					ifFalse: 
						[currentToken value = #'||' 
							ifTrue: 
								[rightBar := (leftBar := currentToken start) + 1.
								self step]]].
		^self parseStatementList: pragmaBoolean
			into: (aSequenceNode 
					leftBar: leftBar
					temporaries: temps
					rightBar: rightBar)
	)
	
	atEnd = (
		^currentToken class == RBToken
	)
	
	parseKeywordMessageWith: node = (
	
		| args isKeyword keywordsStartPositions selector|
		args := OrderedCollection new: 3.
		keywordsStartPositions := OrderedCollection new: 3.
		selector := String new.
		
		isKeyword := false.
		[currentToken isKeyword] whileTrue: 
				[keywordsStartPositions add: currentToken start.
				selector := selector, currentToken value.
				self step.
				args add: self parseBinaryMessage.
				isKeyword := true].
		^isKeyword
			ifTrue: 
				[self messageNodeClass 
					receiver: node
					selector: selector
					keywordsPositions: keywordsStartPositions
					arguments: args]
			ifFalse: [node]
	)
	
	parseNegatedNumber = (
		(self nextToken isLiteralToken not or: [ self nextToken realValue isNumber not ])
			ifTrue: [ ^ self parserError: 'The ''-'' prefix works only for literal numbers (use #negated instead)' ].
	
		self step; step.
		^ self literalValueNodeClass 
				 	value: self nextToken realValue negated 
					start: currentToken start 
					stop: nextToken stop 
					source: currentToken value, nextToken source.
	)
	
	parserError: aString = (
	
		"Let the errorBlock try to recover from the error."
		| errorNode errorMessage errorPosition |
		errorNode := self errorBlock cull: aString cull: self errorPosition cull: self.
		errorNode ifNotNil: [ ^ errorNode ].
		currentToken isError 
			ifTrue: [ errorMessage := currentToken cause. errorPosition := currentToken location ] 
			ifFalse: [errorMessage := aString. errorPosition := currentToken start].
		SyntaxErrorNotification
						inClass: Object
						category: nil
						withCode: source
						doitFlag: false
						errorMessage: errorMessage
						location: errorPosition
	)
	
	parseLiterals: aString = (
	
		| stream |
		stream := WriteStream on: (Array new: 5).
		[self atEnd or: [currentToken isSpecial and: [currentToken value = $)]]] 
			whileFalse: [stream nextPut: self parseLiteralArrayObject].
		
		self atEnd ifFalse: [ ^ self parserError: 'Unknown input at end'].
		
		^stream contents collect: [ :each | each value ]
	)
	
	parseMethod = (
		| methodNode | 
		methodNode := self parseMessagePattern.
		self parsePragmas.
		self addCommentsTo: methodNode.
		
		methodNode body: self sequenceNodeClass new.
		(self parseStatements: false into: methodNode body).
		
		pragmas ifNotNil: [ methodNode pragmas: pragmas ].
		^methodNode
	)
	
	literalValueNodeClass = (
		^ RBLiteralValueNode
	)
	
	parsePrimitiveValueLiteral = (
		| token |
		token := currentToken.
		self step.
	
		^self literalValueNodeClass 
			value: token value 
			start: token start
			stop: token stop
		
	)
	
	parsePrimitiveLiteral = (
	
		currentToken isNumberLiteralToken
			ifTrue: [ ^ self parseNumberLiteral ]
			ifFalse: [ ^ self parsePrimitiveValueLiteral ]
	)
	
	parseExpression: aString = (
	
		| node |
		node := self parseStatements: false.
		(RBMethodNode selector: #noMethod body: node) source: aString.	"Make the sequence node have a method node as its parent"
		self atEnd ifFalse: [ ^ self parserError: 'Unknown input at end'].
		^node
	)
	
	parseUnaryMessageWith: aNode = (
	
		| selector |
		selector := currentToken.
		self step.
		^self messageNodeClass
			receiver: aNode
			selector:  selector value
			keywordsPositions: (Array with: selector start)
			arguments: #()
	)
	
	parseBlockArgsInto: node = (
	
		| verticalBar args colons |
		args := OrderedCollection new: 2.
		colons := OrderedCollection new: 2.
		verticalBar := false.
		[currentToken isSpecial and: [currentToken value = $:]] whileTrue: 
				[colons add: currentToken start.
				self step.	":"
				verticalBar := true.
				args add: self parseVariableNode].
		verticalBar 
			ifTrue: 
				[currentToken isBinary 
					ifTrue: 
						[node bar: currentToken start.
						currentToken value = #| 
							ifTrue: [self step]
							ifFalse: 
								[currentToken value = #'||' 
									ifTrue: 
										["Hack the current token to be the start 
										of temps bar"
	
										currentToken
											value: #|;
											start: currentToken start + 1]
									ifFalse: [ ^ self parserError: '''|'' expected']]]
					ifFalse: 
						[(currentToken isSpecial and: [currentToken value = $]]) 
							ifFalse: [ ^ self parserError: '''|'' expected']]].
		node
			arguments: args;
			colons: colons.
		^node
	)
	
	parseArray = (
		| position node |
		position := currentToken start.
		self step.
		node := self arrayNodeClass new.
		node left: position.
		self parseStatementList: false  into: node.
		(currentToken isSpecial and: [currentToken value = $}]) 
			ifFalse: [ ^ self parserError: 'expected }'].
		node right: currentToken start.
		self step.
		^ node
	)
	
	methodNodeClass = (
		^ RBMethodNode
	)
	
	addPragma: aPragma = (
		pragmas ifNil: [ pragmas := OrderedCollection new ].
		pragmas addLast: aPragma
	)
	
	parseBinaryMessageWith: aNode = (
	
		| binaryToken |
		binaryToken := currentToken.
		self step.
		^self messageNodeClass 
			receiver: aNode
			selector:  binaryToken value
			keywordsPositions: (Array with: binaryToken start)
			arguments: (Array with: self parseUnaryMessage)
	)
	
	----------------------------------
	
	
	errorNodeBlock = (
		^ [ :aString :position :parser| parser parseErrorNode: aString ]
	)
	
	parseRewriteExpression: aString onError: aBlock = (
	
		^RBPatternParser parseExpression: aString onError: aBlock
	)
	
	parseLiterals: aString = (
	
		| parser |
		parser := self new.
		parser initializeParserWith: aString.
		^parser parseLiterals: aString
	)
	
	parseMethodPattern: aString = (
	
		| parser |
		parser := self new.
		parser errorBlock: [:error :position | ^nil].
		parser initializeParserWith: aString.
		^parser parseMessagePattern selector
	)
	
	parseMethod: aString = (
	
		^self parseMethod: aString onError: nil
	)
	
	parseRewriteExpression: aString = (
	
		^self parseRewriteExpression: aString onError: nil
	)
	
	parseRewriteMethod: aString onError: aBlock = (
	
		^RBPatternParser parseMethod: aString onError: aBlock
	)
	
	parseExpression: aString onError: aBlock = (
	
		| node parser |
		parser := self new.
		parser errorBlock: aBlock.
		parser initializeParserWith: aString.
		node := parser parseExpression: aString.
		^(node statements size == 1 and: [node temporaries isEmpty]) 
			ifTrue: [node statements first]
			ifFalse: [node]
	)
	
	parseFaultyMethod: aString = (
	
		^self parseMethod: aString onError: self errorNodeBlock
	)
	
	parseExpression: aString = (
	
		^self parseExpression: aString onError: nil
	)
	
	parseCompiledMethod: aCompiledMethod = (
		^ self parseMethod: aCompiledMethod sourceCode
	)
	
	parseMethod: aString onError: aBlock = (
	
		| parser |
		parser := self new.
		parser errorBlock: aBlock.
		parser initializeParserWith: aString.
		^parser parseMethod: aString
	)
	
	parseRewriteMethod: aString = (
	
		^self parseRewriteMethod: aString onError: nil
	)
	
	parseFaultyExpression: aString = (
	
		^self parseExpression: aString onError: self errorNodeBlock
	)
)