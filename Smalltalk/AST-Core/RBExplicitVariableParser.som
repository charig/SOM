RBExplicitVariableParser = RBParser (
	"I am a specialized version of the RBParser that takes the specialized sublcasses of RBVariableNode into account."
	| currentVariableNodeClass currentScope |
	
	variableNodeClass = (
		^ currentVariableNodeClass ifNil: [ RBVariableNode ]
	)
	
	useVariable: aVariableNodeClass during: aBlock = (
		currentVariableNodeClass := aVariableNodeClass.
		^ aBlock ensure: [ currentVariableNodeClass := nil]
	)
	
	argumentNodeClass = (
		^ RBArgumentNode
	)
	
	parsePrimitiveIdentifier = (
		| token node |
		token := currentToken.
		self step.
		node := (self lookupVariableNodeClass: token value) identifierNamed: token value at: token start.
		self addCommentsTo: node.
		^node
	)
	
	lookupVariableNodeClass: aName = (
		| scope |
		
		currentVariableNodeClass notNil ifTrue: [ ^ currentVariableNodeClass ].
		scope := currentScope.
		[ scope isNil ]  whileFalse: [
			(scope hasTemporaryNamed: aName) ifTrue: [ ^ RBTemporaryNode ].
			(scope hasArgumentNamed: aName) ifTrue: [ ^ RBArgumentNode ].
			scope := scope scope.
		].
		
		^ RBVariableNode
	)
	
	temporaryNodeClass = (
		^ RBTemporaryNode
	)
	
	parseBlock = (
		| position node |
		position := currentToken start.
		self step.
		node := self blockNodeClass new. 
		self pushScope: node.
		
		self useVariable: RBArgumentNode during: [ self parseBlockArgsInto: node ].
		node left: position.
		
		node body: self sequenceNodeClass new.
		(self parseStatements: false into: node body).
		
		(currentToken isSpecial and: [currentToken value = $]])
			ifFalse: [  ^ self parserError: ''']'' expected'].
		node right: currentToken start.
		
		self step.
		self popScope.
		^node
	)
	
	pushScope: aNode = (
		aNode scope: currentScope.
		currentScope := aNode
	)
	
	parseMethod = (
		| methodNode | 
		
		self useVariable: RBArgumentNode during: [methodNode := self parseMessagePattern].
		
		self pushScope: methodNode.
		
		self parsePragmas.
		self addCommentsTo: methodNode.
		
		methodNode body: self sequenceNodeClass new.
		(self parseStatements: false into: methodNode body).
		
		pragmas ifNotNil: [ methodNode pragmas: pragmas ].
		^methodNode
	)
	
	popScope = (
		currentScope := currentScope scope
	)
	
	parseTemps = (
		| args |
		args := OrderedCollection new.
		self useVariable: RBTemporaryNode during: [
			[currentToken isIdentifier] whileTrue: [args add: self parseVariableNode]].
		^args
	)
)