RBLiteralNode = RBValueNode (
	"RBLiteralNode is an AST node that represents literals.Instance Variables	start: <Integer | nil> source position for the literal's beginning	stop: <Integer | nil> source position for the literal's end"
	| start stop |
	
	hash = (^self value hash)
	stopWithoutParentheses = (^stop)
	precedence = (^0)
	startWithoutParentheses = (^start)
	isLiteralNode = (^true)
	isImmediateNode = (^true)
	stop: anInteger = (stop := anInteger)
	value = (^self subclassResponsibility)
	needsParenthesis = (^false)
	
	replaceSourceWith: aNode = (
		self addReplacement: (RBStringReplacement 
					replaceFrom: self start
					to: self stop
					with: aNode formattedCode)
	)
	
	= anObject = (  
		self == anObject ifTrue: [^true].
		^self class = anObject class
	)
	
	start: anInteger = (start := anInteger)
	
	replaceSourceFrom: aNode = (
		self addReplacement: (RBStringReplacement 
					replaceFrom: aNode start
					to: aNode stop
					with: self formattedCode)
	)
	
	----------------------------------
	value: aValue = (
		^((aValue class == Array or: [aValue class == ByteArray]) 
			ifTrue: [RBLiteralArrayNode]
			ifFalse: [RBLiteralValueNode]) value: aValue
	)
)