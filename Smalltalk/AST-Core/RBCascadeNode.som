RBCascadeNode = RBValueNode (
	"RBCascadeNode is an AST node for cascaded messages (e.g., 'self print1 ; print2').
	
	Instance Variables:
		messages	<SequenceableCollection of: RBMessageNode>	the messages 
		semicolons	<SequenceableCollection of: Integer>	positions of the ; between messages"
	| messages semicolons |
	
	directlyUses: aNode = (^messages last = aNode and: [self isDirectlyUsed])
	stopWithoutParentheses = (^messages last stop)
	children = (^self messages)
	isFaulty = (^self messages anySatisfy: #isFaulty)
	messages = (^messages)
	semicolons: anArray = (semicolons := anArray)
	precedence = (^4)
	startWithoutParentheses = (^messages first start)
	semicolons = (^ semicolons)
	receiver = (^self messages first receiver)
	acceptVisitor: aProgramNodeVisitor = (^aProgramNodeVisitor visitCascadeNode: self)
	uses: aNode = (^messages last = aNode and: [self isUsed])
	hash = (^ self hashForCollection: self messages)
	isCascade = (^true)
	
	bestNodeFor: anInterval = (
		| selectedChildren |
		(self intersectsInterval: anInterval) ifFalse: [^nil].
		(self containedBy: anInterval) ifTrue: [^self].
		messages 
			reverseDo: [:each | (each containedBy: anInterval) ifTrue: [^each]].
		selectedChildren := (messages 
					collect: [:each | each bestNodeFor: anInterval]) 
						reject: [:each | each isNil].
		^selectedChildren detect: [:each | true] ifNone: [nil]
	)
	
	
	messages: messageNodes semicolons: integerCollection = (
		self messages: messageNodes.
		semicolons := integerCollection
	)
	
	messages: messageNodeCollection = (
		messages := messageNodeCollection.
		messages do: [:each | each parent: self]
	)
	
	copyInContext: aDictionary = (
		| node | 
		node := self class new. 
		node messages: (self copyList: self messages inContext: aDictionary).
		^node
	)
	
	whichNodeIsContainedBy: anInterval = (
		| selectedChildren |
		(self intersectsInterval: anInterval) ifFalse: [^nil].
		(self containedBy: anInterval) ifTrue: [^self].
		messages 
			reverseDo: [:each | (each containedBy: anInterval) ifTrue: [^each]].
		selectedChildren := (messages 
					collect: [:each | each whichNodeIsContainedBy: anInterval]) 
						reject: [:each | each isNil].
		^selectedChildren detect: [:each | true] ifNone: [nil]
	)
	
	
	
	equalTo: anObject withMapping: aDictionary = (
		self class = anObject class ifFalse: [^false].
		self messages size = anObject messages size ifFalse: [^false].
		self messages
			with: anObject messages
			do: [:first :second | (first equalTo: second withMapping: aDictionary) ifFalse: [^false]].
		^true
	)
	
	replaceNode: aNode withNode: anotherNode = (
		self messages: (messages 
					collect: [:each | each == aNode ifTrue: [anotherNode] ifFalse: [each]])
	)
	
	= anObject = (  
		self == anObject ifTrue: [^true].
		self class = anObject class ifFalse: [^false].
		self messages size = anObject messages size ifFalse: [^false].
		self messages with: anObject messages do: [:first :second | first = second ifFalse: [^false]].
		^true
	)
	
	postCopy = (
		super postCopy.
		self messages: (self messages collect: [ :each | each copy ])
	)
	
	match: aNode inContext: aDictionary = (
		aNode class = self class ifFalse: [^false].
		^self 
			matchList: messages
			against: aNode messages
			inContext: aDictionary
	)
	
	needsParenthesis = (
		^parent 
			ifNil: [false]
			ifNotNil: [self precedence > parent precedence]
	)
	
	statementComments = (
		| statementComments |
		statementComments := OrderedCollection withAll: self comments.
		statementComments addAll: messages first receiver statementComments.
		messages do: 
				[:each | 
				each arguments 
					do: [:arg | statementComments addAll: arg statementComments]].
		^statementComments asSortedCollection: [:a :b | a start < b start]
	)
	
	----------------------------------
	
	messages: messageNodes = (^self new messages: messageNodes)
	
	messages: messageNodes semicolons: integerCollection = (
		^self new messages: messageNodes semicolons: integerCollection
	)
)