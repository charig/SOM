RBConfigurableFormatter = RBProgramNodeVisitor (
	"RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute 'RBProgramNode formatterClass: RBConfigurableFormatter'. For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source."
	| codeStream indent lookaheadCode originalSource lineStart |
	
	indent: anInteger = (indent := anInteger)
	
	visitCascadeNode: aCascadeNode = (
		self visitNode: aCascadeNode receiver.
		self indentAround: 
				[NewLineBeforeFirstCascade ifTrue: [self newLine] ifFalse: [self space].
				aCascadeNode messages do: 
						[:each | 
						self indentAround: 
								[self 
									formatSelectorAndArguments: each
									firstSeparator: []
									restSeparator: ((self isMultiLineMessage: each) 
											ifTrue: [[self newLine]]
											ifFalse: [[self space]])]]
					separatedBy: 
						[codeStream nextPut: $;.
						NewLineAfterCascade ifTrue: [self newLine] ifFalse: [self space]]]
	)
	
	visitPatternBlockNode: aRBPatternBlockNode = (
		codeStream nextPut: $`.
		self 
			bracketWith: '{}' 
			around: [self formatBlock: aRBPatternBlockNode]
	)
	
	visitArrayNode: anArrayNode = (
		self bracketWith: '{}' around: [ self formatArray: anArrayNode ]
	)
	
	isMultiLineMessage: aMessageNode = (
		| messageStream |
		(MultiLineMessages includes: aMessageNode selector)
			ifTrue: [ ^ true ].
		(OneLineMessages includes: aMessageNode selector)
			ifTrue: [ ^ false ].
		(NumberOfArgumentsForMultiLine <= aMessageNode arguments size)
			ifTrue: [ ^ true ].
		(aMessageNode arguments 
			anySatisfy: [ :each | self indent: IndentsForKeywords + 1 around: [ self willBeMultiline: each ] ]) 
			ifTrue: [ ^ true ].
		aMessageNode isUnary
			ifTrue: [ ^ self isLineTooLong: aMessageNode selector ].
		messageStream := WriteStream on: (String new: 100).
		self  with: aMessageNode selectorParts and: aMessageNode arguments 
			do: [ :selector :arg | 
				messageStream nextPutAll: selector.
				messageStream space. 
				messageStream nextPutAll: (self formattedSourceFor: arg) ]
			separatedBy: [ messageStream space ].
		^ self isLineTooLong: messageStream contents
	)
	
	formatMethodBodyFor: aMethodNode = (
		self
			indentAround: 
				[self newLines: NewLinesAfterMethodPattern.
				self formatMethodCommentFor: aMethodNode.
				self formatPragmasFor: aMethodNode.
				self visitNode: aMethodNode body]
	)
	
	formatTemporariesFor: aSequenceNode = (
		aSequenceNode temporaries isEmpty ifTrue: [^self].
		self
			bracketWith: '|'
			around:
				[self space.
				aSequenceNode temporaries
					do:
						[:each | 
						self visitNode: each.
						FormatCommentWithStatements ifTrue: [self formatCommentsFor: each].
						self space]].
		self newLines: NewLinesAfterTemporaries
	)
	
	indentAround: aBlock = (
		self indent: 1 around: aBlock
	)
	
	isLineTooLong: aString = (
		^ self currentLineLength + (aString indexOf: Character cr ifAbsent: [ aString size ]) >= MaxLineLength
	)
	
	initialize = (
		super initialize.
		lineStart := 0.
		indent := 0.
		lookaheadCode := IdentityDictionary new.
		codeStream := WriteStream on: (Vector new: 256)
	)
	
	visitPragmaNode: aPragmaNode = (
		codeStream nextPut: $<.
		self 
			formatSelectorAndArguments: aPragmaNode 
			firstSeparator: [ 
				aPragmaNode selector isInfix
					ifTrue: [ self space ] ]
			restSeparator: [ self space ].
		codeStream nextPut: $>
	)
	
	formatCommentsFor: aNode = (
		originalSource isNil ifTrue: [^self].
		aNode comments do: 
				[:each | 
				codeStream space.
				codeStream nextPutAll: (originalSource copyFrom: each start to: each stop)]
	)
	
	visitSequenceNode: aSequenceNode = (
		self formatTemporariesFor: aSequenceNode.
		self formatSequenceCommentsFor: aSequenceNode.
		self formatSequenceNodeStatementsFor: aSequenceNode
	)
	
	newLinesBeforeStartingAt: anIndex = (
		| count cr lf index char |
		originalSource ifNil: [^0].
		(anIndex isNil or: [anIndex > originalSource size]) ifTrue: [^0].
		cr := Character value: 13.
		lf := Character value: 10.
		count := 0.
		index := anIndex - 1.
		[index > 0 and: [(char := originalSource at: index) isSeparator]] 
			whileTrue: 
				[char == lf 
					ifTrue: 
						[count := count + 1.
						(originalSource at: (index - 1 max: 1)) == cr ifTrue: [index := index - 1]].
				char == cr ifTrue: [count := count + 1].
				index := index - 1].
		^count
	)
	
	visitNode: aNode = (
		| needsParenthesis |
		(lookaheadCode includesKey: aNode)
			ifTrue: [^self writeString: (lookaheadCode at: aNode)].
		needsParenthesis := self needsParenthesisFor: aNode.
		self
			bracketWith:
				(needsParenthesis
					ifTrue: ['()']
					ifFalse: [''])
			around:
				[needsParenthesis ifTrue: [codeStream nextPutAll: StringInsideParentheses].
				super visitNode: aNode.
				(FormatCommentWithStatements or: [aNode isMethod or: [aNode isSequence]])
					ifFalse: [self formatCommentsFor: aNode].
				needsParenthesis
					ifTrue: [codeStream nextPutAll: StringInsideParentheses]]
	)
	
	formatSequenceNodeStatementsFor: aSequenceNode = (
		| statements |
		statements := aSequenceNode statements.
		statements isEmpty ifTrue: [^self].
		1 to: statements size
			do: 
				[:i | 
				self visitNode: (statements at: i).
				(i < statements size or: 
						[aSequenceNode parent ifNil: [self class periodsAsTerminators]
							ifNotNil: 
								[:parent | 
								parent isBlock 
									ifTrue: [self class periodsAtEndOfBlock]
									ifFalse: [self class periodsAtEndOfMethod]]]) 
					ifTrue: [codeStream nextPut: $.].
				self formatStatementCommentsFor: (statements at: i).
				i < statements size 
					ifTrue: 
						[self addNewLinesBeforeStatementStartingAt: (statements at: i + 1) start]]
	)
	
	visitAssignmentNode: anAssignmentNode = (
		self visitNode: anAssignmentNode variable.
		codeStream space.
		codeStream nextPutAll: anAssignmentNode assignmentOperator.
		codeStream space.
		self visitNode: anAssignmentNode value
	)
	
	indent: anInteger around: aBlock = (
		indent := indent + anInteger.
		^aBlock ensure: [indent := indent - anInteger]
	)
	
	formatSelectorAndArguments: aMessageNode firstSeparator: firstBlock restSeparator: restBlock = (
		| separatorBlock |
		separatorBlock := firstBlock.
		aMessageNode isUnary
			ifTrue: [ self handleLineForSelector: aMessageNode selector withSeparatorBlock: separatorBlock.
					codeStream nextPutAll: aMessageNode selector ]
			ifFalse: [ 
				aMessageNode selectorParts
					with: aMessageNode arguments
					do: [ :selector :argument | 
						self handleLineForSelector:  selector withSeparatorBlock: separatorBlock.
						separatorBlock := restBlock.
						self
							indentAround: [ 
								codeStream nextPutAll: selector.
								(KeepBlockInMessage and: [ argument isBlock ])
									ifTrue: [ 
										self space.
										self visitNode: argument ]
									ifFalse: [ 
										((self willBeMultiline: argument) or: [ self isLineTooLong: (self formattedSourceFor: argument) ])
											ifTrue: [ self newLine ]
											ifFalse: [ self space ].
										self visitNode: argument ] ] ] ]
	)
	
	visitLiteralNode: aLiteralNode = (
		aLiteralNode value isLiteral
			ifFalse: [ self writeString: '''<an unprintable nonliteral value>''' ]
			ifTrue: [ self writeString: aLiteralNode sourceText ].
	)
	
	visitReturnNode: aReturnNode = (
		codeStream nextPut: $^.
		codeStream nextPutAll: StringFollowingReturn.
		self visitNode: aReturnNode value
	)
	
	formatArray: anArrayNode = (
		self formatSequenceCommentsFor: anArrayNode.
		self formatSequenceNodeStatementsFor: anArrayNode
	)
	
	precedenceOf: parentSelector greaterThan: childSelector = (
		"Put parenthesis around things that are preceived to have 'lower' precedence. For example, 'a + b * c' 
		-> '(a + b) * c' but 'a * b + c' -> 'a * b + c'"
	
		| childIndex parentIndex |
		childIndex := 0.
		parentIndex := 0.
		1 to: TraditionalBinaryPrecedence size
			do: 
				[:i | 
				((TraditionalBinaryPrecedence at: i) includes: parentSelector first) 
					ifTrue: [parentIndex := i].
				((TraditionalBinaryPrecedence at: i) includes: childSelector first) 
					ifTrue: [childIndex := i]].
		^childIndex < parentIndex
	)
	
	currentLineLength = (^codeStream position - lineStart)
	
	with: firstCollection and: secondCollection do: aBlock separatedBy: separatorBlock = (
		firstCollection isEmpty ifTrue: [^self].
		aBlock
			value: firstCollection first
			value: secondCollection first.
		2
			to: firstCollection size
			do: 
				[:i | 
				separatorBlock value.
				aBlock
					value: (firstCollection at: i)
					value: (secondCollection at: i)]
	)
	
	visitMessageNode: aMessageNode = (
		self visitNode: aMessageNode receiver.
		self formatSelectorAndArguments: aMessageNode
	)
	
	willBeMultiline: aNode = (^(self formattedSourceFor: aNode) includes: Character cr)
	
	formatMethodCommentFor: aMethodNode = (
		originalSource isNil ifTrue: [^self].
		(FormatCommentWithStatements
			ifTrue: [aMethodNode methodComments]
			ifFalse: [aMethodNode comments])
			do:
				[:each | 
				codeStream
					nextPutAll:
						(originalSource
							copyFrom: each start
							to: each stop).
				self newLines: NewLinesAfterMethodComment]
	)
	
	visitMethodNode: aMethodNode = (
		self formatMethodPatternFor: aMethodNode.
		self formatMethodBodyFor: aMethodNode
	)
	
	visitVariableNode: aVariableNode = (
		codeStream nextPutAll: aVariableNode name
	)
	
	visitBlockNode: aBlockNode = (
		self bracketWith: '[]' around: [self formatBlock: aBlockNode]
	)
	
	formatSelectorAndArguments: aMessageNode = (
		| newLineBetweenArguments |
		newLineBetweenArguments := self isMultiLineMessage: aMessageNode.
		self
			indent:
				(newLineBetweenArguments
					ifTrue: [ IndentsForKeywords ]
					ifFalse: [ 0 ])
			around: [ 
				self
					formatSelectorAndArguments: aMessageNode
					firstSeparator:
						((newLineBetweenArguments or: [ NewLineBeforeFirstKeyword ])
							ifTrue: [ [ self newLine ] ]
							ifFalse: [ [ self space ] ])
					restSeparator:
						(newLineBetweenArguments
							ifTrue: [ [ self newLine ] ]
							ifFalse: [ [ self space ] ]) ]
	)
	
	visitLiteralArrayNode: aRBArrayLiteralNode = (
		| brackets |
		codeStream nextPut: $#.
		brackets := aRBArrayLiteralNode isForByteArray 
					ifTrue: ['[]']
					ifFalse: ['()'].
		self bracketWith: brackets
			around: 
				[aRBArrayLiteralNode contents do: [:each | self visitNode: each]
					separatedBy: [self space]]
	)
	
	writeString: aString = (
		| index |
		index := aString lastIndexOf: Character cr ifAbsent: [0].
		codeStream nextPutAll: aString.
		index > 0 
			ifTrue: [lineStart := codeStream position - (aString size - index)]
	)
	
	visitPatternWrapperBlockNode: aRBPatternWrapperBlockNode = (
		self visitNode: aRBPatternWrapperBlockNode wrappedNode.
		codeStream nextPut: $`.
		self 
			bracketWith: '{}' 
			around: [self formatBlock: aRBPatternWrapperBlockNode]
	)
	
	newLines: anInteger = (
		anInteger + IndentString size = 0 ifTrue: [codeStream space].
		anInteger timesRepeat: [codeStream cr].
		lineStart := codeStream position.
		indent timesRepeat: [codeStream nextPutAll: IndentString]
	)
	
	formatSequenceCommentsFor: aSequenceNode = (
		originalSource isNil ifTrue: [^self].
		aSequenceNode comments
			do:
				[:each | 
				codeStream
					nextPutAll:
						(originalSource
							copyFrom: each start
							to: each stop).
				self newLine]
	)
	
	
	handleLineForSelector: selector withSeparatorBlock: aBlock = (
		^ (self isLineTooLong: selector)
			ifTrue: [ self newLine ]
			ifFalse: [ aBlock value ]
	)
	
	formatPragmasFor: aMethodNode = (aMethodNode pragmas do: [ :each | self visitNode: each. self newLine ])
	newLine = (self newLines: 1)
	space = (codeStream space)
	
	addNewLinesBeforeStatementStartingAt: anInteger = (
		| newLines |
		newLines := MinimumNewLinesBetweenStatements 
					max: (RetainBlankLinesBetweenStatements 
							ifTrue: [self newLinesBeforeStartingAt: anInteger]
							ifFalse: [0]).
		newLines = 0 ifTrue: [self space] ifFalse: [self newLines: newLines]
	)
	
	format: aParseTree = (
		originalSource := aParseTree source.
		self visitNode: aParseTree.
		^codeStream contents
	)
	
	formatBlock: aBlockNode = (
		(LineUpBlockBrackets and: [ self willBeMultiline: aBlockNode body ])
			ifTrue: [ self newLine ]
			ifFalse: [ codeStream nextPutAll: StringInsideBlocks ].
		self formatBlockArgumentsFor: aBlockNode.
		(self willBeMultiline: aBlockNode body)
			ifTrue: [ self newLine ].
		self visitNode: aBlockNode body.
		(LineUpBlockBrackets and: [ self willBeMultiline: aBlockNode body ])
			ifTrue: [ self newLine ]
			ifFalse: [ codeStream nextPutAll: StringInsideBlocks ]
	)
	
	formattedSourceFor: aNode = (
		^lookaheadCode at: aNode
			ifAbsentPut: [self class format: aNode withIndents: indent]
	)
	
	formatBlockArgumentsFor: aBlockNode = (
		aBlockNode arguments isEmpty
			ifTrue: [ ^ self ].
		aBlockNode arguments
			do: [ :each | 
				codeStream nextPut: $:.
				self visitNode: each.
				FormatCommentWithStatements
					ifTrue: [ self formatCommentsFor: each ].
				self space ].
		codeStream nextPutAll: '| '
	)
	
	bracketWith: bracketString around: aBlock = (
		bracketString isEmpty ifTrue: [^aBlock value].
		codeStream nextPut: bracketString first.
		^aBlock ensure: [codeStream nextPut: bracketString last]
	)
	
	formatStatementCommentsFor: aStatementNode = (
		originalSource isNil
			ifTrue: [ ^ self ].
		FormatCommentWithStatements
			ifFalse: [ ^ self ].
		aStatementNode statementComments
			do: [ :each | 
				| count |
				count := self newLinesBeforeStartingAt: each start.
				RetainBlankLinesBeforeComments & (count > 0)
					ifTrue: [ self newLines: count ]
					ifFalse: [ codeStream tab ].
				codeStream nextPutAll: (originalSource copyFrom: each start to: each stop) ]
	)
	
	formatMethodPatternFor: aMethodNode = (
		aMethodNode arguments isEmpty
			ifTrue: [codeStream nextPutAll: aMethodNode selector]
			ifFalse: 
				[self
					with: aMethodNode selectorParts
					and: aMethodNode arguments
					do: 
						[:key :arg | 
						codeStream nextPutAll: key.
						self space.
						self visitNode: arg]
					separatedBy: 
						[MethodSignatureOnMultipleLines
							ifTrue: [self newLine]
							ifFalse: [self space]]]
	)
	
	needsParenthesisFor: aNode = (
		| parent grandparent |
		aNode ifNil: [ ^ false ].
		aNode isValue ifFalse: [ ^ false ].
		parent := aNode parent ifNil: [ ^ false ].
		(CascadedMessageInsideParentheses and: [ aNode isMessage and: [ parent isMessage and: [ parent receiver == aNode ] ] ]) ifTrue: [
			grandparent := parent parent.
			(grandparent notNil and: [ grandparent isCascade ])
				ifTrue: [ ^ true ] ].
		(aNode precedence < parent precedence) ifTrue: [ ^ false ].
		(aNode isAssignment and: [ parent isAssignment ]) ifTrue: [ ^ false ].
		(aNode isAssignment and: [ aNode isCascade ]) ifTrue: [ ^ true ].
		(aNode precedence = 0) ifTrue: [ ^ false ].
		(aNode isMessage) ifFalse: [ ^ true ].
		(aNode precedence = parent precedence) ifFalse: [ ^ true ].
		(aNode isUnary) ifTrue: [ ^ false ].
		(aNode isKeyword) ifTrue: [ ^ true ].
		(parent receiver == aNode) ifFalse: [ ^ true ].
		^ UseTraditionalBinaryPrecedenceForParentheses and: [ self precedenceOf: parent selector greaterThan: aNode selector ]
	)
	
	----------------------------------
	| CascadedMessageInsideParentheses FormatCommentWithStatements FormatOnAccept FormatOnDisplay IndentString IndentsForKeywords KeepBlockInMessage LineUpBlockBrackets 
	MaxLineLength MethodSignatureOnMultipleLines MinimumNewLinesBetweenStatements MultiLineMessages NewLineAfterCascade NewLineBeforeFirstCascade NewLineBeforeFirstKeyword 
	NewLinesAfterMethodComment NewLinesAfterMethodPattern NewLinesAfterTemporaries NumberOfArgumentsForMultiLine OneLineMessages PeriodsAtEndOfBlock PeriodsAtEndOfMethod 
	RetainBlankLinesBeforeComments RetainBlankLinesBetweenStatements StringFollowingReturn StringInsideBlocks StringInsideParentheses TraditionalBinaryPrecedence 
	UseTraditionalBinaryPrecedenceForParentheses |
	
	oneLineMessages = (^ OneLineMessages printString)
	formatOnDisplay = (^FormatOnDisplay ifNil:[false])
	keepBlockInMessage: aBoolean = (KeepBlockInMessage := aBoolean)
	minimumNewLinesBetweenStatements = (^ MinimumNewLinesBetweenStatements)
	stringFollowingReturn: aString = (StringFollowingReturn := aString)
	lineUpBlockBrackets = (^ LineUpBlockBrackets)
	retainBlankLinesBeforeComments = (^ RetainBlankLinesBeforeComments)
	useTraditionalBinaryPrecedenceForParentheses = (^ UseTraditionalBinaryPrecedenceForParentheses)
	useTraditionalBinaryPrecedenceForParentheses: aBoolean = (UseTraditionalBinaryPrecedenceForParentheses := aBoolean)
	keepBlockInMessage = (^ KeepBlockInMessage)
	multiLineMessages = (^ MultiLineMessages printString)
	retainBlankLinesBetweenStatements: aBoolean = (RetainBlankLinesBetweenStatements := aBoolean)
	traditionalBinaryPrecedence: aString = (TraditionalBinaryPrecedence := self compiler evaluate: aString)
	newLineAfterCascade = (^ NewLineAfterCascade)
	newLineAfterCascade: aBoolean = (NewLineAfterCascade := aBoolean)
	periodsAtEndOfMethod = (^ PeriodsAtEndOfMethod)
	formatOnAccept = (^FormatOnAccept ifNil:[false])
	newLineBeforeFirstCascade = (^ NewLineBeforeFirstCascade)
	stringFollowingReturn = (^ StringFollowingReturn)
	maxLineLength = (^ MaxLineLength)
	methodSignatureOnMultipleLines: aBoolean = (MethodSignatureOnMultipleLines := aBoolean)
	indentsForKeywords = (^ IndentsForKeywords)
	newLinesAfterMethodComment: anInteger = (NewLinesAfterMethodComment := anInteger)
	periodsAsTerminators = (^ PeriodsAtEndOfBlock and: [ PeriodsAtEndOfMethod ])
	format: aParseTree = (^self format: aParseTree withIndents: 0)
	maxLineLength: anInteger = (MaxLineLength := anInteger)
	newLineBeforeFirstCascade: aBoolean = (NewLineBeforeFirstCascade := aBoolean)
	periodsAtEndOfBlock = (^ PeriodsAtEndOfBlock)
	numberOfArgumentsForMultiLine: anInteger = (NumberOfArgumentsForMultiLine := anInteger)
	lineUpBlockBrackets: aBoolean = (LineUpBlockBrackets := aBoolean)
	retainBlankLinesBetweenStatements = (^ RetainBlankLinesBetweenStatements)
	newLinesAfterMethodPattern = (^ NewLinesAfterMethodPattern)
	periodsAtEndOfBlock: aBoolean = (PeriodsAtEndOfBlock := aBoolean)
	periodsAtEndOfMethod: aBoolean = (PeriodsAtEndOfMethod := aBoolean)
	multiLineMessages: aString = (MultiLineMessages := self compiler evaluate: aString)
	stringInsideParentheses: aString = (StringInsideParentheses := aString)
	newLinesAfterMethodPattern: anInteger = (NewLinesAfterMethodPattern := anInteger)
	indentsForKeywords: anInteger = (IndentsForKeywords := anInteger)
	stringInsideBlocks: aString = (StringInsideBlocks := aString)
	oneLineMessages: aString = (OneLineMessages := self compiler evaluate: aString)
	newLinesAfterTemporaries = (^ NewLinesAfterTemporaries)
	formatOnAccept: aBoolean = (FormatOnAccept := aBoolean)
	numberOfArgumentsForMultiLine = (^ NumberOfArgumentsForMultiLine)
	newLinesAfterMethodComment = (^ NewLinesAfterMethodComment)
	formatOnDisplay: aBoolean = ( FormatOnDisplay := aBoolean)
	newLineBeforeFirstKeyword = (^ NewLineBeforeFirstKeyword)
	stringInsideBlocks = (^ StringInsideBlocks)
	formatCommentWithStatements: aBoolean = (FormatCommentWithStatements := aBoolean)
	cascadedMessageInsideParentheses: aBoolean = (CascadedMessageInsideParentheses := aBoolean)
	retainBlankLinesBeforeComments: aBoolean = (RetainBlankLinesBeforeComments := aBoolean)
	formatCommentWithStatements = (^ FormatCommentWithStatements)
	cascadedMessageInsideParentheses = (^ CascadedMessageInsideParentheses)
	indentString: aString = (IndentString := aString)
	indentString = (^ IndentString)
	newLineBeforeFirstKeyword: aBoolean = (NewLineBeforeFirstKeyword := aBoolean)
	newLinesAfterTemporaries: anInteger = (NewLinesAfterTemporaries := anInteger)
	stringInsideParentheses = (^ StringInsideParentheses)
	traditionalBinaryPrecedence = (^ TraditionalBinaryPrecedence printString)
	methodSignatureOnMultipleLines = (^ MethodSignatureOnMultipleLines)
	minimumNewLinesBetweenStatements: anInteger = (MinimumNewLinesBetweenStatements := anInteger)
	
	initialize = (
		CascadedMessageInsideParentheses := false.
		FormatCommentWithStatements := true.
		IndentString := String with: Character tab.
		IndentsForKeywords := 1.
		KeepBlockInMessage := true.
		LineUpBlockBrackets := false.
		MaxLineLength := 120.
		MethodSignatureOnMultipleLines := false.
		MinimumNewLinesBetweenStatements := 1.
		MultiLineMessages := #(#ifTrue:ifFalse: #ifFalse:ifTrue: #ifTrue: #ifFalse: #on:do: #ensure: #ifCurtailed:).
		NewLineAfterCascade := true.
		NewLineBeforeFirstCascade := true.
		NewLineBeforeFirstKeyword := false.
		NewLinesAfterMethodComment := 2.
		NewLinesAfterMethodPattern := 1.
		NewLinesAfterTemporaries := 1.
		NumberOfArgumentsForMultiLine := 4.
		OneLineMessages := #(#to: #to:do: #to:by: #to:by:do:).
		PeriodsAtEndOfBlock := false.
		PeriodsAtEndOfMethod := false.
		RetainBlankLinesBetweenStatements := false.
		RetainBlankLinesBeforeComments := false.
		StringFollowingReturn := ' '.
		StringInsideBlocks := ' '.
		StringInsideParentheses := ''.
		TraditionalBinaryPrecedence := #(#($| $& $?) #($= $~ $< $>) #($- $+) #($* $/ $% $\) #($@)).
		UseTraditionalBinaryPrecedenceForParentheses := true.
		FormatOnAccept := false.
		FormatOnDisplay := false
	)
	
	format: aParseTree withIndents: anInteger = (
		| formater |
		formater := self new.
		formater indent: anInteger.
		^formater
	)
	
	
	periodsAsTerminators: aBoolean = (
		PeriodsAtEndOfBlock := aBoolean.
		PeriodsAtEndOfMethod := aBoolean
	)
	
	"settingsOn: aBuilder = (
		<systemsettings>
		builder := aBuilder group: #configurableFormatter.
		builder target: self.
		builder parent: #codeBrowsing.
		builder label: 'Pretty Printing'.
		builder description: 'Settings related to the formatter'.
		builder	with: [ 
						(aBuilder setting: #cascadedMessageInsideParentheses) label: 'Cascaded message inside parentheses'.
						(aBuilder setting: #formatCommentWithStatements) label: 'Format comment with statements'.
						(aBuilder setting: #indentString) label: 'Indent string'.
						(aBuilder setting: #indentsForKeywords) label: 'Indents for keywords'.
						(aBuilder setting: #keepBlockInMessage) label: 'Keep block in message'.
						(aBuilder setting: #lineUpBlockBrackets) label: 'Line up block brackets'.
						(aBuilder setting: #methodSignatureOnMultipleLines) label: 'Method signature on multiple lines'.
						(aBuilder setting: #maxLineLength) label: 'Max line length'.
						(aBuilder setting: #oneLineMessages) label: 'One line messages'.
						(aBuilder setting: #multiLineMessages) label: 'Multi line messages'.
						(aBuilder setting: #minimumNewLinesBetweenStatements) label: 'Minimum new lines between statements'.
						(aBuilder setting: #newLineAfterCascade) label: 'New line after cascade'.
						(aBuilder setting: #newLineBeforeFirstCascade) label: 'New line before first cascade'.
						(aBuilder setting: #newLineBeforeFirstKeyword) label: 'New line before first keyword'.
						(aBuilder setting: #newLinesAfterMethodComment) label: 'New lines after method comment'.
						(aBuilder setting: #newLinesAfterMethodPattern) label: 'New lines after method pattern'.
						(aBuilder setting: #newLinesAfterTemporaries) label: 'New lines after temporaries'.
						(aBuilder setting: #numberOfArgumentsForMultiLine) label: 'Number of arguments for multi line'.
						(aBuilder setting: #periodsAsTerminators) label: 'Periods as terminators'.
						(aBuilder setting: #periodsAtEndOfBlock) label: 'Periods at end of block'.
						(aBuilder setting: #periodsAtEndOfMethod) label: 'Periods at end of method'.
						(aBuilder setting: #retainBlankLinesBetweenStatements) label: 'Retain blank lines between statements'.
						(aBuilder setting: #retainBlankLinesBeforeComments) label: 'Retain blank lines before comments'.
						(aBuilder setting: #stringFollowingReturn) label: 'String following return'.
						(aBuilder setting: #stringInsideBlocks) label: 'String inside blocks'.
						(aBuilder setting: #stringInsideParentheses) label: 'String inside parentheses'.
						(aBuilder setting: #traditionalBinaryPrecedence) label: 'Traditional binary precedence'.
						(aBuilder setting: #useTraditionalBinaryPrecedenceForParentheses)
							label: 'Use traditional binary precedence for parentheses'.
						(aBuilder setting: #formatOnDisplay) label: 'Format methods on display'.
						(aBuilder setting: #formatOnAccept) label: 'Format methods on accept' ]
	)"
)