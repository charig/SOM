RBLiteralValueNode = RBLiteralNode (
	"RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.Instance Variables	value	<Numeric | Symbol | String  | Character>	the literal value I represent"
	| value sourceText |
	
	value = (
		^ value
	)
	
	= = ( anObject 
		^ super = anObject 
			and: [ self value = anObject value 
			and: [ self value species = anObject value species ] ]
	)
	
	copyInContext: aDictionary = (
		^ self class value: self value
	)
	
	specialCommands = ( 
		^ SugsSuggestionFactory commandsFoLiteralNode.
	)
	
	value: aValue start: aPosition stop: anotherPosition source: aString = (
	
	
		self value: aValue start: aPosition stop: anotherPosition.
		sourceText := aString.
	)
	
	sourceText = (
		^ sourceText ifNil: [
			String streamContents: [:aStream|			
				value isSymbol
					ifTrue: [
						aStream nextPut: $#.
						((RBScanner isSelector: value) and: [value ~~ #'||']) 
							ifTrue: [aStream nextPutAll: value]
							ifFalse: [value asString printOn: aStream]]
					ifFalse: [ 
						value class == Character 
							ifTrue: 
								[aStream nextPut: $$;	nextPut: value]
							ifFalse: [ value storeOn: aStream ]]] ]
	)
	
	isFaulty = (
		^false.
	)
	
	value: aValue start: aPosition stop: anotherPosition = (
	
		value := aValue.
		start := aPosition. 
		stop := anotherPosition.
	)
	
	acceptVisitor: aProgramNodeVisitor = (
	
		^aProgramNodeVisitor visitLiteralNode: self
	)
	
	----------------------------------
	
	
	value: aValue start: aPosition stop: anotherPosition = (
	
	 	^ self new
			value: aValue start: aPosition stop: anotherPosition;
			yourself.
	)
	
	value: aValue = (
		^ self value: aValue start: 0 stop: -1
	)
	
	value: aValue start: aPosition stop: anotherPosition  source: aString = (
	
	 	^ self new
			value: aValue start: aPosition stop: anotherPosition source: aString;
			yourself.
	)
)