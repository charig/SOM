"

$Id: Pair.som 27 2009-07-31 11:17:53Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Pair = (
    | key value |
    
    "Accessing"
    key = ( ^self keyMyself: self )
    keyMyself: slf = ( ^key )
    
    value = ( ^self valueMyself: self )
    valueMyself: slf = ( ^value )
    
    "Private"
    key: aKey = ( self key: aKey myself: self )
    key: aKey myself: slf = ( ^key := aKey )
    value: aValue = ( self value: aValue myself: self )
    value: aValue myself: slf = (value := aValue)
    
    "Comparing"
    = aPair = (
    	^(self key = aPair key) and: [self value = aPair value]
    )
    
    equal: aPair myself: slf = (
    	^((self keyMyself: self) = aPair key) and: [(self valueMyself: self) = aPair value]
    )
        
    "Printing"
    print = ( '[' print. key print. '=>' print. value print. ']' print )
    println = ( self print. '' println )
    
    "Only need for Mate immutability testing"
    changeKeyOf: aPair to: aValue = (self changeKeyOf: aPair to: aValue myself: self)
    changeKeyOf: aPair to: aValue myself: slf = (aPair key: 1)
    
    proxyClass = (^PairProxy)
    ----
    
    withKey: aKey andValue: aValue = (
        | newPair |
        newPair := super new.
        newPair key: aKey.
        newPair value: aValue.
        ^newPair
    )
)
