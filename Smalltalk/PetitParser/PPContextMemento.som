PPContextMemento = Object (
	| stream position properties |
	
	stream = (
		^ stream
	)
	
	hash = (
		^ (position hash bitXor: stream hash) bitXor: properties hash.
	)
	
	propertiesSize = (
		properties ifNil: [ ^ 0 ].
		^ properties size.
	)
	
	indentTraces: anIndentTraces = (
		self propertyAt: #indentTraces put: anIndentTraces copy 
	)
	
	stream: aStream = (
		stream := aStream
	)
	
	propertyAt: aKey ifAbsent: aBlock = (
		"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."
		
		properties isNil
			ifTrue: [ ^ aBlock value ]
			ifFalse: [ 
				(properties includesKey: aKey) ifTrue: [ 
					^ (properties at: aKey) copy
				].
				^ aBlock value
			]
	)
	
	position: anInteger = (
		position := anInteger 
	)
	
	removeProperty: aKey = (
		"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."
		
		^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	propertyAt: aKey = (
		"Answer the property value associated with aKey."
		
		^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	propertyAt: aKey put: anObject = (
		"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."
	
		^ (properties ifNil: [ properties := Dictionary new ])
			at: aKey put: (anObject copy)
	)
	
	hasProperty: aKey = (
		"Test if the property aKey is present."
		
		^ properties notNil and: [ properties includesKey: aKey ]
	)
	
	= anObject = (
		
		(self == anObject) ifTrue: [ ^ true ].
		(anObject class = PPContextMemento) ifFalse: [ ^ false ].
		
		(anObject stream == stream) ifFalse: [ ^ false ].
		(anObject position = position) ifFalse: [ ^ false ].
	
		(self propertiesSize = anObject propertiesSize) ifFalse: [ ^ false ].
	
		self keysAndValuesDo: [ :key :value |
			(anObject hasProperty: key) ifFalse: [ ^ false ].
			((anObject propertyAt: key) = value) ifFalse: [ ^ false ]. 
	 	].
		
		^ true.
	
	)
	
	propertyAt: aKey ifAbsentPut: aBlock = (
		"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."
		
		^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]
	)
	
	restoreIndentTraces: aPPContext = (
		aPPContext indentTraces: self indentTraces
	)
	
	position = (
		^ position
	)
	
	indentTraces = (
		^ (self propertyAt: #indentTraces) copy
	)
	
	keysAndValuesDo: aBlock = (
		properties ifNil: [ ^ self ].
		properties keysAndValuesDo: [ :key :value | aBlock value: key value: value copy ] 
	)
	
	removeProperty: aKey ifAbsent: aBlock = (
		"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."
		
		| answer |
		properties isNil ifTrue: [ ^ aBlock value ].
		answer := properties removeKey: aKey ifAbsent: aBlock.
		properties isEmpty ifTrue: [ properties := nil ].
		^ answer
	)
)