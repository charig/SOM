PPLimitedRepeatingParser = PPRepeatingParser (
	"An abstract parser that repeatedly parses between 'min' and 'max' instances of my delegate and that requires the input to be completed with a specified parser 'limit'. Subclasses provide repeating behavior as typically seen in regular expression implementations (non-blind).Instance Variables:	limit	<PPParser>	The parser to complete the input with."
	| limit |
	
	children = (
		^ Array with: parser with: limit
	)
	
	replace: aParser with: anotherParser = (
		super replace: aParser with: anotherParser.
		limit == aParser ifTrue: [ limit := anotherParser ]
	)
	
	matchesLimitOn: aPPContext = (
		| element position |
		position := aPPContext remember.
		element := limit parseOn: aPPContext.
		aPPContext restore: position.
		^ element isPetitFailure not
	)
	
	setLimit: aParser = (
		limit := aParser
	)
	
	limit = (
		"Answer the parser that limits (or ends) this repetition."
		
		^ limit
	)
	
	----------------------------------
	
	
	on: aParser limit: aLimitParser = (
		^ (self on: aParser) setLimit: aLimitParser
	)
)