PPSmalltalkParser = PPSmalltalkGrammar (
	"Enhances the Smalltalk grammar with production actions to build parse-tree nodes of the refactoring browser."
	
	blockBody = (
		^ super blockBody
			==> [ :nodes | 
					| result |
					result := RBBlockNode arguments: nodes first first body: nodes last.
					nodes first last ifNotNil: [ :obj | result bar: nodes first last start ].
					result ]
	)
	
	falseLiteral = (
		^ super falseLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode value: false start: token start stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	arrayLiteral = (
		^ super arrayLiteral
			==> [ :nodes | 
				RBLiteralArrayNode
					startPosition: nodes first start
					contents: nodes second
					stopPosition: nodes last start
					isByteArray: false ]
	)
	
	buildSelector: anArray = (
		^ (String streamContents: [ :stream | anArray do: [ :each | stream nextPutAll: each value ] ]) asSymbol
	)
	
	unaryExpression = (
		^ super unaryExpression map: [ :receiverNode :messageNodes | self build: receiverNode messages: messageNodes ]
	)
	
	methodSequence = (
		^ super methodSequence ==> [:arrayOfArguments |
			Array
				with: (arrayOfArguments at: 2) , (arrayOfArguments at: 6)
				with: (self build: (arrayOfArguments at: 4) sequence: (arrayOfArguments at: 1) , (arrayOfArguments at: 3) , 
					(arrayOfArguments at: 5) , (arrayOfArguments at: 7) , (arrayOfArguments at: 8)) ]
	)
	
	build: aNode assignment: anArray = (
		^ anArray isEmpty
			ifTrue: [ aNode ]
			ifFalse: [
				anArray reversed
					inject: aNode
					into: [ :result :each |
						RBAssignmentNode 
							variable: each first
							value: result
							position: each second start ] ]
	)
	
	cascadeExpression = (
		^ super cascadeExpression map: [ :receiverNode :messageNodes | self build: receiverNode cascade: messageNodes ]
	)
	
	methodDeclaration = (
		^ super methodDeclaration
			==> [ :nodes | 
				RBMethodNode
					selector: (self buildSelector: nodes first)
					keywordsPositions: (nodes first collect: [ :each | each start ])
					arguments: nodes second ]
	)
	
	array = (
		^ super array
			map: [ :openNode :statementNodes :closeNode | 
				| receiver |
				receiver := self buildArray: statementNodes.
				receiver left: openNode start.
				receiver right: closeNode start.
				receiver yourself ]
	)
	
	trueLiteral = (
		^ super trueLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode value: true start: token start stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	binaryExpression = (
		^ super binaryExpression map: [ :receiverNode :messageNodes | self build: receiverNode messages: messageNodes ]
	)
	
	unaryToken = (
		^ super unaryToken
			==> [ :token | 
				| receiver |
				receiver := RBIdentifierToken value: token inputValue start: token start.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	return = (
		^ super return map: [ :token :expressionNode | RBReturnNode return: token start value: expressionNode ]
	)
	
	byteLiteral = (
		^ super byteLiteral
			==> [ :nodes | 
				RBLiteralArrayNode
					startPosition: nodes first start
					contents: nodes second
					stopPosition: nodes last start
					isByteArray: true ]
	)
	
	arrayLiteralArray = (
		^ super arrayLiteralArray
			==> [ :nodes | 
				RBLiteralArrayNode
					startPosition: nodes first start
					contents: nodes second
					stopPosition: nodes last start
					isByteArray: false ]
	)
	
	symbolLiteral = (
		^ super symbolLiteral
			==> [ :tokens | 
				| receiver |
				receiver := RBLiteralValueNode
					value: (self buildString: tokens last inputValue) asSymbol
					start: tokens first start
					stop: tokens last stop.
				receiver comments: tokens last comments.
				receiver yourself ]
	)
	
	sequence = (
		| a b |
		^ super sequence map: [ :tempNodes :periodNodes :statementNodes | self build: tempNodes sequence: periodNodes , statementNodes ]
	)
	
	buildString: aString = (
		(aString isEmpty or: [ aString first ~= $' or: [ aString last ~= $' ] ])
			ifTrue: [ ^ aString ].
		^ (aString 
			copyFrom: 2
			to: aString length - 1) 
			copyReplaceAll: '\'\''
			with: '\''
	)
	
	block = (
		^ super block
			map: [ :leftToken :blockNode :rightToken | 
				blockNode left: leftToken start.
				blockNode right: rightToken start ]
	)
	
	expression = (
		^ super expression map: [ :variableNodes :expressionNodes | self build: expressionNodes assignment: variableNodes ]
	)
	
	identifierToken = (
		^ super identifierToken
			==> [ :token | 
				| receiver |
				receiver := RBIdentifierToken value: token inputValue start: token start.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	byteLiteralArray = (
		^ super byteLiteralArray
			==> [ :nodes | 
				RBLiteralArrayNode
					startPosition: nodes first start
					contents: nodes second
					stopPosition: nodes last start
					isByteArray: true ]
	)
	
	method = (
		^ super method map: [ :methodNode :bodyNode| 
			|method|
			methodNode pragmas: bodyNode first.
			methodNode body: bodyNode second.
			self buildMethod: methodNode]
	)
	
	nilLiteral = (
		^ super nilLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode value: nil start: token start stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	addStatements: aCollection into: aNode = (
		aCollection isNil
			ifTrue: [ ^ aNode ].
		aCollection
			do: [ :each | 
				each class == PPSmalltalkToken
					ifFalse: [ aNode addNode: each ]
					ifTrue: [ 
						| receiver |
						aNode statements isEmpty
							ifTrue: [ aNode addComments: each comments ]
							ifFalse: [ aNode statements last addComments: each comments ].
						receiver := aNode periods asOrderedCollection.
						receiver addLast: each start.
						aNode periods: receiver yourself ] ].
		^ aNode
	)
	
	build: aNode cascade: anArray = (
		| messages semicolons |
		^ (anArray isNil or: [ anArray isEmpty ]) 
			ifTrue: [ aNode ]
			ifFalse: [
				messages := OrderedCollection new: anArray length + 1.
				messages addLast: aNode.
				semicolons := OrderedCollection new.
				anArray do: [ :each | 
					messages addLast: (self 
						build: aNode receiver
						messages: (Array with: each second)).
					semicolons addLast: each first start ].
				RBCascadeNode messages: messages semicolons: semicolons ]
	)
	
	keywordToken = (
		^ super keywordToken
			==> [ :token | 
				| receiver |
				receiver := RBKeywordToken value: token inputValue start: token start.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	numberLiteral = (
		^ super numberLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode
					value: ((NumberParser on: token inputValue) nextNumber)
					start: token start
					stop: token stop
					source: token inputValue.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	startMethod = (
		"Make sure the method node has the source code properly set."
		
		^ ([ :stream | stream collection ] asParser and , super startMethod)
			map: [ :source :node | node source: source ]
	)
	
	buildMethod: aMethodNode = (
		aMethodNode arguments
			do: [ :each | aMethodNode addComments: each comments ].
		aMethodNode pragmas do: [ :aPragma |
			aMethodNode addComments: aPragma comments.
			aMethodNode addComments: aPragma comments.
			aPragma arguments do: [ :each | 
				each isLiteralArray
					ifFalse: [ aMethodNode addComments: each comments ] ].
			aPragma comments: #() ].
		^ aMethodNode
	)
	
	symbolLiteralArray = (
		^ super symbolLiteralArray
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode
					value: (self buildString: token inputValue) asSymbol
					start: token start
					stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	build: aTempCollection sequence: aStatementCollection = (
		| result |
		result := self
			addStatements: aStatementCollection
			into: RBSequenceNode new.
		aTempCollection isEmpty ifFalse: [
			result
				leftBar: aTempCollection first start
				temporaries: aTempCollection second
				rightBar: aTempCollection last start ].
		^ result
	)
	
	charLiteral = (
		^ super charLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode value: token inputValue second start: token start stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	keywordExpression = (
		^ super keywordExpression map: [ :receiveNode :messageNode | self build: receiveNode messages: (Array with: messageNode) ]
	)
	
	blockArgument = (
		^ super blockArgument ==> #second
	)
	
	parens = (
		^ super parens map: [ :openToken :expressionNode :closeToken | expressionNode addParenthesis: (openToken start to: closeToken start) ]
	)
	
	binaryToken = (
		^ super binaryToken
			==> [ :token | 
				| receiver |
				receiver := RBBinarySelectorToken value: token inputValue start: token start.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	pragma = (
		^ super pragma
			==> [ :nodes | 
				| receiver |
				receiver := RBPragmaNode
					selector: (self buildSelector: nodes second first)
					keywordsPositions: (nodes second first collect: [ :each | each start ])
					arguments: nodes second second.
				receiver addComments: nodes first comments.
				receiver addComments: nodes last comments.
				receiver left: nodes first start.
				receiver right: nodes last start.
				receiver yourself ]
	)
	
	build: aNode messages: anArray = (
		^ (anArray isNil or: [ anArray isEmpty ])
			ifTrue: [ aNode ]
			ifFalse: [ 
				anArray
					inject: aNode
					into: [ :rec :msg | 
						msg isNil
							ifTrue: [ rec ]
							ifFalse: [ 
								RBMessageNode
									receiver: rec
									selector: (self buildSelector: msg first)
									keywordsPositions: (msg first collect: [ :each | each start ])
									arguments: msg second ] ] ]
	)
	
	stringLiteral = (
		^ super stringLiteral
			==> [ :token | 
				| receiver |
				receiver := RBLiteralValueNode value: (self buildString: token inputValue) start: token start stop: token stop.
				receiver comments: token comments.
				receiver yourself ]
	)
	
	buildArray: aStatementCollection = (
		^ self addStatements: aStatementCollection into: RBArrayNode new
	)
	
	variable = (
		^ super variable ==> [ :token | RBVariableNode identifierNamed: token value  at: token start ]
	)
	
	startExpression = (
		"Make the sequence node has a method node as its parent and that the source is set."
	
		^ ([ :stream | stream collection ] asParser and , super startExpression) map: [ :source :node | 
			(RBMethodNode selector: #doIt body: node)
				source: source.
			(node statements size = 1 and: [ node temporaries isEmpty ])
				ifTrue: [ node statements first ]
				ifFalse: [ node ] ]
	)
)