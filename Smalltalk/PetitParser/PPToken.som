PPToken = Object (
	"PPToken represents a parsed part of the input stream. Contrary to a simple String it remembers where it came from, the original collection and its start and stop position.Instance Variables:	collection	<SequenceableCollection>	The collection this token comes from.	start	<Integer>	The start position in the collection.	stop	<Integer>	The stop position in the collection."
	| collection start stop value |
	
	copyFrom: aStartInteger to: aStopInteger = (
		^ self class on: collection start: start + aStartInteger - 1 stop: stop + aStopInteger - 3 value: value
	)
	
	column = (
		"Answer the column number of this token in the underlying collection."
		
		| position |
		position := 0.
		(NewLineParser , [ :stream |
			start <= stream position
				ifTrue: [ ^ start - position ].
			position := stream position ] asParser
			/ #any asParser) star
				parse: collection.
		 ^ start - position
	)
	
	hash = (
		^ self inputValue hash
	)
	
	parsedValue = (
		"Answer the parsed value of this token."
	
		^ value
	)
	
	size = (
		"Answer the size of this token in the underlying collection."
	
		^ stop - start + 1
	)
	
	stop = (
		"Answer the stop position of this token in the underlying collection."
		
		^ stop
	)
	
	line = (
		"Answer the line number of this token in the underlying collection."
		
		| line |
		line := 1.
		(NewLineParser , [ :stream |
			start <= stream position
				ifTrue: [ ^ line ].
			line := line + 1 ] asParser
			/ #any asParser) star
				parse: collection.
		^ line
	)
	
	= anObject = (
		^ self class = anObject class and: [ self inputValue = anObject inputValue ]
	)
	
	value = (
		self notify: 'Token>>#value is no longer supported. Instead use Token>>#inputValue'.
		^ self inputValue
	)
	
	printOn: aStream = (
		super printOn: aStream.
		aStream
			nextPut: '[';
			print: self start;
			nextPut: ',';
			print: self stop;
			nextPut: ']'.
		aStream nextPut: '('.
		aStream
			print: self inputValue;
			nextPut: ')'
	)
	
	start = (
		"Answer the start position of this token in the underlying collection."
	
		^ start
	)
	
	collection = (
		"Answer the underlying collection of this token."
	
		^ collection
	)
	
	inputValue = (
		"Answer the consumed input of this token."
	
		^ collection copyFrom: start to: stop
	)
	
	initializeOn: aSequenceableCollection start: aStartInteger stop: aStopInteger value: anObject = (
		collection := aSequenceableCollection.
		start := aStartInteger.
		stop := aStopInteger.
		value := anObject
	)
	
	----------------------------------
	
	
	initialize = (
		"Platform independent newline sequence. LF: Unix, CR+LF: Windows, and CR: Apple."
		| cr lf |
		cr := Character codePoint: 13.
		lf := Character codePoint: 10.
		NewLineParser := lf asParser / (cr asParser , lf asParser optional)
	)
	
	new = (
		self error: 'Token can only be created using a dedicated constructor.'
	)
	
	on: aSequenceableCollection start: aStartInteger stop: aStopInteger value: anObject = (
		^ self basicNew 
			initializeOn: aSequenceableCollection
			start: aStartInteger stop: aStopInteger
			value: anObject
	)
	
	on: aSequenceableCollection = (
		^ self on: aSequenceableCollection start: 1 stop: aSequenceableCollection size value: nil
	)
)