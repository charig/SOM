PPCompositeParser = PPDelegateParser (
	"A PPCompositeParser is composed parser built from various primitive parsers. Every production in the receiver is specified as a method that returns its parser. Note that every production requires an instance variable of the same name, otherwise the production is not cached and cannot be used in recursive grammars. Productions should refer to each other by reading the respective inst-var. Note: these inst-vars are typically not written, as the assignment happens in the initialize method using reflection.The start production is defined in the method start. It is aliased to the inst-var parser defined in the superclass of PPCompositeParser."
	| dependencies |
	
	productionAt: aSymbol = (
		"Answer the production named aSymbol."
		
		^ self productionAt: aSymbol ifAbsent: [ nil ]
	)
	
	start = (
		"Answer the production to start this parser with."
		
		self subclassResponsibility
	)
	
	initializeStartingAt: aSymbol dependencies: aDictionary = (
		self initialize.
		parser := PPDelegateParser named: aSymbol.
		self productionNames keysAndValuesDo: [ :key :value |
			self instVarAt: key put: (PPDelegateParser named: value) ].
		dependencies := aDictionary
	)
	
	productionAt: aSymbol ifAbsent: aBlock = (
		"Answer the production named aSymbol, if there is no such production answer the result of evaluating aBlock."
		
		(self class ignoredNames includes: aSymbol asString)
			ifTrue: [ ^ aBlock value ].
		(self class startSymbol = aSymbol)
			ifTrue: [ ^ parser ].
		^ self instVarAt: (self class allInstVarNames
			indexOf: aSymbol asString
			ifAbsent: [ ^ aBlock value ])
	)
	
	productionNames = (
		"Answer a dictionary of slot indexes and production names."
		
		| productionNames ignoredNames |
		productionNames := Dictionary new.
		ignoredNames := self class ignoredNames
			collect: [ :each | each asSymbol ].
		self class allInstVarNames keysAndValuesDo: [:key :value  |
			(ignoredNames contains: value asSymbol)
				ifFalse: [ productionNames at: key put: value asSymbol ] ].
		^ productionNames
	)
	
	dependencyAt: aClass = (
		"Answer the dependent parser aClass. Throws an error if this parser class is not declared in the method #dependencies on the class-side of the receiver."
		
		^ dependencies at: aClass ifAbsent: [ self error: 'Undeclared dependency in ' , self class name , ' to ' , aClass name ]
	)
	
	----------------------------------
	
	
	debug: anObject startingAt: aSymbol onError: aBlock = (
		^ (self newStartingAt: aSymbol) debug: anObject onError: aBlock
	)
	
	parse: anObject startingAt: aSymbol = (
		^ (self newStartingAt: aSymbol) parse: anObject
	)
	
	debug: anObject startingAt: aSymbol = (
		^ (self newStartingAt: aSymbol) debug: anObject
	)
	
	parse: anObject onError: aBlock = (
		^ self parse: anObject startingAt: self startSymbol onError: aBlock
	)
	
	ignoredNames = (
		"Answer a collection of instance-variables that should not be automatically initialized with productions, but that are used internal to the composite parser."
	
		^ PPCompositeParser allInstVarNames
	)
	
	parse: anObject = (
		^ self parse: anObject startingAt: self startSymbol
	)
	
	new = (
		"Answer a new parser starting at the default start symbol."
	
		^ self newStartingAt: self startSymbol
	)
	
	startSymbol = (
		"Answer the method that represents the default start symbol."
	
		^ #start
	)
	
	debug: anObject onError: aBlock = (
		^ self debug: anObject startingAt: self startSymbol onError: aBlock
	)
	
	parse: anObject startingAt: aSymbol onError: aBlock = (
		^ (self newStartingAt: aSymbol) parse: anObject onError: aBlock
	)
	
	newStartingAt: aSymbol = (
		"Answer a new parser starting at aSymbol. The code makes sure to resolve all dependent parsers correctly."
	
		| parsers remaining |
		parsers := IdentityDictionary new.
		remaining := OrderedCollection with: self.
		[ remaining isEmpty ] whileFalse: [
			| dependency |
			dependency := remaining removeLast.
			(parsers containsKey: dependency) ifFalse: [
				parsers at: dependency put: dependency basicNew.
				remaining addAll: dependency dependencies ] ].
		parsers keysAndValuesDo: [ :class :parser |
			| dependencies |
			dependencies := IdentityDictionary new.
			class dependencies 
				do: [ :dependency | dependencies at: dependency put: (parsers at: dependency) ].
			parser 
				initializeStartingAt: (class == self
					ifTrue: [ aSymbol ]
					ifFalse: [ class startSymbol ]) 
				dependencies: dependencies ].
		parsers keysAndValuesDo: [ :class :parser |
			parser setParser: (parser perform: parser children first name).
			parser productionNames keysAndValuesDo: [ :key :value |
				(parser instVarAt: key) setParser: (parser perform: value) ] ].
		^ parsers at: self
	)
	
	dependencies = (
		"Answer a collection of PPCompositeParser classes that this parser directly dependends on. Override this method in subclasses to declare dependent parsers. The default implementation does not depend on other PPCompositeParser."
	
		^ #()
	)
	
	debug: anObject = (
		^ self debug: anObject startingAt: self startSymbol
	)
)