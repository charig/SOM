PPPredicateParser = PPParser (
	"An abstract parser that accepts if a given predicate holds.Instance Variables:	predicate	<BlockClosure>	The block testing for the predicate.	predicateMessage	<String>	The error message of the predicate.	negated	<BlockClosure>	The block testing for the negation of the predicate.	negatedMessage	<String>	The error message of the negated predicate."
	| predicate predicateMessage negated negatedMessage |
	
	displayName = (
		^ predicateMessage
	)
	
	block = (
		"Answer the predicate block of the receiver."
		
		^ predicate
	)
	
	exampleOn: aStream = (
		"Produce a random character that is valid. If there are characters in the alpha-numeric range prefer those over all others."
	
		| valid normal |
		valid := Character allCharacters
			select: [ :char | self matches: (String with: char) ].
		normal := valid
			select: [ :char | char asInteger < 127 and: [ char isAlphaNumeric ] ].
		aStream nextPut: (normal isEmpty
			ifTrue: [ valid atRandom ]
			ifFalse: [ normal atRandom ])
	)
	
	isIslandBorder = (
		^ true
	)
	
	message = (
		"Answer the failure message."
		
		^ predicateMessage
	)
	
	match: aParser inContext: aDictionary seen: anIdentitySet = (
		^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self block = aParser block and: [ self message = aParser message ] ]
	)
	
	acceptsEpsilon = (
		^ false
	)
	
	printNameOn: aStream = (
		super printNameOn: aStream.
		aStream nextPutAll: ', '.
		aStream print: predicateMessage
	)
)