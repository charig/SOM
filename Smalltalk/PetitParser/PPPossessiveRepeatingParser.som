PPPossessiveRepeatingParser = PPRepeatingParser (
	"The default repeating parser with standard PEG semantics (i.e. possessive, blind, eager)."
	
	aligned = (
		| value |
		"
			self indentationLevel push,
				parser aligned,
				(#space star, parser aligned) star
			self indentationLevel pop	
		"
	
		value := ((self indentationLevel push
			,
				(((min == 0
					ifTrue: [ parser aligned optional ]
					ifFalse: [ parser aligned ])
					,
						(((#space asParser star , parser aligned) and , (#space asParser star , parser aligned))
							==> [ :nodes | nodes second second ]) star)
					==> [ :nodes | 
						nodes first
							ifNil: [ #() ]
							ifNotNil: [ 
								| receiver |
								receiver := OrderedCollection with: nodes first.
								receiver addAll: nodes second.
								receiver yourself asArray ] ]) , self indentationLevel pop) ==> #second).
		value name: 'aligned'.
		^value
	)
	
	parseOn: aPPContext = (
		| memento element elements |
		memento := aPPContext remember.
		elements := OrderedCollection new.
		[ elements size < min ] whileTrue: [
			(element := parser parseOn: aPPContext) isPetitFailure ifTrue: [
				aPPContext restore: memento.
				^ element ].
			elements addLast: element ].
		[ elements size < max ] whileTrue: [
		 	(element := parser parseOn: aPPContext) isPetitFailure
				ifTrue: [ ^ elements asArray ].
			elements addLast: element ].
		^ elements asArray
	)
)