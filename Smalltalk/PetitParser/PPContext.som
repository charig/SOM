PPContext = Object (
	"A PPContext is provides contextual information to the parsing function.Instance Variables	globals:		<Dictionary>	properties:		<Dictionar>	root:		<PPParser>	stream:		<PPStream>globals	- properties that are not restored after backtrackingproperties	- properties that are restored after backtrackingroot	- the root parserstream	- input stream"
	| stream root properties globals furthestFailure |
	
	root = (^ root)
	YAMLChomp = (
		^ self propertyAt: #YAMLChomp ifAbsent: #'keep'
	)
	
	globalAt: aKey put: anObject = (
		"Set the global property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."
	
		^ (globals ifNil: [ globals := Dictionary new ])
			at: aKey put: anObject
	)
	
	restore: aPPContextMemento = (
		aPPContextMemento stream == stream ifFalse: [ self error: 'Oops!' ].
	
		stream position: aPPContextMemento position.
		self restoreProperties: aPPContextMemento.
	)
	
	waterPosition: position = (
		^ self globalAt:  #waterPosition put: position
	)
	
	MPPStack = (
		^ self globalAt: #mppstack ifAbsentPut: [ Stack with: 1 ]
	)
	
	position: anInteger = (
		^ stream position: anInteger
	)
	
	remember = (
		| memento receiver |
		receiver := PPContextMemento new.
		receiver stream: stream.
		memento := receiver.
		memento	position: stream position.
		self rememberProperties: memento.
		^ memento
	)
	
	furthestFailure = (
		" the furthest failure encountered while parsing the input stream "
		
		"^ self globalAt: #furthestFailure ifAbsent: [ nil ]"
		"performance optimization:"
		^ furthestFailure
	)
	
	propertyAt: aKey = (
		"Answer the property value associated with aKey."
		
		^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	removeProperty: aKey = (
		"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."
		
		^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	initialize = (
		stream := nil.
	)
	
	collection = (
		^ stream collection  
	)
	
	uncheckedPeek = (
		^ stream uncheckedPeek
	)
	
	peek = (
		^ stream peek
	)
	
	column = (
		^ stream column
	)
	
	restoreProperties: aPPContextMemento = (
		aPPContextMemento stream == stream ifFalse: [ self error: 'Oops!' ].
		
		properties ifNil: [ ^ self ].
		
		properties keysDo: [ :key |
			(aPPContextMemento hasProperty: key)
				ifTrue: [ properties at: key put: (aPPContextMemento propertyAt: key) ]
				ifFalse: [ properties removeKey: key  ]. 
		].
	
		aPPContextMemento keysAndValuesDo: [ :key :value |
			properties at: key put: value
		]
	)
	
	stream = (
		^ stream
	)
	
	waterPosition = (
		^ self globalAt:  #waterPosition ifAbsentPut: [ nil ]
	)
	
	back = (
		^ stream back
	)
	
	YAMLRestoreM = (
		^ self indentTraces pop: #YAMLM
	)
	
	peekTwice = (
		^ stream peekTwice
	)
	
	YAMLM = (
		^ self propertyAt: #YAMLM ifAbsent: [ ^ 1 ]
	)
	
	YAMLChomp: whatever = (
		self propertyAt: #YAMLChomp put: whatever
	)
	
	indentStack = (
		^ self propertyAt: #indentStack ifAbsentPut: [ IndentStack new ]
	)
	
	next: anInteger = (
		^ stream next: anInteger
	)
	
	propertyAt: aKey ifAbsent: aBlock = (
		"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."
		
		^ properties isNil
			ifTrue: [ aBlock value ]
			ifFalse: [ properties at: aKey ifAbsent: aBlock ]
	)
	
	globalAt: aKey ifAbsentPut: aBlock = (
		"Answer the global property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."
		
		^ self globalAt: aKey ifAbsent: [ self globalAt: aKey put: aBlock value ]
	)
	
	upToAnyOf: whatever = (
		^ stream upToAnyOf: whatever
	)
	
	position = (
		^ stream position
	)
	
	rememberProperties: aPPContextMemento = (
		properties ifNil: [ ^ self ].
		
		properties keysAndValuesDo: [ :key :value |
			aPPContextMemento propertyAt: key put: value
		].
	)
	
	YAMLRestoreN = (
		^ self indentStack pop
	)
	
	isStartOfLine = (
		^ stream isStartOfLine
	)
	
	initializeFor: parser = (
		parser == root ifTrue: [ ^ self ].
		
		root := parser.
	)
	
	skipToAnyOf: aCharacterSet = ( 
		"Set the access position of the receiver to be past the next occurrence of
		a character in the character set. Answer whether a fitting character is found."
	
		[stream atEnd]
			whileFalse: [ (aCharacterSet includes: stream next) ifTrue: [^true]].
		^false
	)
	
	skip: anInteger = ( 
		^ stream skip: anInteger 
	)
	
	YAMLN = (
		self indentStack isEmpty ifTrue: [ ^ 1 ].
		^ self indentStack top column
	)
	
	globalAt: aKey ifAbsent: aBlock = (
		"Answer the global property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."
		
		^ globals isNil
			ifTrue: [ aBlock value ]
			ifFalse: [ globals at: aKey ifAbsent: aBlock ]
	)
	
	lastIndent = (
		^ self indentTraces lastIndent
	)
	
	upToAll: whatever = (
		^ stream upToAll: whatever
	)
	
	next = (
		^ stream next
	)
	
	skipTo: anObject = ( 
		^ stream skipTo: anObject 
	)
	
	stream: aStream = (
		stream := aStream.
	)
	
	YAMLContext = (
		^ self propertyAt: #YAMLContext ifAbsent: #'flow-in'
	)
	
	removeGlobal: aKey ifAbsent: aBlock = (
		"Remove the global property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."
		
		| answer |
		globals isNil ifTrue: [ ^ aBlock value ].
		answer := globals removeKey: aKey ifAbsent: aBlock.
		globals isEmpty ifTrue: [ globals := nil ].
		^ answer
	)
	
	propertyAt: aKey put: anObject = (
		"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."
	
		^ (properties ifNil: [ properties := Dictionary new])
			at: aKey put: anObject
	)
	
	hasGlobal: aKey = (
		"Test if the global property aKey is present."
		
		^ globals notNil and: [ globals containsKey: aKey ]
	)
	
	YAMLN: whatever = (
		| compare |
		compare := PPCompareParser 
						on: [ :ctx | ctx column = whatever  ] 
						message: 'expected level: ', whatever asString
						column: whatever.
	
		self indentStack push: compare.
	)
	
	printOn: aStream = (
		super printOn: aStream.
		aStream nextPut: ':'.
		aStream nextPut: ' '.
		stream printOn: aStream
	)
	
	skipToAll: aString = (
		"Set the access position of the receiver to be past the next occurrence of the subCollection. Answer whether subCollection is found.  No wildcards, and case does matter."
		| pattern startMatch |
		pattern := aString readStream.
		startMatch := nil.
		[ pattern atEnd ] whileFalse: 
			[ stream atEnd ifTrue: [ ^ false ].
			stream next = pattern next 
				ifTrue: [ pattern position = 1 ifTrue: [ startMatch := stream position ] ]
				ifFalse: 
					[ pattern position: 0.
					startMatch ifNotNil: 
						[ stream position: startMatch.
						startMatch := nil ] ] ].
		^ true
	)
	
	removeGlobal: aKey = (
		"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."
		
		^ self removeGlobal: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	YAMLM: whatever = (
		self propertyAt: #YAMLM put: whatever
	)
	
	removeProperty: aKey ifAbsent: aBlock = (
		"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."
		
		| answer |
		properties isNil ifTrue: [ ^ aBlock value ].
		answer := properties removeKey: aKey ifAbsent: aBlock.
		properties isEmpty ifTrue: [ properties := nil ].
		^ answer
	)
	
	atEnd = (
		^ stream atEnd
	)
	
	noteFailure: aPPFailure = (
		"record the furthest failure encountered while parsing the input stream "
	
		( furthestFailure isNil or: [ aPPFailure position > furthestFailure position ]) 
			ifTrue: [ furthestFailure := aPPFailure ].
	)
	
	YAMLContext: whatever = (
		self propertyAt: #YAMLContext put: whatever
	)
	
	globalAt: aKey = (
		"Answer the global property value associated with aKey."
		
		^ self globalAt: aKey ifAbsent: [ self error: 'Property not found' ]
	)
	
	isEndOfLine = (
		^ stream isEndOfLine
	)
	
	hasProperty: aKey = (
		"Test if the property aKey is present."
		
		^ properties notNil and: [ properties containsKey: aKey ]
	)
	
	propertyAt: aKey ifAbsentPut: aBlock = (
		"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."
		
		^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]
	)
	
	upTo: anObject = (
		^ stream upTo: anObject
	)
	
	contents = ( 
		^ stream contents
	)
	
	----------------------------------
	
	
	on: aPPParser stream: aStream = (
		| receiver |
		receiver := self basicNew.
		receiver initialize.
		receiver root: aPPParser.
		receiver stream: aStream asPetitStream.
		^receiver
	)
)