PPPredicateObjectParser = PPPredicateParser (
	"A parser that accepts if a given predicate on one element of the input sequence holds."
	
	
	initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString = (
		predicate := aBlock.
		predicateMessage := aString.
		negated := aNegatedBlock.
		negatedMessage := aNegatedString
	)
	
	negate = (
		"Answer a parser that is the negation of the receiving predicate parser."
		
		^ self class 
			on: negated message: negatedMessage 
			negated: predicate message: predicateMessage
	)
	
	parseOn: aPPContext = (
		^ (aPPContext atEnd not and: [ predicate value: aPPContext uncheckedPeek ])
			ifFalse: [ PPFailure message: predicateMessage context: aPPContext ]
			ifTrue: [ aPPContext next ]
	)
	
	----------------------------------
	
	| cache |
	
	lowercase = (
		^self
			cacheAt: #'lowercase'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isLowercase ]) message: 'lowercase letter expected' ]
	)
	
	word = (
		^self
			cacheAt: #'word'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isAlphaNumeric ]) message: 'letter or digit expected' ]
	)
	
	onside = (
		| align blank |
		"
			Consume blank characters and checks, if the column is in the onside position 
			(as set by #setIl).
		"
		
		align := #align asParser.
		blank := #blank asParser.
		
		^ (align, blank plus) flatten
	)
	
	control = (
		^ self chars: ((0 to: 31) collect: [ :each | Character value: each ]) message: 'control character expected'
	)
	
	hex = (
		^self
			cacheAt: #'hex'
			ifAbsentPut: [ self
			on: (PPCharSetPredicate on: [ :char | 
				(char between: $0 and: $9) 
					or: [ (char between: $a and: $f) 
					or: [ (char between: $A and: $F) ] ] ])
			message: 'hex digit expected' ]
	)
	
	blank = (
		^self
			cacheAt: #'blank'
			ifAbsentPut: [ self
				chars: (String with: Character space with: Character tab) message: 'blank expected' ]
	)
	
	offside = (
		| aligns blank sol nl |
		"
			Consume blank characters and checks if the column is still in offside position
			(as set by #setIl).	
		"
		
		aligns := #aligns asParser.
		blank := #blank asParser.
		sol := #startOfLine asParser.
		nl := #newline asParser.
		
		^ ((sol not, blank star, nl), (aligns not, blank) star, aligns not) flatten
	)
	
	chars: aCollection message: aString = (
		^ self on: (PPCharSetPredicate on: [ :char | aCollection includes: char ]) message: aString
	)
	
	restoreIl = (
		"Restores to the previous indentation level"
		^ #pop asParser
	)
	
	pop = (
		"Restores to the previous indentation level"
		^ [ :context | context indentStack pop ] asParser
	)
	
	startOfLogicalLine = (
		
		^ PPStartOfLogicalLineParser new.
	)
	
	on: aBlock message: aString = (
		^ self on: aBlock message: aString negated: [ :each | (aBlock value: each) not ] message: 'no ' , aString
	)
	
	anyOf: aCollection = (
		^ self
			on: [ :each | aCollection contains: each ] message: 'any of ' , aCollection printString , ' expected'
			negated: [ :each | (aCollection contains: each) not ] message: 'none of ' , aCollection printString ,  'expected'
	)
	
	aligns = (
		"Return if the current column is the same as set by #setIl"
		^ #top asParser
	)
	
	anyExceptAnyOf: aCollection = (
		^ self
			on: [ :each | (aCollection contains: each) not ] message: 'any except ' , aCollection printString , ' expected'
			negated: [ :each | aCollection contains: each ] message: aCollection printString ,  ' not expected'
	)
	
	between: min and: max = (
		^ self
			on: [ :each | each >= min and: [ each <= max ] ] message: min printString , '..' , max printString , ' expected'
			negated: [ :each | each < min or: [ each > max ] ] message: min printString , '..' , max printString , ' not expected'
	)
	
	endOfLine = (
		
		^ PPEndOfLineParser new.
	)
	
	useCache: aBoolean = (
	"
		PPPredicateObjectParser useCache: true.
		PPPredicateObjectParser useCache: false.
	"
		cache := aBoolean 
			ifTrue: [ Dictionary new ]
			ifFalse: [ nil ]
	)
	
	cr = (
		^self
			cacheAt: #'cr'
			ifAbsentPut: [ self char: (Character codePoint: 13) message: 'carriage return expected' ]
	)
	
	letter = (
		^self
			cacheAt: #'letter'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isLetter ]) message: 'letter expected' ]
	)
	
	punctuation = (
		^self
			cacheAt: #'punctuation'
			ifAbsentPut: [ self chars: '.,"\'?!;:#$%&()*+-/<>=@[]\^_{}|~' message: 'punctuation expected' ]
	)
	
	expect: anObject message: aString = (
		^ self 
			on: [ :each | each = anObject ] message: aString
			negated: [ :each | each ~= anObject ] message: 'no ' , aString
	)
	
	tab = (
		^self
			cacheAt: #'tab'
			ifAbsentPut: [ self char: Character tab message: 'tab expected' ]
	)
	
	lf = (
		^self
			cacheAt: #'lf'
			ifAbsentPut: [ self char: (Character codePoint: 10) ]
	)
	
	digit = (
		^self
			cacheAt: #'digit'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isDigit ]) message: 'digit expected' ]
	)
	
	uppercase = (
		^self
			cacheAt: #'uppercase'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isUppercase ]) message: 'uppercase letter expected' ]
	)
	
	cacheAt: aSymbol ifAbsentPut: aBlock = (
	
		cache ifNil: [ ^aBlock value ].
		^(cache
			at: aSymbol
			ifAbsentPut: aBlock) copy
	)
	
	on: aBlock message: aString negated: aNegatedBlock message: aNegatedString = (
		^ self new initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString
	)
	
	newline = (
		^self
			cacheAt: #'newline'
			ifAbsentPut: [ self chars: (String with: (Character codePoint: 13) with: (Character codePoint: 10)) message: 'newline expected' ]
	)
	
	align = (
		| aligns blank sol nl |
		"
			Consume blank characters up to the point when column aligns.	
			Empty lines are not consumed, only possible trailing blanks on a previous line.
		"
		
		aligns := #aligns asParser.
		blank := #blank asParser.
		sol := #startOfLine asParser.
		nl := #newline asParser.
		
		^ ((sol not, blank star, nl) optional, (aligns not, blank) star, aligns) flatten
	)
	
	expect: anObject = (
		^ self expect: anObject message: anObject printString , ' expected'
	)
	
	space = (
		^self
			cacheAt: #'space'
			ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isSeparator ]) message: 'separator expected' ]
	)
	
	prefix = (
		| sol |
		"Consume the content as defined by IndentStack from the beginning of a line"
	
		sol := #startOfLine asParser.
		^ sol, [ :context | context indentStack replay: context ] asParser
	)
	
	top = (
		"Evaluate top of the indent stack"
		^ [ :ctx | 
			ctx indentStack isEmpty ifFalse: [ 
				ctx indentStack top parseOn: ctx 
			] ifTrue: [ 
				PPFailure message: 'IndentStack is empty' context: ctx 
			]
		] asParser
	)
	
	startOfWord = (
		
		^ PPStartOfWordParser new.
	)
	
	char: aCharacter message: aString = (
		^ self expect: aCharacter message: aString
	)
	
	eof = (
		
		^ PPEndOfFileParser new
	)
	
	char: aCharacter = (
		^ self expect: aCharacter message: (String with: '"' with: aCharacter with: '"') , ' expected'
	)
	
	setIl = (
		"
			Sets the current indentation level to the current column by
				pushing a comparison expression on top of the stack.
			
			use #aligns asParser to verify, if column aligns
			use #restoreIl asParser to use previous indentation level
		"
		^ [ :context | 
			| level compare |
			level := context column.
		
			compare := PPCompareParser 
							on: [ :ctx | ctx column = level  ] 
							message: 'expected column: ', level asString.
		
			context indentStack push: compare.
		] asParser
	)
	
	startOfLine = (
		
		^ PPStartOfLineParser new.
	)
	
	any = (
		^self
			cacheAt: #'any'
			ifAbsentPut: [ self
				on: [ :each | true ] message: 'input expected'
				negated: [ :each | false ] message: 'no input expected' ]
	)
)