"

$Id: String.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Character = (
    "Characters are immutable"
    asInteger 	   = primitive
    asString 	   = primitive
    asDigitBase: radix = primitive
    isCharacter	   = (^true)
    isDigit	  	   = primitive
    isLetter  	   = primitive
    isAlphaNumeric = primitive
    asUppercase	   = primitive
    asLowercase	   = primitive
    isUppercase	   = primitive
    isLowercase	   = primitive
    compareWith: anotherChar	   = primitive
    asSymbol = (^self asString asSymbol)
    
    
    isVowel = (
		^'AEIOU' includes: self asUppercase
	)
	
	between: min and: max = (^self >= min and: [self <= max])
    
    isSeparator = (
		| value |
		"Answer whether the receiver is one of the separator characters--space, 
		cr, tab, line feed, or form feed."
		value := self asInteger.
		value = 32 ifTrue: [^true].	"space"
		value = 13 ifTrue: [^true].	"cr"
		value = 9  ifTrue: [^true].	"tab"
		value = 10 ifTrue: [^true].	"line feed"
		value = 12 ifTrue: [^true].	"form feed"
		^false
	)
	
	"Petit Parser"
	asParser = (^ PPLiteralObjectParser on: self)
	
	> anotherChar = (^(self compareWith: anotherChar) > 0)
	>= anotherChar = (^(self compareWith: anotherChar) >= 0)
	<= anotherChar = (^(self compareWith: anotherChar) <= 0)
	< anotherChar = (^(self compareWith: anotherChar) < 0)
	sameAs: anotherChar = (^(self asLowercase compareWith: anotherChar asLowercase) = 0)
	to: other = (
		"Answer with a collection in ascii order -- $a to: $z"
		^ (self asInteger to: other asInteger) collect:
					[:ascii | Character value: ascii]
	)
	
	digitValue = (^self asDigitBase: 10)
	------------------------
    
    codePoint: anInteger = (^self value: anInteger)
	
	value: aNumber = (^self new: aNumber)
	new: aValue = primitive
	
	space = (^self value: 32)
	cr    = (^self value: 13)
	tab   = (^self value: 9)
	lf    = (^self value: 10)
)