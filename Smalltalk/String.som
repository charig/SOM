"

$Id: String.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

String = (
    "Strings are immutable"

    "Concatenate: returns a new string object"
    concatenate: argument = primitive
    + argument            = ( ^self concatenate: argument asString )
    
    "Converting"
    asString = ( ^self )
    asSymbol = primitive
    hashcode = primitive
    
    "Info"
    length = primitive
    isEmpty = (^self length = 0)
    isEmptyOrNil = (^self isEmpty)
    first = (^self charAt: 1)
    
    "Comparing"   
    = argument = primitive
    
    "substring: from 'start' to (and including) 'end'."
    primSubstringFrom: start to: end = primitive
    
    substringFrom: start to: end = (
        ((end <= self length) && (start > 0) && (start <= end))
            ifTrue: [^self primSubstringFrom: start to: end]
            ifFalse: [
                self error: 'Attempting to index string out of its bounds (start: ' + start asString + ' end: ' + end asString + ' length: ' + self length asString + ')' ]
    )

    beginsWith: prefix = (
        self length < prefix length ifTrue: [ ^ false ].
        
        1 to: prefix length do: [:i | 
            ((self charAt: i) = (prefix charAt: i)) ifFalse: [ ^ false ].  
        ].
        
        ^ true
    )
    
    endsWith: suffix = (
      | l sufL |
      l := self length.
      sufL := suffix length.
      l < sufL ifTrue: [ ^ false ].

      1 to: sufL do: [:i |
          (self charAt: l - sufL + i) = (suffix charAt: i) ifFalse: [ ^ false ]
      ].
      ^ true
    )

    asInteger = (
        ^ Integer fromString: self
    )
    
    charAt: argument = (
        ^self substringFrom: argument to: argument
    )
    
    "Printing"
    print    = ( system printString: self )
    
    "Printing"
    split: aSequenceableCollection = (
		| result position oldPosition |
		result := OrderedCollection new: (aSequenceableCollection length / 2) asInteger.
		self split: aSequenceableCollection do: [ :item |
			result add: item ].
		^ result
	)
	
	split: aSequenceableCollection do: aBlock = (
		self split: aSequenceableCollection indicesDo: [ :start :end | 
			aBlock value: (aSequenceableCollection copyFrom: start to: end) ]
	)
	
	split: aSequenceableCollection indicesDo: aBlock = (
		|  position oldPosition |
		
		position := 1.
		oldPosition := position.
		
		position := aSequenceableCollection indexOf: self startingAt: position. 
		[ position > 0 ] whileTrue: [
			aBlock value: oldPosition value: position - 1.
			position := position + 1.
			oldPosition := position.
			position := aSequenceableCollection indexOf: self startingAt: position.
		].
	
		aBlock value: oldPosition value: aSequenceableCollection length.
	)
	
	indexOf: anElement startingAt: start = (
		^self indexOf: anElement startingAt: start ifAbsent: 0
	)
	
	indexOf: anElement startingAt: start ifAbsent: exceptionBlock = (
		start to: self length do: [:index |
			(self charAt: index) = anElement ifTrue: [^ index]
		].
		^ exceptionBlock value
	)
	
	"Pharo Compatibility"
	copyFrom: anIndex to: anotherIndex = (
		anIndex > anotherIndex ifTrue: [^''].
		^self substringFrom: anIndex to: anotherIndex.
	)
	
	do: aBlock = (
		"Refer to the comment in Collection|do:."
		1 to: self length do:
			[:index | aBlock value: (self charAt: index)]
	)
	
	-------------------------------------------------------------
	
	streamContents: blockWithArg = (
		^ self new: 100 streamContents: blockWithArg
	)
	
	new: newSize streamContents: blockWithArg = (
		| stream |
		stream := WriteStream on: (Vector new: newSize).
		blockWithArg value: stream.
		^ stream contents
	)
)
