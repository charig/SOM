"

$Id: String.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

String = (
    "Strings are immutable"

    "Concatenate: returns a new string object"
    concatenate: argument = primitive
    + argument            = ( ^self concatenate: argument asString )
    , argument            = ( ^self concatenate: argument asString )
    
    "Converting"
    asString = ( ^self )
    asSymbol = primitive
    asNumber = primitive
    hashcode = primitive
    
    "Info"
    length = primitive
    isEmpty = (^self length = 0)
    notEmpty = (^self isEmpty not)
    isEmptyOrNil = (^self isEmpty)
    isString = (^true)
    first = (^self at: 1)
    
    "Comparing"   
    = argument = primitive
    
    "substring: from 'start' to (and including) 'end'."
    primSubstringFrom: start to: end = primitive
    
    substringFrom: start to: end = (
        ((end <= self length) && (start > 0) && (start <= end))
            ifTrue: [^self primSubstringFrom: start to: end]
            ifFalse: [
                self error: 'Attempting to index string out of its bounds (start: ' + start asString + ' end: ' + end asString + ' length: ' + self length asString + ')' ]
    )

    beginsWith: prefix = (
        self length < prefix length ifTrue: [ ^ false ].
        
        1 to: prefix length do: [:i | 
            ((self at: i) = (prefix at: i)) ifFalse: [ ^ false ].  
        ].
        
        ^ true
    )
    
    endsWith: suffix = (
      | l sufL |
      l := self length.
      sufL := suffix length.
      l < sufL ifTrue: [ ^ false ].

      1 to: sufL do: [:i |
          (self at: l - sufL + i) = (suffix at: i) ifFalse: [ ^ false ]
      ].
      ^ true
    )

    asInteger = (
        ^ Integer fromString: self
    )
    
    at = primitive
    
    "Printing"
    print    = ( system printString: self )
    printOn: aStream = (self storeOn: aStream)
    storeOn: aStream = (
		| x |
		aStream nextPut: $'.
		1 to: self length do:
			[:i |
				aStream nextPut: (x := self at: i).
				x = $' ifTrue: [aStream nextPut: x]].
		aStream nextPut: $'
	)
    
    "Printing"
    split: aSequenceableCollection = (
		| result position oldPosition |
		result := OrderedCollection new: (aSequenceableCollection length / 2) asInteger.
		self split: aSequenceableCollection do: [ :item |
			result add: item ].
		^ result
	)
	
	split: aSequenceableCollection do: aBlock = (
		self split: aSequenceableCollection indicesDo: [ :start :end | 
			aBlock value: (aSequenceableCollection copyFrom: start to: end) ]
	)
	
	split: aSequenceableCollection indicesDo: aBlock = (
		| position oldPosition |
		position := 1.
		oldPosition := position.
		position := aSequenceableCollection indexOfSubCollection: self startingAt: position.
		[ position > 0 ] whileTrue: [
			aBlock value: oldPosition value: position - 1.
			position := position + self length.
			oldPosition := position.
			position := aSequenceableCollection indexOfSubCollection: self startingAt: position.
		].
	
		aBlock value: oldPosition value: aSequenceableCollection length.
	)
	
	indexOf: anElement startingAt: start = (
		^self indexOf: anElement startingAt: start ifAbsent: 0
	)
	
	includes: aChar = (^(self indexOf: aChar startingAt: 1) > 0)
	
	indexOf: anElement startingAt: start ifAbsent: exceptionBlock = (
		start to: self length do: [:index |
			(self at: index) = anElement ifTrue: [^ index]
		].
		^ exceptionBlock value
	)
	
	indexOfSubCollection: aSubCollection startingAt: anIndex = ( 
		| index |
		index := self findString: aSubCollection startingAt: anIndex.
		index = 0 ifTrue: [^0].
		^ index
	)
	
	findString: key startingAt: start = (
		self length = 0 ifTrue: [^ 0].
		start to: self length - key length + 1 do: [:startIndex | | index |
			index := 1.
			[(self at: startIndex+index-1) = (key at: index)] whileTrue: [
					index = key length ifTrue: [^ startIndex].
					index := index+1
			]
		].
		^ 0
	)	
	
	"Pharo Compatibility"
	copyFrom: anIndex to: anotherIndex = (
		anIndex > anotherIndex ifTrue: [^''].
		^self substringFrom: anIndex to: anotherIndex.
	)
	
	do: aBlock = (
		"Refer to the comment in Collection|do:."
		1 to: self length do:
			[:index | aBlock value: (self at: index)]
	)
	
		
	"FileSystem"
	asVmPathName = (^self)
	readStream = (^ ReadStream on: self)
	
	"Petit Parser"
	asParser = (^ PPLiteralSequenceParser on: self)
	asPetitStream = (^ PPStream on: self)
	asUppercase = (
		| output |
		output := Vector new: self length.
		self do: [:char | output append: char asUppercase].
		^output
	)
	asLowercase = (
		| output |
		output := Vector new: self length.
		self do: [:char | output append: char asLowercase].
		^output
	)
	sameAs: anotherString = (^self = anotherString)
	-------------------------------------------------------------
	
	streamContents: blockWithArg = (
		^ self new: 100 streamContents: blockWithArg
	)
	
	new: newSize streamContents: blockWithArg = (
		| stream |
		stream := WriteStream on: (Vector new: newSize).
		blockWithArg value: stream.
		^ stream contents
	)
	
	with: firstObject = (
		^firstObject asString
	)
	
	with: firstObject with: secondObject = (
		^firstObject asString + secondObject asString.
	)
	
	with: firstObject with: secondObject with: thirdObject = (
		^firstObject asString + secondObject asString + thirdObject asString.
	)
)
