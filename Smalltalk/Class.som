"

$Id: Class.som 27 2009-07-31 11:17:53Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Class = (

    "Accessing"
    name     = primitive
    
    "Converting"
    asString = ( ^self name asString )
    
    "Allocation"
    new = ( ^ self basicNew initialize )
    basicNew = primitive
    basicNew: anEnvironment = primitive
    
    "Meta Information"
    superclass = primitive
    fields     = primitive
    methods    = primitive
    selectors  = ( ^self methods collect: [:inv | inv signature ] )
    >> aSymbol = ( self methods do: [ :method |
            method signature = aSymbol ifTrue: [ ^method ]
        ].
		^nil.
    )
    
    allInstVarNames = (
	    ^self fields copy.
	)	
    
    hasMethod: aSymbol = (
        self methods do: [ :m |
            m signature = aSymbol ifTrue: [ ^true ] ].
        ^false
    )
    
    "Mate"
    updateShapeForInstancesWith = primitive
    getShapeForInstances = primitive
    
    "FileSystem"
    allSubclassesDo: aBlock = ( 
		"Evaluate the argument, aBlock, for each of the receiver's subclasses."
	
		self subclassesDo: 
			[:class | 
			aBlock value: class.
			class allSubclassesDo: aBlock]
	)
	
	subclassesDo: aBlock = (
		"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."
		self subclasses do: aBlock
	)
	
	"TODO: Add support for subclasses inspection"
	subclasses = (
		^#()
	)
	
	isBytes = (
		"Answer whether the receiver has 8-bit instance variables."
		"^ self instSpec >= 8"
		^false.
	)
	
	customHash = (^self name hashcode)
	
	inheritsFrom: aClass = (
		| aSuperclass |
		aSuperclass := self superclass.
		[aSuperclass == nil]
			whileFalse: 
				[aSuperclass == aClass ifTrue: [^true].
				aSuperclass := aSuperclass superclass].
		^false
	)
	
	"Sources"
	sourceCodeAt: aSelector = (
		| method |
		method := (self methods select: [:mthd | mthd signature = aSelector]) first.
		^method sourceCode. 
	)
	
	parseTreeFor: aSelector = (
		| method |
		method := (self methods select: [:mthd | mthd signature = aSelector]) first.
		^method compilation. 
	)
	
	"Extension for the MOP"
	readOnly 		 = ( ^HandleForClass targetSPECIAL: self )
)
